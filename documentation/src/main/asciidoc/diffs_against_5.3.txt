diff --git a/documentation/src/main/asciidoc/contributing/chapter-1-The_Basics.adoc b/documentation/src/main/asciidoc/contributing/chapter-1-The_Basics.adoc
index c82e26f..4e13ea3 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-1-The_Basics.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-1-The_Basics.adoc
@@ -3,7 +3,6 @@
 TIP: In this chapter we quickly walk through the basics on contributing; future chapters go into more depth.
 
 == Prequisites
-
 |=============
 |Java 1.6|Infinispan is baselined on Java 6.0, and is built and tested using Sun Java 6.0.
 |Maven 3|The Infinispan build uses Maven, and we recommend using Maven 3.
@@ -11,7 +10,7 @@ TIP: In this chapter we quickly walk through the basics on contributing; future
 |=============
 
 
-[[sid-65274091_ContributingtoInfinispan-IssueManagementJIRA]]
+[[sid-68355157_ContributingtoInfinispan-IssueManagementJIRA]]
 
 
 == Issue Management - JIRA
@@ -50,7 +49,7 @@ If you need to create a new issue then follow these steps.
 
 .  Finally, hit _Create_ 
 
-[[sid-65274091_ContributingtoInfinispan-VersioningGuidelines]]
+[[sid-68355157_ContributingtoInfinispan-VersioningGuidelines]]
 
 
 ==== Versioning Guidelines
@@ -81,7 +80,7 @@ Version numbers are defined as MAJOR.MINOR.MICRO.MODIFIER.  For example, 4.1.0.B
 
  If the issue relates to a bug which affected a previous FINAL version, then the Fixed In field should also contain the .FINAL version which contains the fix, in addition to any ALPHA, BETA or CR release.  For example, see link:$$https://issues.jboss.org/browse/ISPN-546$$[ISPN-546] . If the issue pertains to a bug in the current release, then the .FINAL version should not be in the Fixed In field.  For example, a bug found in 4.1.0.ALPHA2 (but not in 4.1.0.ALPHA1) should be marked as fixed in 4.1.0.ALPHA3, but not in 4.1.0.FINAL.  For example, see link:$$https://issues.jboss.org/browse/ISPN-416$$[ISPN-416] . 
 
-[[sid-65274091_ContributingtoInfinispan-SourcecontrolGit]]
+[[sid-68355157_ContributingtoInfinispan-SourcecontrolGit]]
 
 
 === Source control - Git
@@ -104,9 +103,9 @@ $ git clone git@github.com:YOUR_GITHB_USERNAME/infinispan.git
 
 ----
 
- For more information, read <<sid-65274098,the Git chapter>> . 
+ For more information, read <<sid-68355164,the Git chapter>> . 
 
-[[sid-65274091_ContributingtoInfinispan-SettingupyourIDE]]
+[[sid-68355157_ContributingtoInfinispan-SettingupyourIDE]]
 
 
 ==== Setting up your IDE
@@ -115,12 +114,12 @@ Maven supports generating IDE configuration files for easy setup of a project. T
 
 Before we import the project, we need to clone the project as described above.
 
-[[sid-65274091_ContributingtoInfinispan-Eclipse]]
+[[sid-68355157_ContributingtoInfinispan-Eclipse]]
 
 
 ==== Eclipse
 
-[[sid-65274091_ContributingtoInfinispan-]]
+[[sid-68355157_ContributingtoInfinispan-]]
 
 
 ===== 
@@ -161,16 +160,16 @@ image::[]
 .TODO InformalFigure image title empty
 image::[]
 
- Code Formatting. From the menu Window-&gt;Preferences-&gt; select Java -&gt; Code Style -&gt; Formatter. Import link:$$https://github.com/infinispan/infinispan/blob/master/ide-settings/eclipse/formatter.xml$$[formatter.xml] Code template. From the menu Window-&gt;Preferences-&gt; select Java -&gt; Code Style -&gt;  Code Templates. Import link:$$https://github.com/infinispan/infinispan/blob/master/ide-settings/eclipse/codetemplates.xml$$[codetemplates.xml] 
+ Code Formatting. From the menu Window-&gt;Preferences-&gt; select Java -&gt; Code Style -&gt; Formatter. Import link:$$https://raw.github.com/infinispan/infinispan/master/ide-settings/eclipse/formatter.xml$$[formatter.xml] Code template. From the menu Window-&gt;Preferences-&gt; select Java -&gt; Code Style -&gt;  Code Templates. Import link:$$https://raw.github.com/infinispan/infinispan/master/ide-settings/eclipse/codetemplates.xml$$[codetemplates.xml] 
 
- As some modules use Scala, it's worth installing the link:$$http://www.scala-lang.org/node/94$$[Scala tools] . 
+ Some modules use Scala, if you plan contributing to one of these modules it's worth installing the link:$$http://www.scala-lang.org/node/94$$[Scala tools] . 
 
-[[sid-65274091_ContributingtoInfinispan-IntelliJIDEA]]
+[[sid-68355157_ContributingtoInfinispan-IntelliJIDEA]]
 
 
 ===== IntelliJ IDEA
 
-[[sid-65274091_ContributingtoInfinispan-Importing]]
+[[sid-68355157_ContributingtoInfinispan-Importing]]
 
 
 ===== =Importing
@@ -192,7 +191,7 @@ image::[]
 .TODO InformalFigure image title empty
 image::[]
 
-[[sid-65274091_ContributingtoInfinispan-Compilersettings]]
+[[sid-68355157_ContributingtoInfinispan-Compilersettings]]
 
 
 ===== =Compiler settings
@@ -219,7 +218,7 @@ image::[]
 
 *  _EXTRA:_ If you are running a multi-core environment (e.g. quad-core or above) then you can follow the instructions on making use of parallelized compilation in IntelliJ 12. Information on how to do this can be found link:$$http://blogs.jetbrains.com/idea/2012/12/intellij-idea-12-compiler-twice-as-fast/$$[here] . 
 
-[[sid-65274091_ContributingtoInfinispan-ScalaPlugin]]
+[[sid-68355157_ContributingtoInfinispan-ScalaPlugin]]
 
 
 ===== =Scala Plugin
@@ -238,12 +237,12 @@ image::[]
 .TODO InformalFigure image title empty
 image::[]
 
-[[sid-65274091_ContributingtoInfinispan-x]]
+[[sid-68355157_ContributingtoInfinispan-x]]
 
 
 ===== =
 
-[[sid-65274091_ContributingtoInfinispan-CodeStyle]]
+[[sid-68355157_ContributingtoInfinispan-CodeStyle]]
 
 
 ===== =Code Style
@@ -251,35 +250,35 @@ image::[]
 
 *  You can find the code style .jar file for IntelliJ in the Infinispan source download. It is located in _/path/to/infinispan/home/ide-settings/intellij_ . 
 
-[[sid-65274091_ContributingtoInfinispan-BuildMaven]]
+[[sid-68355157_ContributingtoInfinispan-BuildMaven]]
 
 
 === Build - Maven
 
- Infinispan uses link:$$http://maven.apache.org/$$[Maven] for builds. Make sure you have Maven 3 installed, and properly configured. For more information, read <<sid-65274098,the Maven chapter>> . 
+ Infinispan uses link:$$http://maven.apache.org/$$[Maven] for builds. Make sure you have Maven 3 installed, and properly configured. For more information, read link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=4784481$$[the Maven chapter] . 
 
-[[sid-65274091_ContributingtoInfinispan-ContinuousIntegrationJenkinsonCloudbees]]
+[[sid-68355157_ContributingtoInfinispan-ContinuousIntegrationTeamCity]]
 
 
-==== Continuous Integration - Jenkins on Cloudbees
+==== Continuous Integration - TeamCity
 
- Infinispan uses Jenkins on Cloudbees for continuous integration. Jenkins polls GitHub for updates and runs whenever updates are available. For more information view link:$$http://www.jboss.org/infinispan/build.html$$[the project site] . 
+ Infinispan link:$$http://www.jetbrains.com/teamcity$$[TeamCity] for continuous integration. TeamCity polls GitHub for updates and runs whenever updates are available. You can check the status of the latest builds link:$$http://ci.infinispan.org/overview.html$$[here] . 
 
-[[sid-65274091_ContributingtoInfinispan-TestingTestNG]]
+[[sid-68355157_ContributingtoInfinispan-TestingTestNG]]
 
 
 === Testing - TestNG
 
- Infinispan uses TestNG for unit and functional tests, and all Infinispan tests are run in parallel. For more information see <<sid-65274093,the Test Suite chapter>> ; this chapter gives advice on writing tests which can safely execute in parallel. 
+ Infinispan uses TestNG for unit and functional tests, and all Infinispan tests are run in parallel. For more information see <<sid-68355159,the Test Suite chapter>> ; this chapter gives advice on writing tests which can safely execute in parallel. 
 
-[[sid-65274091_ContributingtoInfinispan-CommunicatingwithotherInfinispancontributors]]
+[[sid-68355157_ContributingtoInfinispan-CommunicatingwithotherInfinispancontributors]]
 
 
 === Communicating with other Infinispan contributors
 
  Infinispan contributors use a mix of link:$$http://www.jboss.org/infinispan/mailinglists$$[mailings lists] and link:$$http://www.jboss.org/infinispan/community.html$$[IRC] to communicate ideas and designs, with more detailed designs often making their way into link:$$http://community.jboss.org/$$[wiki pages] . 
 
-[[sid-65274091_ContributingtoInfinispan-StyleRequirements]]
+[[sid-68355157_ContributingtoInfinispan-StyleRequirements]]
 
 
 === Style Requirements
@@ -296,39 +295,41 @@ image::[]
 
  All patches or code committed must adhere to this style. Code style settings which can be imported into IntelliJ IDEA and Eclipse are committed in the project sources, in link:$$https://github.com/infinispan/infinispan/blob/master/ide-settings/$$[ide-settings] . 
 
-[[sid-65274091_ContributingtoInfinispan-Spelling]]
+[[sid-68355157_ContributingtoInfinispan-Spelling]]
 
 
 ==== Spelling
 
  Ensure correct spelling in code, comments, Javadocs, etc. (use _American English_ spelling). It is recommended that you use a spellchecker plugin for your IDE. 
 
-[[sid-65274091_ContributingtoInfinispan-Licenseheader]]
+[[sid-68355157_ContributingtoInfinispan-Licenseheader]]
 
 
 ==== License header
 
  All source files must have up-to-date license headers as described in link:$$http://community.jboss.org/docs/16352$$[Copyright Ownership and Licenses] . Never remove existing headers or copyrights. 
 
-[[sid-65274091_ContributingtoInfinispan-Checkincomments]]
+[[sid-68355157_ContributingtoInfinispan-Checkincomments]]
 
 
 ==== Check-in comments
 
- Please ensure any commit comments use link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=65274157_InfinispanandGitHub-Comments$$[this format] if related to a task or issue in JIRA. This helps JIRA pick out these checkins and display them on the issue, making it very useful for back/forward porting fixes. If your comment does not follow this format, your commit may not be merged into upstream. 
+ Please ensure any commit comments use link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=68355224_InfinispanandGitHub-Comments$$[this format] if related to a task or issue in JIRA. This helps JIRA pick out these checkins and display them on the issue, making it very useful for back/forward porting fixes. If your comment does not follow this format, your commit may not be merged into upstream. 
 
-[[sid-65274091_ContributingtoInfinispan-Configuration]]
+[[sid-68355157_ContributingtoInfinispan-Configuration]]
 
 
 === Configuration
 
- Infinispan offers both programmatic configuration and XML configuration. For more information read the <<sid-65274099,Configuration>> chapter. 
+ Infinispan offers both programmatic configuration and XML configuration. For more information read the <<sid-68355165,Configuration>> chapter. 
 
-[[sid-65274091_ContributingtoInfinispan-Logging]]
+[[sid-68355157_ContributingtoInfinispan-Logging]]
 
 
 === Logging
 
+ Infinispan follows the JBoss logging standards, which can be found link:$$https://community.jboss.org/wiki/LoggingStandards$$[here] . 
+
  From Infinispan 5.0 onwards, Infinispan uses JBoss Logging to abstract over the logging backend. Infinispan supports localization of log message for categories of INFO or above as explained in link:$$http://community.jboss.org/docs/16738$$[the JBoss Logging guidelines] . As a developer, this means that for each INFO , WARN , ERROR , FATAL message your code emits, you need to modify the Log class in your module and add an explicit method for it with the right annotations. For example: 
 
 
@@ -378,6 +379,9 @@ The last thing to figure out is which id to give to the message. Each module tha
 | cli interpreter | 19001 - 20000 
 | cli client | 20001 - 21000 
 |mongodb cache store|21001 - 22000
+|jpa cache store|22001 - 23000
+|leveldb cache store|23001 - 24000
+|couchbase cache store|24001 - 25000
 
 |===============
 
diff --git a/documentation/src/main/asciidoc/contributing/chapter-2-Source_Control.adoc b/documentation/src/main/asciidoc/contributing/chapter-2-Source_Control.adoc
index cf1ec14..e756836 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-2-Source_Control.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-2-Source_Control.adoc
@@ -1,4 +1,4 @@
-[[sid-65274091_ContributingtoInfinispan-SourceControl]]
+[[sid-68355157_ContributingtoInfinispan-SourceControl]]
 
 ==  Source Control
 
@@ -11,14 +11,14 @@
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Prerequisitesx]]
+[[sid-68355157_ContributingtoInfinispan-Prerequisitesx]]
 
 
 === requisites
 
  This document assumes some working knowledge of git. We recommend Scott Chacon's excellent link:$$http://progit.org/$$[Pro Git] as a valuable piece of background reading. The book is released under the Creative Commons license and can be downloaded in electronic form for free. At very least, we recommend that link:$$http://progit.org/book/ch2-0.html$$[Chapter 2] , link:$$http://progit.org/book/ch3-0.html$$[Chapter 3] and link:$$http://progit.org/book/ch5-0.html$$[Chapter 5] of Pro Git are read before proceeding. 
 
-[[sid-65274091_ContributingtoInfinispan-Repositories]]
+[[sid-68355157_ContributingtoInfinispan-Repositories]]
 
 
 === Repositories
@@ -27,7 +27,7 @@
 
  Typically, only _Project Admins_ would be able to push to this repo while all else may clone or fork this repo. 
 
-[[sid-65274091_ContributingtoInfinispan-Roles]]
+[[sid-68355157_ContributingtoInfinispan-Roles]]
 
 
 === Roles
@@ -52,7 +52,7 @@ None of the roles assume that you are a Red Hat employee.  All it assumes is ho
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-OccasionalContributor]]
+[[sid-68355157_ContributingtoInfinispan-OccasionalContributor]]
 
 
 ==== Occasional Contributor
@@ -76,7 +76,7 @@ A GitHub pull request is the preferred method to submit a patch!
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-AttachapatchfiletotheJIRAissue]]
+[[sid-68355157_ContributingtoInfinispan-AttachapatchfiletotheJIRAissue]]
 
 
 ===== Attach a patch file to the JIRA issue
@@ -100,7 +100,7 @@ Rather than emailing the patches to a developer mail list, please attach your pa
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-CreatingapullrequestonGitHub]]
+[[sid-68355157_ContributingtoInfinispan-CreatingapullrequestonGitHub]]
 
 
 ===== Creating a pull request on GitHub
@@ -127,13 +127,13 @@ Before you push your work onto your fork of the repository, it is often a good i
 
  The section on _Public Small Project_ in link:$$http://progit.org/book/ch5-2.html$$[Chapter 5, Section 2] of Pro Git has more information on this style of workflow. 
 
-[[sid-65274091_ContributingtoInfinispan-Aworkedexample]]
+[[sid-68355157_ContributingtoInfinispan-Aworkedexample]]
 
 
 ===== =A worked example
 
 
-.  Make sure your master is synced up with upstream. See <<sid-65274091_ContributingtoInfinispan-Ifyouhaveforkedupstream,this section>> for how to do this 
+.  Make sure your master is synced up with upstream. See <<sid-68355157_ContributingtoInfinispan-Ifyouhaveforkedupstream,this section>> for how to do this 
 
 
 . Create new branch for your topic and switch to it. For the example issue, ISPN-1234:
@@ -224,7 +224,7 @@ If you are sharing your forked Infinispan repo with others, then do not rebase!
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Multistepcoordinationbetweendevelopersusingforkedrepositories]]
+[[sid-68355157_ContributingtoInfinispan-Multistepcoordinationbetweendevelopersusingforkedrepositories]]
 
 
 ===== Multi-step coordination between developers using forked repositories
@@ -233,7 +233,7 @@ Sometimes a feature/task is rather complex to implement and requires competence
 
 For example, developer A using his personal Infinispan fork creates a topic branch T and completes as much work as he/she can before requesting for assistance from developer B. Developer A pushes topic T to his personal Infinispan fork where developer B picks it up and brings it down to his local repo. Developer B then in turn completes necessary work, commits his/her changes on branch T, and finally pushes back T to his own personal fork. After issuing request for pull to developer A, developer B waits for notification that developer A integrated his changes. This exchange can be repeated as much as it is necessary and can involve multiple developers.
 
-[[sid-65274091_ContributingtoInfinispan-Aworkedexamplex]]
+[[sid-68355157_ContributingtoInfinispan-Aworkedexamplex]]
 
 
 ===== =A worked example
@@ -277,14 +277,14 @@ git push origin my_ispn244
 
 .  Developer B sends pull request to developer A to integrate changes from my_ispn244 to ispn244 
 
-[[sid-65274091_ContributingtoInfinispan-FrequentContributor]]
+[[sid-68355157_ContributingtoInfinispan-FrequentContributor]]
 
 
 ==== Frequent Contributor
 
 A frequent contributor will only ever submit patches via a pull requests. The pull request will be submitted via GitHub.
 
- Frequent contributors should _always_ fork the upstream project on GitHub and work off a clone of this fork. This is very similar to <<sid-65274091_ContributingtoInfinispan-CreatingapullrequestonGitHub,Creating a pull request on GitHub>> workflow used by a <<sid-65274091_ContributingtoInfinispan-OccasionalContributor,Occasional Contributor>> . 
+ Frequent contributors should _always_ fork the upstream project on GitHub and work off a clone of this fork. This is very similar to <<sid-68355157_ContributingtoInfinispan-CreatingapullrequestonGitHub,Creating a pull request on GitHub>> workflow used by a <<sid-68355157_ContributingtoInfinispan-OccasionalContributor,Occasional Contributor>> . 
 
 
 [NOTE]
@@ -295,7 +295,7 @@ All Infinispan core developers are considered frequent contributors and work off
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-ProjectAdmin]]
+[[sid-68355157_ContributingtoInfinispan-ProjectAdmin]]
 
 
 ==== Project Admin
@@ -313,7 +313,7 @@ All Contributors who are also Project Admins are encouraged to not merge their o
 
 This approach ensures Infinispan maintains quality on the main code source tree, and allows for important code reviews to take place again ensuring quality. Further, it ensures clean and easily traceable code history and makes sure that more than one person knows about the changes being performed.
 
-[[sid-65274091_ContributingtoInfinispan-Merginginpatches]]
+[[sid-68355157_ContributingtoInfinispan-Merginginpatches]]
 
 
 ===== Merging in patches
@@ -328,7 +328,7 @@ Patches submitted via JIRA are audited and promoted to the upstream repository a
 
  More information on applying patches can be found in link:$$http://progit.org/book/ch5-3.html$$[Chapter 5, Section 3] of Pro Git, under _Applying Patches From Email._ 
 
-[[sid-65274091_ContributingtoInfinispan-Handlingpullrequests]]
+[[sid-68355157_ContributingtoInfinispan-Handlingpullrequests]]
 
 
 ===== Handling pull requests
@@ -362,7 +362,7 @@ $ git reset cb4e5d6  # revert the bad merge
 
  More information on pulling changes from remote, forked repos can be found in link:$$http://progit.org/book/ch5-3.html$$[Chapter 5, Section 3] of Pro Git, under _Checking Out Remote Branches_ . 
 
-[[sid-65274091_ContributingtoInfinispan-Possibletroublehandlingpullrequests]]
+[[sid-68355157_ContributingtoInfinispan-Possibletroublehandlingpullrequests]]
 
 
 ===== =Possible trouble handling pull requests
@@ -389,33 +389,33 @@ $ git reset cb4e5d6  # revert the bad merge
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Cuttingreleases]]
+[[sid-68355157_ContributingtoInfinispan-Cuttingreleases]]
 
 
 ===== Cutting releases
 
 Releases can only me cut by Project Admins, and must be done off a recently updated (git fetch and git pull origin) clone of the upstream repo. Infinispan's release.py script takes care of the rest.
 
-[[sid-65274091_ContributingtoInfinispan-ContributorLicenseAgreement%28CLA%29]]
+[[sid-68355157_ContributingtoInfinispan-ContributorLicenseAgreement%28CLA%29]]
 
 
 === Contributor License Agreement (CLA)
 
  Contributors that submit patches to Infinispan, if they're not employed by Red Hat, are required to sign the _Contributor License Agreement (CLA)_ following the instructions in link:$$https://cla.jboss.org/index.seam$$[our dedicated site] . 
 
-[[sid-65274091_ContributingtoInfinispan-Committingyourwork]]
+[[sid-68355157_ContributingtoInfinispan-Committingyourwork]]
 
 
 === Committing your work
 
-[[sid-65274091_ContributingtoInfinispan-Releasebranches]]
+[[sid-68355157_ContributingtoInfinispan-Releasebranches]]
 
 
 ==== Release branches
 
 Infinispan has 4 main release branches. These are master (ongoing work on the 5.0.x series), 4.2.x (ongoing work on the 4.2.x series), 4.1.x and 4.0.x (respective maintenance branches). Work should never be committed directly to any of these release branches; topic branches should always be used for work, and these topic branches should be merged in.
 
-[[sid-65274091_ContributingtoInfinispan-Topicbranches]]
+[[sid-68355157_ContributingtoInfinispan-Topicbranches]]
 
 
 ==== Topic branches
@@ -424,7 +424,7 @@ Some of the biggest features of git are speed and efficiency of branching, and a
 
  link:$$http://progit.org/book/ch3-4.html$$[Chapter 3, Section 4] of Pro Git has a detailed discussion of topic branches. For Infinispan, it makes sense to create a topic branch and name it after the JIRA it corresponds to. (if it doesn't correspond to a JIRA, a simple but descriptive name should be used). 
 
-[[sid-65274091_ContributingtoInfinispan-TopicBranchesAffectingMoreThanOneReleaseBranch]]
+[[sid-68355157_ContributingtoInfinispan-TopicBranchesAffectingMoreThanOneReleaseBranch]]
 
 
 ===== Topic Branches Affecting More Than One Release Branch
@@ -472,7 +472,7 @@ git cherry-pick <commit_id>
 
 * Issue pull requests for both topic branches
 
-[[sid-65274091_ContributingtoInfinispan-Comments]]
+[[sid-68355157_ContributingtoInfinispan-Comments]]
 
 
 ==== Comments
@@ -498,7 +498,7 @@ This can optionally be followed by a detailed explanation of the commit. Why it
 
 Make sure however to split separate concerns - especially if they are unrelated - in separate commits.
 
-[[sid-65274091_ContributingtoInfinispan-Commits]]
+[[sid-68355157_ContributingtoInfinispan-Commits]]
 
 
 ==== Commits
@@ -507,14 +507,14 @@ Make sure however to split separate concerns - especially if they are unrelated
 
  Also, it is important to make sure you don't accidentally commit files for which no real changes have happened, but rather, whitespace has been modified. This often happens with some IDEs. git diff --check should be run before you issue such a pull request, which will check for such "noise" commits and warn you accordingly. Such files should be reverted and not be committed to the branch. 
 
- Adhering to <<sid-65274092_Contributing-TheBasics-StyleRequirements,Infinispan's code style>> guidelines will help minimise "noise" commits. Project Admins are going to ask contributors to reformat their code if necessary. 
+ Adhering to <<sid-68355158_Contributing-TheBasics-StyleRequirements,Infinispan's code style>> guidelines will help minimise "noise" commits. Project Admins are going to ask contributors to reformat their code if necessary. 
 
-[[sid-65274091_ContributingtoInfinispan-Keepingyourrepoinsyncwithupstream]]
+[[sid-68355157_ContributingtoInfinispan-Keepingyourrepoinsyncwithupstream]]
 
 
 === Keeping your repo in sync with upstream
 
-[[sid-65274091_ContributingtoInfinispan-Ifyouhaveclonedupstream]]
+[[sid-68355157_ContributingtoInfinispan-Ifyouhaveclonedupstream]]
 
 
 ==== If you have cloned upstream
@@ -541,7 +541,7 @@ $ git pull origin 4.2.x
 
 ----
 
-[[sid-65274091_ContributingtoInfinispan-Updatingtopicbranches]]
+[[sid-68355157_ContributingtoInfinispan-Updatingtopicbranches]]
 
 
 ===== Updating topic branches
@@ -566,7 +566,7 @@ $ git rebase 4.2.x
 
 ----
 
-[[sid-65274091_ContributingtoInfinispan-Ifyouhaveforkedupstream]]
+[[sid-68355157_ContributingtoInfinispan-Ifyouhaveforkedupstream]]
 
 
 ==== If you have forked upstream
@@ -598,7 +598,7 @@ $ git push origin 4.2.x
 
  A script can do this for you - have a look at link:$$https://github.com/maniksurtani/githelpers/blob/master/contributors/sync_with_upstream$$[sync_with_upstream] . 
 
-[[sid-65274091_ContributingtoInfinispan-Updatingtopicbranchesx]]
+[[sid-68355157_ContributingtoInfinispan-Updatingtopicbranchesx]]
 
 
 ===== Updating topic branches
@@ -625,12 +625,12 @@ $ git rebase 4.2.x
 
 The sync_with_upstream script can do this for you if your topic branch naming conventions match the script.
 
-[[sid-65274091_ContributingtoInfinispan-Tipsonenhancinggit]]
+[[sid-68355157_ContributingtoInfinispan-Tipsonenhancinggit]]
 
 
 === Tips on enhancing git
 
-[[sid-65274091_ContributingtoInfinispan-Autocompletions]]
+[[sid-68355157_ContributingtoInfinispan-Autocompletions]]
 
 
 ==== completions
@@ -650,7 +650,7 @@ source ~/.git-completion.bash
 
  Note that you get git autocompletion for free if you use link:$$http://zsh.sourceforge.net/$$[zsh] instead of bash. 
 
-[[sid-65274091_ContributingtoInfinispan-Terminalcolours]]
+[[sid-68355157_ContributingtoInfinispan-Terminalcolours]]
 
 
 ==== Terminal colours
@@ -678,7 +678,7 @@ source ~/.git-completion.bash
 
 ----
 
-[[sid-65274091_ContributingtoInfinispan-Aliases]]
+[[sid-68355157_ContributingtoInfinispan-Aliases]]
 
 
 ==== Aliases
@@ -705,21 +705,21 @@ source ~/.git-completion.bash
 
 ----
 
-[[sid-65274091_ContributingtoInfinispan-VisualHistory]]
+[[sid-68355157_ContributingtoInfinispan-VisualHistory]]
 
 
 ==== Visual History
 
  Git ships with gitk, a GUI that visually represents a log. If you use Mac OS X, link:$$http://gitx.frim.nl/$$[GitX] is a good alternative. Try typing gitk or gitx in a git project directory. For Linux users, there are lots of alternatives: _gitk_ , _gitg_ , _giggle_ , ... up to _egit_ for Eclipse. 
 
-[[sid-65274091_ContributingtoInfinispan-Visualdiffandmergetools]]
+[[sid-68355157_ContributingtoInfinispan-Visualdiffandmergetools]]
 
 
 ==== Visual diff and merge tools
 
  There are several options available, including link:$$http://kdiff3.sourceforge.net/$$[KDiff3] , link:$$http://meld.sourceforge.net/$$[meld] and Perforce's link:$$http://www.perforce.com/perforce/products/merge.html$$[P4Merge] which are all either open source or available for free. See link:$$http://progit.org/book/ch7-1.html$$[this link] on setting these up (section under External Merge and Diff Tools) 
 
-[[sid-65274091_ContributingtoInfinispan-ChoosinganEditor]]
+[[sid-68355157_ContributingtoInfinispan-ChoosinganEditor]]
 
 
 ==== Choosing an Editor
@@ -736,7 +736,7 @@ source ~/.git-completion.bash
 
 Alternatively, you could fire up TextMate or another editors of your choice.
 
-[[sid-65274091_ContributingtoInfinispan-Shellprompt]]
+[[sid-68355157_ContributingtoInfinispan-Shellprompt]]
 
 
 ==== Shell prompt
diff --git a/documentation/src/main/asciidoc/contributing/chapter-3-Building_Infinispan.adoc b/documentation/src/main/asciidoc/contributing/chapter-3-Building_Infinispan.adoc
index 6f1c7f0..2a49c60 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-3-Building_Infinispan.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-3-Building_Infinispan.adoc
@@ -1,10 +1,10 @@
-[[sid-65274091_ContributingtoInfinispan-BuildingInfinispan]]
+[[sid-68355157_ContributingtoInfinispan-BuildingInfinispan]]
 
 ==  Building Infinispan
 
  Infinispan uses link:$$http://maven.apache.org/$$[Maven] as a build system. 
 
-[[sid-65274091_ContributingtoInfinispan-Requirements]]
+[[sid-68355157_ContributingtoInfinispan-Requirements]]
 
 
 === Requirements
@@ -18,13 +18,94 @@
 
 [WARNING]
 ==== 
- Make sure you follow the steps outlined in link:$$http://community.jboss.org/docs/15169$$[Maven Getting Started - Users] to set up your JBoss repository correctly. This step is _crucial_ to ensure your Maven setup can locate JBoss artifacts! 
+ Make sure you follow the steps outlined in link:$$http://community.jboss.org/docs/15169$$[Maven Getting Started - Users] to set up your JBoss repository correctly. This step is _crucial_ to ensure your Maven setup can locate JBoss artifacts! If you also want to test the EAP integration modules you should also add the appropriate link:$$http://maven.repository.redhat.com/$$[Enterprise Red Hat Maven Repository.] 
 
 
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Quickcommandreference]]
+The following is an example settings.xml to get you started:
+
+
+----
+
+<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
+                      http://maven.apache.org/xsd/settings-1.0.0.xsd" >
+  <localRepository/>
+  <interactiveMode/>
+  <usePluginRegistry/>
+  <offline/>
+  <proxies/>
+  <profiles>
+    <profile>
+      <id>jboss-public-repository</id>
+      <repositories>
+        <repository>
+          <id>jboss-public-repository-group</id>
+          <name>JBoss Public Maven Repository Group</name>
+          <url> https://repository.jboss.org/nexus/content/groups/public-jboss/ </url>
+          <layout>default</layout>
+          <releases>
+            <enabled>true</enabled>
+            <updatePolicy>never</updatePolicy>
+          </releases>
+          <snapshots>
+            <enabled>true</enabled>
+            <updatePolicy>never</updatePolicy>
+          </snapshots>
+        </repository>
+      </repositories>
+      <pluginRepositories>
+        <pluginRepository>
+          <id>jboss-public-repository-group</id>
+          <name>JBoss Public Maven Repository Group</name>
+          <url> https://repository.jboss.org/nexus/content/groups/public-jboss/ </url>
+          <layout>default</layout>
+          <releases>
+            <enabled>true</enabled>
+            <updatePolicy>never</updatePolicy>
+          </releases>
+          <snapshots>
+            <enabled>true</enabled>
+            <updatePolicy>never</updatePolicy>
+          </snapshots>
+        </pluginRepository>
+      </pluginRepositories>
+    </profile>
+
+    <!-- Include early access of application server and other products -->
+    <profile>
+      <id>redhat-earlyaccess-repository</id>
+        <repositories>
+          <repository>
+            <id>redhat-earlyaccess-repository-group</id>
+            <name>Red Hat early access repository</name>
+            <url> http://maven.repository.redhat.com/earlyaccess/all/ </url>
+            <layout>default</layout>
+            <releases>
+              <enabled>true</enabled>
+              <updatePolicy>never</updatePolicy>
+            </releases>
+            <snapshots>
+              <enabled>true</enabled>
+              <updatePolicy>never</updatePolicy>
+            </snapshots>
+          </repository>
+        </repositories>
+     </profile>
+  </profiles>
+  <activeProfiles>
+    <activeProfile>jboss-public-repository</activeProfile>
+    <activeProfile>redhat-earlyaccess-repository</activeProfile>
+  </activeProfiles>
+</settings>
+
+
+----
+
+[[sid-68355157_ContributingtoInfinispan-Quickcommandreference]]
 
 
 === Quick command reference
@@ -64,7 +145,7 @@
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-PublishingreleasestoMaven]]
+[[sid-68355157_ContributingtoInfinispan-PublishingreleasestoMaven]]
 
 
 === Publishing releases to Maven
@@ -97,7 +178,7 @@
 
 ----
 
-[[sid-65274091_ContributingtoInfinispan-Publishingsnapshots]]
+[[sid-68355157_ContributingtoInfinispan-Publishingsnapshots]]
 
 
 ==== Publishing snapshots
@@ -113,14 +194,14 @@ $ mvn clean deploy -Dmaven.test.skip.exec=true
 
 in the Infinispan root directory will deploy a snapshot.
 
-[[sid-65274091_ContributingtoInfinispan-Publishingreleases]]
+[[sid-68355157_ContributingtoInfinispan-Publishingreleases]]
 
 
 ==== Publishing releases
 
 Use the bin/release.py script.
 
-[[sid-65274091_ContributingtoInfinispan-TheMavenArchetypes]]
+[[sid-68355157_ContributingtoInfinispan-TheMavenArchetypes]]
 
 
 === The Maven Archetypes
@@ -145,7 +226,7 @@ These archetypes have only been tested with Maven 3.  Please report back if you
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Startinganewproject]]
+[[sid-68355157_ContributingtoInfinispan-Startinganewproject]]
 
 
 ==== Starting a new project
@@ -165,14 +246,14 @@ $ mvn archetype:generate \
 
  You will be prompted for a few things, including the artifactId , groupId and version of your new project. And that's it - you're ready to go! 
 
-[[sid-65274091_ContributingtoInfinispan-Exploringyournewproject]]
+[[sid-68355157_ContributingtoInfinispan-Exploringyournewproject]]
 
 
 ===== Exploring your new project
 
  The skeleton project ships with a sample application class for interacting with Infinispan. You can open this new project in your IDE - most good IDEs such as IntelliJ and Eclipse allow you to import Maven projects, see link:$$http://www.jetbrains.com/idea/webhelp/importing-maven-project.html$$[this guide] and link:$$http://m2eclipse.sonatype.org/$$[this guide] .  Once you open your project in your IDE, you should examine the generated classes and read through the comments. 
 
-[[sid-65274091_ContributingtoInfinispan-Onthecommandline...]]
+[[sid-68355157_ContributingtoInfinispan-Onthecommandline...]]
 
 
 ===== On the command line...
@@ -188,7 +269,7 @@ $ mvn install -Prun
 
 in your newly generated project. This runs the main() method in the generated application class.
 
-[[sid-65274091_ContributingtoInfinispan-WritingatestcaseforInfinispan]]
+[[sid-68355157_ContributingtoInfinispan-WritingatestcaseforInfinispan]]
 
 
 ==== Writing a test case for Infinispan
@@ -210,7 +291,7 @@ $ mvn archetype:generate \
 
 As above, this will prompt you for project details and again as above, you should open this project in your IDE. Once you have done so, you will see some sample tests written for Infinispan making use of Infinispan's test harness and testing tools along with extensive comments and links for further reading.
 
-[[sid-65274091_ContributingtoInfinispan-Onthecommandline...x]]
+[[sid-68355157_ContributingtoInfinispan-Onthecommandline...x]]
 
 
 ===== On the command line...
@@ -235,7 +316,7 @@ $ mvn test -Pudp
 
 ----
 
-[[sid-65274091_ContributingtoInfinispan-Availableprofiles]]
+[[sid-68355157_ContributingtoInfinispan-Availableprofiles]]
 
 
 ===== Available profiles
@@ -251,7 +332,7 @@ The profiles available in the generated sample project are:
 
 *  jbosstm: Use the embedded link:$$http://www.jboss.org/jbosstm$$[JBoss Transaction Manager] rather than Infinispan's dummy test transaction manager 
 
-[[sid-65274091_ContributingtoInfinispan-ContributingtestsbacktoInfinispan]]
+[[sid-68355157_ContributingtoInfinispan-ContributingtestsbacktoInfinispan]]
 
 
 ===== Contributing tests back to Infinispan
@@ -269,14 +350,14 @@ Want to know how best to work with the repositories and contribute code?  Read
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Versions]]
+[[sid-68355157_ContributingtoInfinispan-Versions]]
 
 
 ==== Versions
 
 The archetypes generate poms with dependencies to specific versions of Infinispan. You should edit these generated poms by hand to point to other versions of Infinispan that you are interested in.
 
-[[sid-65274091_ContributingtoInfinispan-SourceCode]]
+[[sid-68355157_ContributingtoInfinispan-SourceCode]]
 
 
 ==== Source Code
diff --git a/documentation/src/main/asciidoc/contributing/chapter-4-API_Commons_and_Core.adoc b/documentation/src/main/asciidoc/contributing/chapter-4-API_Commons_and_Core.adoc
index ad81c7a..15d6a75 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-4-API_Commons_and_Core.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-4-API_Commons_and_Core.adoc
@@ -1,24 +1,24 @@
-[[sid-65274091_ContributingtoInfinispan-API%2CCommonsandCore]]
+[[sid-68355157_ContributingtoInfinispan-API%2CCommonsandCore]]
 
 ==  API, Commons and Core
 
 In order to provide proper separation between public APIs, common     utilities and the actual implementation of Infinispan, these are     split into 3 modules: infinispan-api, infinispan-commons and     infinispan-core. This separation also makes sure that modules, such     as the remote clients, don't have to depend on infinispan-core and     its transitive dependencies. The following paragraphs describe the     role of each of these modules and give indication as to what goes     where.
 
-[[sid-65274091_ContributingtoInfinispan-API]]
+[[sid-68355157_ContributingtoInfinispan-API]]
 
 
 === API
 
  The infinispan-api module should only contain the public interfaces     which can be used in any context (local, remote, etc). Any additions and/or modifications to this module _must_ be discussed and approved by the team beforehand. Ideally it     should not contain any concrete classes: rare exceptions may be made for small, self-contained classes which need to be     referenced from the API interfaces and for which the introduction of an interface would be deemed cumbersome. 
 
-[[sid-65274091_ContributingtoInfinispan-Commons]]
+[[sid-68355157_ContributingtoInfinispan-Commons]]
 
 
 === Commons
 
 The infinispan-commons module contains utility classes which can be     reused across other modules. Classes in infinispan-commons should be     self-contained and not pull in any dependencies (apart from the existing jboss-logging and infinispan-api). They should     also make no reference to configuration aspects specific to a     particular environment.
 
-[[sid-65274091_ContributingtoInfinispan-Core]]
+[[sid-68355157_ContributingtoInfinispan-Core]]
 
 
 === Core
diff --git a/documentation/src/main/asciidoc/contributing/chapter-5-Running_and_Writing_Tests.adoc b/documentation/src/main/asciidoc/contributing/chapter-5-Running_and_Writing_Tests.adoc
index 45ee71a..1941bcf 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-5-Running_and_Writing_Tests.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-5-Running_and_Writing_Tests.adoc
@@ -1,10 +1,10 @@
-[[sid-65274091_ContributingtoInfinispan-RunningandWritingTests]]
+[[sid-68355157_ContributingtoInfinispan-RunningandWritingTests]]
 
 ==  Running and Writing Tests
 
  Tests are written using the link:$$http://testng.org/$$[TestNG] framework. 
 
-[[sid-65274091_ContributingtoInfinispan-Runningthetests]]
+[[sid-68355157_ContributingtoInfinispan-Runningthetests]]
 
 
 === Running the tests
@@ -55,7 +55,7 @@ rhusar    hard    nproc     16384
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Specifyingwhichteststorun]]
+[[sid-68355157_ContributingtoInfinispan-Specifyingwhichteststorun]]
 
 
 ==== Specifying which tests to run
@@ -89,7 +89,7 @@ $ mvn -Dtest=org/infinispan/api/* test
 
 ----
 
-[[sid-65274091_ContributingtoInfinispan-Skippingthetestrun]]
+[[sid-68355157_ContributingtoInfinispan-Skippingthetestrun]]
 
 
 ==== Skipping the test run
@@ -105,14 +105,14 @@ $ mvn -Dmaven.test.skip.exec=true install
 
  Note that you should _never_ use -Dmaven.test.skip=true since modules' test classes depend on other module test classes, and this will cause compilation errors. 
 
-[[sid-65274091_ContributingtoInfinispan-Runningtestsusing%7B%7B@Parameters%7D%7D]]
+[[sid-68355157_ContributingtoInfinispan-Runningtestsusing%7B%7B@Parameters%7D%7D]]
 
 
 ==== Running tests using @Parameters
 
  If you want to execute tests relying on TestNG's @Parameters from an IDE (such as Eclipse or IntelliJ IDEA), please check link:$$http://infinispan.blogspot.com/2009/06/executing-testng-tests-relying-on.html$$[this blog entry] . 
 
-[[sid-65274091_ContributingtoInfinispan-EnablingTRACEintestlogs]]
+[[sid-68355157_ContributingtoInfinispan-EnablingTRACEintestlogs]]
 
 
 ==== Enabling TRACE in test logs
@@ -135,7 +135,7 @@ gunzip -c trace-infinispan.log.gz > trace-infinsipan.log
 
 ----
 
-[[sid-65274091_ContributingtoInfinispan-Enablingcodecoveragegeneration]]
+[[sid-68355157_ContributingtoInfinispan-Enablingcodecoveragegeneration]]
 
 
 ==== Enabling code coverage generation
@@ -166,14 +166,14 @@ mvn install -pl parent -PjacocoReport
 
  The jacoco-html/ directory will be generated in Infinispan Home directory, which will contain the code coverage report. 
 
-[[sid-65274091_ContributingtoInfinispan-Testgroups]]
+[[sid-68355157_ContributingtoInfinispan-Testgroups]]
 
 
 === Test groups
 
 Each test should belong to one or more group. The group acts as a filter, and is used to select which tests are ran as part of the maven test lifecycle.
 
-[[sid-65274091_ContributingtoInfinispan-WhichgroupshouldIuse%3F]]
+[[sid-68355157_ContributingtoInfinispan-WhichgroupshouldIuse%3F]]
 
 
 ==== Which group should I use?
@@ -208,7 +208,7 @@ Every test (except those not intended to be run by Hudson) should at least be in
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Testpermutations]]
+[[sid-68355157_ContributingtoInfinispan-Testpermutations]]
 
 
 === Test permutations
@@ -224,21 +224,21 @@ $ mvn -Dinfinispan.test.jgroups.protocol=udp test
 
 Each permutation uses its own report directory, and its own html output file name. This allows you to execute multiple permutations without wiping the results from the previous run. Note that due to the way Maven operates, only one permutation can be executed per mvn command. So automating multiple runs requires shell scripting, or some other execution framework to make multiple calls to Maven.
 
-[[sid-65274091_ContributingtoInfinispan-RunningpermutationsmanuallyorinanIDE]]
+[[sid-68355157_ContributingtoInfinispan-RunningpermutationsmanuallyorinanIDE]]
 
 
 ==== Running permutations manually or in an IDE
 
  Sometimes you want to run a test using settings other than the defaults (such as UDP for _jgroups_ group tests or the DummyTransactionManager for _transaction_ group tests). This can be achieved by referring to the Maven POM file to figure out which system properties are passed in to the test when doing something different. For example to run a _jgroups_ group test in your IDE using TCP instead of the default UDP, set -Dinfinispan.test.jgroups.protocol=tcp . Or, to use JBoss JTA (Arjuna TM) instead of the DummyTransactionManager in a _transaction_ group test, set -Dinfinispan.test.jta.tm=jbosstm Please refer to the POM file for more properties and permutations. 
 
-[[sid-65274091_ContributingtoInfinispan-TheParallelTestSuite]]
+[[sid-68355157_ContributingtoInfinispan-TheParallelTestSuite]]
 
 
 === The Parallel Test Suite
 
 Infinispan runs its unit test suite in parallel; Infinispan tests are often IO rather than processor bound, so executing them in parallel offers significant speed up.
 
-[[sid-65274091_ContributingtoInfinispan-Tipsforwritinganddebuggingparalleltests]]
+[[sid-68355157_ContributingtoInfinispan-Tipsforwritinganddebuggingparalleltests]]
 
 
 ==== Tips for writing and debugging parallel tests
diff --git a/documentation/src/main/asciidoc/contributing/chapter-6-Helping_Others_Out.adoc b/documentation/src/main/asciidoc/contributing/chapter-6-Helping_Others_Out.adoc
index e7204be..07a4fd4 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-6-Helping_Others_Out.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-6-Helping_Others_Out.adoc
@@ -1,4 +1,4 @@
-[[sid-65274091_ContributingtoInfinispan-HelpingOthersOut]]
+[[sid-68355157_ContributingtoInfinispan-HelpingOthersOut]]
 
 ==  Helping Others Out
 
diff --git a/documentation/src/main/asciidoc/contributing/chapter-7-Adding_Configuration.adoc b/documentation/src/main/asciidoc/contributing/chapter-7-Adding_Configuration.adoc
index c3b9193..f2c9a4b 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-7-Adding_Configuration.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-7-Adding_Configuration.adoc
@@ -1,4 +1,4 @@
-[[sid-65274091_ContributingtoInfinispan-AddingConfiguration]]
+[[sid-68355157_ContributingtoInfinispan-AddingConfiguration]]
 
 ==  Adding Configuration
 
@@ -15,7 +15,7 @@ Note, these guides assume you are adding an element to the cache configuration,
 
 Before you start adding a configuration property, identify whether you want to add a property to an existing configuration group/element, or whether you need to create a child object. We call the configuration group XXX in the steps below.
 
-[[sid-65274091_ContributingtoInfinispan-Addingaproperty]]
+[[sid-68355157_ContributingtoInfinispan-Addingaproperty]]
 
 
 === Adding a property
@@ -30,7 +30,7 @@ Before you start adding a configuration property, identify whether you want to a
 
  The final step is to add parsing logic to the Parser class. First, add the attribute to name to the Attribute enum (this class simply provides a mapping between the non-type-safe name of the attribute in XML and a type-safe reference to use in the parser). Locate the relevant parseXXX() method on the class, and add a case to the switch statement for the attribute. Call the builder mutator you created above, performing any XML related validation (you are unlikely to need this), and type conversion (using the static methods on the primitive wrapper classes, String class, or relevant enum class). 
 
-[[sid-65274091_ContributingtoInfinispan-Addingagroup]]
+[[sid-68355157_ContributingtoInfinispan-Addingagroup]]
 
 
 === Adding a group
@@ -49,14 +49,14 @@ Before you start adding a configuration property, identify whether you want to a
 
  Finally, add this to the parser. First, add the element to the Element class, which provides a type safe representation of the element name in XML. In the Parser class, add a new parseXXX method, copying one of the others that most matches your requirements (parse methods either parse elements only - look for ParseUtils.requireNoAttributes() , attributes only – look for ParseUtils.requireNoContent() or a combination of both – look for an iterator over both elements and attributes). Add any attributes as discussed in the adding a property guide. Finally, wire this in by locating the parseYYY() method, and adding an element to the switch statement, that calls your new parseXXX() method. 
 
-[[sid-65274091_ContributingtoInfinispan-Don%27tforgettoupdatetheXSDandXSDtest]]
+[[sid-68355157_ContributingtoInfinispan-Don%27tforgettoupdatetheXSDandXSDtest]]
 
 
 === Don't forget to update the XSD and XSD test
 
  Add your new elements or attributes to the XSD in src/main/resources . Update src/test/resources/configs/all.xml to include your new elements or attributes. 
 
-[[sid-65274091_ContributingtoInfinispan-Bridgingtotheoldconfiguration]]
+[[sid-68355157_ContributingtoInfinispan-Bridgingtotheoldconfiguration]]
 
 
 === Bridging to the old configuration
diff --git a/documentation/src/main/asciidoc/contributing/chapter-8-Writing_Documentation_and_FAQs.adoc b/documentation/src/main/asciidoc/contributing/chapter-8-Writing_Documentation_and_FAQs.adoc
index 44c10b2..85a503c 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-8-Writing_Documentation_and_FAQs.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-8-Writing_Documentation_and_FAQs.adoc
@@ -1,8 +1,8 @@
-[[sid-65274091_ContributingtoInfinispan-WritingDocumentationandFAQs]]
+[[sid-68355157_ContributingtoInfinispan-WritingDocumentationandFAQs]]
 
 ==  Writing Documentation and FAQs
 
-[[sid-65274091_ContributingtoInfinispan-Introduction]]
+[[sid-68355157_ContributingtoInfinispan-Introduction]]
 
 
 === Introduction
@@ -12,17 +12,17 @@ Infinispan uses this Confluence instance to store documentation and FAQs. The do
 [options="header"]
 |===============
 | | |Future plans
-| <<sid-65274066>> |Tutorials for using Infinispan|This will be developed into a Getting Started Guide, where each tutorial as an associated quickstart example
-| <<sid-65273977>> |Goes into depth on using and configuring Infinispan|This will be split into a Developer Reference Guide, a Configuration Guide and a Tuning Guide
-| <<sid-65274103>> |An explanation of the terminology used by Infinispan| 
-| <<sid-65273880>> |Contains both product and technical FAQs|Each Q&amp;A will be moved into a document and included into the outline document
+| <<sid-68355130>> |Tutorials for using Infinispan|This will be developed into a Getting Started Guide, where each tutorial as an associated quickstart example
+| <<sid-68355028>> |Goes into depth on using and configuring Infinispan|This will be split into a Developer Reference Guide, a Configuration Guide and a Tuning Guide
+| <<sid-68355169>> |An explanation of the terminology used by Infinispan| 
+| <<sid-68354929>> |Contains both product and technical FAQs|Each Q&amp;A will be moved into a document and included into the outline document
 
 |===============
 
 
  Editing and adding pages on Confluence is restricted to regular contributors to Infinispan (if you think you should have access, or want to become a regular contributor to the documentation, then please email infinispan-dev@lists.jboss.org . 
 
-[[sid-65274091_ContributingtoInfinispan-Whatgoeswhere%3F]]
+[[sid-68355157_ContributingtoInfinispan-Whatgoeswhere%3F]]
 
 
 === What goes where?
@@ -38,14 +38,14 @@ Once the final set of guides (as described in the table above) is complete, ther
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Wikimarkuporrichtext]]
+[[sid-68355157_ContributingtoInfinispan-Wikimarkuporrichtext]]
 
 
 === Wiki markup or rich text
 
 You should always use wiki markup, it gives you much greater control over output format. The "Full notation guide" link in the "Help Tips" panel to the right (on the edit page) gives a full list of markup available.
 
-[[sid-65274091_ContributingtoInfinispan-Markupguide]]
+[[sid-68355157_ContributingtoInfinispan-Markupguide]]
 
 
 === Markup guide
@@ -54,7 +54,7 @@ This section discusses the typical markup you would use to write a documentation
 
 Let's start at the beginning - headers, page structure, and the table of contents.
 
-[[sid-65274091_ContributingtoInfinispan-Headers%2CPageStructureandtheTableofContents]]
+[[sid-68355157_ContributingtoInfinispan-Headers%2CPageStructureandtheTableofContents]]
 
 
 ==== Headers, Page Structure and the Table of Contents
@@ -78,9 +78,9 @@ The child nodes of the Infinispan space represent the various guides, and the FA
 
  h1 headers should only be used to name sections of guide, h2 headers to name sub-sections and so on. You should not skip header levels. Headings should follow the same capitalization rules as a sentence - only capitalize the first letter and proper nouns. 
 
- For an example, take a look at the wiki markup for the <<sid-65274091>> guide. 
+ For an example, take a look at the wiki markup for the <<sid-68355157>> guide. 
 
-[[sid-65274091_ContributingtoInfinispan-Markinguptext]]
+[[sid-68355157_ContributingtoInfinispan-Markinguptext]]
 
 
 ==== Marking up text
@@ -103,12 +103,12 @@ You will likely want to introduce some inline formatting for text. Here are the
 |===============
 
 
-[[sid-65274091_ContributingtoInfinispan-Listsandtables]]
+[[sid-68355157_ContributingtoInfinispan-Listsandtables]]
 
 
 ==== Lists and tables
 
-[[sid-65274091_ContributingtoInfinispan-Markup]]
+[[sid-68355157_ContributingtoInfinispan-Markup]]
 
 
 ===== Markup
@@ -117,7 +117,7 @@ You will normally wish to use an unordered list, however a numbered list is usef
 
 You can make nested lists by using "double" markup.
 
-[[sid-65274091_ContributingtoInfinispan-Grammarinlistsandtables]]
+[[sid-68355157_ContributingtoInfinispan-Grammarinlistsandtables]]
 
 
 ===== Grammar in lists and tables
@@ -126,14 +126,14 @@ The trailing sentence in a list or a table should normally not have a full stop
 
 Often, you will want to introduce a list or a table using a sentence. If you do this, a colon is often used to punctuate the end of the sentence, rather than a full stop/period.
 
-[[sid-65274091_ContributingtoInfinispan-Links]]
+[[sid-68355157_ContributingtoInfinispan-Links]]
 
 
 ==== Links
 
 Links should be used as normal!
 
-[[sid-65274091_ContributingtoInfinispan-Admonitions]]
+[[sid-68355157_ContributingtoInfinispan-Admonitions]]
 
 
 ==== Admonitions
@@ -151,7 +151,7 @@ Confluence supports three admonition styles, and you are encouraged to use them
 
  You can use the title attribute to give the admonition a title 
 
-[[sid-65274091_ContributingtoInfinispan-Imagesandothermedia]]
+[[sid-68355157_ContributingtoInfinispan-Imagesandothermedia]]
 
 
 ==== Images and other media
@@ -177,7 +177,7 @@ This produces
 
 You can also embed Google Docs documents, Twitter searches, slide decks from SlideShare, and presentations from SlideRocket. Just follow the above example, substituting the URL for your media.
 
-[[sid-65274091_ContributingtoInfinispan-Codesamples]]
+[[sid-68355157_ContributingtoInfinispan-Codesamples]]
 
 
 ==== Code samples
@@ -220,7 +220,7 @@ git checkout -b <topic>
 ==== 
 
 
-[[sid-65274091_ContributingtoInfinispan-Voiceandgrammarguide]]
+[[sid-68355157_ContributingtoInfinispan-Voiceandgrammarguide]]
 
 
 === Voice and grammar guide
@@ -322,12 +322,12 @@ ____
 
 * If you are telling the user about a procedure they can follow, do be explicit about this, and enumerate the steps clearly
 
-[[sid-65274091_ContributingtoInfinispan-Glossary]]
+[[sid-68355157_ContributingtoInfinispan-Glossary]]
 
 
 === Glossary
 
- When writing a glossary entry, you should follow the <<sid-65274128>> as a template. 
+ When writing a glossary entry, you should follow the <<sid-68355194>> as a template. 
 
 
 * If the entry is commonly referred to using an acronym, then the title should consistent of the fully expanded name, with the acronym in brackets. You can then use the acronym always within the main text body
@@ -338,7 +338,7 @@ ____
 
 * If you want to make external links (e.g. wikipedia, user guide), then add a h2 header "More resources", and list them there. This clearly indicates to users when they are moving outside of our definitions
 
-[[sid-65274091_ContributingtoInfinispan-Screencasts]]
+[[sid-68355157_ContributingtoInfinispan-Screencasts]]
 
 
 === Screencasts
diff --git a/documentation/src/main/asciidoc/contributing/chapter-9-Managing_this_confluence_instance_.adoc b/documentation/src/main/asciidoc/contributing/chapter-9-Managing_this_confluence_instance_.adoc
index 5d4cce1..05b8a41 100644
--- a/documentation/src/main/asciidoc/contributing/chapter-9-Managing_this_confluence_instance_.adoc
+++ b/documentation/src/main/asciidoc/contributing/chapter-9-Managing_this_confluence_instance_.adoc
@@ -1,4 +1,4 @@
-[[sid-65274091_ContributingtoInfinispan-Managingthisconfluenceinstance.]]
+[[sid-68355157_ContributingtoInfinispan-Managingthisconfluenceinstance.]]
 
 ==  Managing this confluence instance.
 
diff --git a/documentation/src/main/asciidoc/extending/chapter-1-Custom_Commands.adoc b/documentation/src/main/asciidoc/extending/chapter-1-Custom_Commands.adoc
index 47e3aa9..be395c9 100644
--- a/documentation/src/main/asciidoc/extending/chapter-1-Custom_Commands.adoc
+++ b/documentation/src/main/asciidoc/extending/chapter-1-Custom_Commands.adoc
@@ -1,4 +1,4 @@
-[[sid-65274137_ExtendingInfinispan-CustomCommands]]
+[[sid-68355203_ExtendingInfinispan-CustomCommands]]
 
 ==  Custom Commands
 
@@ -43,7 +43,7 @@
 ==== 
  For a full, working example of a sample module that makes use of custom commands and visitors, check out link:$$https://github.com/infinispan/infinispan-sample-module$$[Infinispan Sample Module] . 
 
-[[sid-65274137_ExtendingInfinispan-PreassignedCustomCommandIdRanges]]
+[[sid-68355203_ExtendingInfinispan-PreassignedCustomCommandIdRanges]]
 
 
 === Preassigned Custom Command Id Ranges
diff --git a/documentation/src/main/asciidoc/extending/chapter-2-Writing_custom_commands_in_Infinispan.adoc b/documentation/src/main/asciidoc/extending/chapter-2-Writing_custom_commands_in_Infinispan.adoc
index ec57db1..87430cd 100644
--- a/documentation/src/main/asciidoc/extending/chapter-2-Writing_custom_commands_in_Infinispan.adoc
+++ b/documentation/src/main/asciidoc/extending/chapter-2-Writing_custom_commands_in_Infinispan.adoc
@@ -1,4 +1,4 @@
-[[sid-65274138]]
+[[sid-68355204]]
 
 ==  Writing custom commands in Infinispan
 
@@ -43,7 +43,7 @@
 ==== 
  For a full, working example of a sample module that makes use of custom commands and visitors, check out link:$$https://github.com/infinispan/infinispan-sample-module$$[Infinispan Sample Module] . 
 
-[[sid-65274138_WritingcustomcommandsinInfinispan-PreassignedCustomCommandIdRanges]]
+[[sid-68355204_WritingcustomcommandsinInfinispan-PreassignedCustomCommandIdRanges]]
 
 
 === Preassigned Custom Command Id Ranges
diff --git a/documentation/src/main/asciidoc/faqs/chapter-1-Project_FAQs.adoc b/documentation/src/main/asciidoc/faqs/chapter-1-Project_FAQs.adoc
index 8afe24b..b53bded 100644
--- a/documentation/src/main/asciidoc/faqs/chapter-1-Project_FAQs.adoc
+++ b/documentation/src/main/asciidoc/faqs/chapter-1-Project_FAQs.adoc
@@ -1,4 +1,4 @@
-[[sid-65273880_FrequentlyAskedQuestions-ProjectFAQs]]
+[[sid-68354929_FrequentlyAskedQuestions-ProjectFAQs]]
 
 ==  Project FAQs
 
diff --git a/documentation/src/main/asciidoc/faqs/chapter-2-Technical_FAQs.adoc b/documentation/src/main/asciidoc/faqs/chapter-2-Technical_FAQs.adoc
index 8b75b6c..c9023de 100644
--- a/documentation/src/main/asciidoc/faqs/chapter-2-Technical_FAQs.adoc
+++ b/documentation/src/main/asciidoc/faqs/chapter-2-Technical_FAQs.adoc
@@ -1,4 +1,4 @@
-[[sid-65273880_FrequentlyAskedQuestions-TechnicalFAQs]]
+[[sid-68354929_FrequentlyAskedQuestions-TechnicalFAQs]]
 
 ==  Technical FAQs
 
diff --git a/documentation/src/main/asciidoc/faqs/chapter-3-Project_Evaluation_FAQs.adoc b/documentation/src/main/asciidoc/faqs/chapter-3-Project_Evaluation_FAQs.adoc
index fabcf7a..273fb46 100644
--- a/documentation/src/main/asciidoc/faqs/chapter-3-Project_Evaluation_FAQs.adoc
+++ b/documentation/src/main/asciidoc/faqs/chapter-3-Project_Evaluation_FAQs.adoc
@@ -1,38 +1,38 @@
-[[sid-65273881]]
+[[sid-68354930]]
 
 ==  Project Evaluation FAQs
 
 
-*  <<sid-65273883>> 
+*  <<sid-68354932>> 
 
 
-*  <<sid-65273892>> 
+*  <<sid-68354941>> 
 
 
-*  <<sid-65273884>> 
+*  <<sid-68354933>> 
 
 
-*  <<sid-65273885>> 
+*  <<sid-68354934>> 
 
 
-*  <<sid-65273886>> 
+*  <<sid-68354935>> 
 
 
-*  <<sid-65273887,How come Infinispan's first release is 4.0.0?  This sounds weird!>> 
+*  <<sid-68354936,How come Infinispan's first release is 4.0.0?  This sounds weird!>> 
 
 
-*  <<sid-65273888>> 
+*  <<sid-68354937>> 
 
 
-*  <<sid-65273889>> 
+*  <<sid-68354938>> 
 
 
-*  <<sid-65273890>> 
+*  <<sid-68354939>> 
 
 
-*  <<sid-65273891>> 
+*  <<sid-68354940>> 
 
-[[sid-65273883]]
+[[sid-68354932]]
 
 
 === What is Infinispan?
@@ -62,14 +62,14 @@ So, why would you use it? Infinispan offers:
 
 *  _Support for Compute Grids_ - Infinispan 5 adds the ability to pass a Runnable around the grid. This allows you to push complex processing towards the server where data is local, and pull back results using a Future . This map/reduce style paradigm is common in applications where a large amount of data is needed to compute relatively small results. 
 
-[[sid-65273892]]
+[[sid-68354941]]
 
 
 === What would I use Infinispan for?
 
  Infinispan's link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html$$[org.infinispan.Cache] is a simple, flat data structure that can optionally include characteristics such as distribution, eviction, link:$$http://en.wikipedia.org/wiki/Java_Transaction_API$$[JTA] compatibility. 
 
-[[sid-65273884]]
+[[sid-68354933]]
 
 
 === How is Infinispan related to JBoss Cache?
@@ -80,42 +80,42 @@ The current release of JBoss Cache, 3.2.3, is considered stable enough.  No new
 
 So, why not just call it JBoss Cache 4?. Several reasons.  Binary and even API compatibility with older JBoss Cache releases is no longer maintained, and the new API is simpler and easier to use.  Also, the internal data structure used is not compatible with JBoss Cache.
 
-[[sid-65273885]]
+[[sid-68354934]]
 
 
 === What version of Java does Infinispan need to run? Does Infinispan need an application server to run?
 
  All that is needed is a Java 6.0 compatible JVM. An application server is _not_ a requirement. 
 
-[[sid-65273886]]
+[[sid-68354935]]
 
 
 === Will there be a POJO Cache replacement in Infinispan?
 
  Yes, and this is called link:$$http://www.hibernate.org/subprojects/ogm.html$$[Hibernate OGM] . 
 
-[[sid-65273887]]
+[[sid-68354936]]
 
 
 === How come Infinispan's first release is 4.0.0?  This sounds weird!
 
 We didn't want to release Infinispan as a 1.0, as in all fairness it is not a virgin codebase.  A lot of the code, designs and ideas in Infinispan are from JBoss Cache, and has been tried and tested, proven in high stress environments.  Infinispan should thus be viewed as a mature and stable platform and not a new, experimental one.
 
-[[sid-65273888]]
+[[sid-68354937]]
 
 
 === What should I use, JBoss Cache or Infinispan?
 
 If you are starting a new project, by all means use Infinispan.  If you already use JBoss Cache, consider upgrading to Infinispan as this is where most of our focus and efforts will be.  There is a compatibility layer to help people migrate, although we recommend only using this if you (a) absolutely need a tree structure, or (b) only for a short time as a stepping stone.  You will find that Infinispan's Map based API performs much better.  In addition, we plan to provide migration guides and configuration conversion tools.
 
-[[sid-65273889]]
+[[sid-68354938]]
 
 
 === Where can I get more information on Infinispan?
 
  The link:$$http://www.jboss.org/infinispan$$[Infinispan project page] is your best place to start things off, whether you are interested in using Infinispan in your work or are interested in collaborating on and contributing to Infinispan. 
 
-[[sid-65273890]]
+[[sid-68354939]]
 
 
 === How is this related to JSR 107, the JCACHE specification?
@@ -124,7 +124,7 @@ If you are starting a new project, by all means use Infinispan.  If you already
 
  link:$$http://community.jboss.org/people/manik$$[Manik Surtani] , who is project lead on Infinispan, and link:$$http://in.relation.to/Bloggers/Pete$$[Pete Muir] are on the JSR 107 expert group. 
 
-[[sid-65273891]]
+[[sid-68354940]]
 
 
 === Can I use Infinispan with Hibernate?
@@ -135,7 +135,7 @@ Yes, you can combine one or more of these integrations in the same application:
 *  _Caching database access_ : Hibernate can cache frequently loaded entities and queries in Infinispan, taking advantage of state of the art eviction algorithms, and clustering if needed but it provides a good performance boost in non-clustered deployments too. See link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737110$$[Using Infinispan as JPA/Hibernate Second Level Cache Provider] for details on how to do this. 
 
 
-*  _Storing Lucene indexes_ : When using Hibernate Search to provide full-text capabilities to your Hibernate/JPA enabled application, you need to store an Apache Lucene index separately from the database. You can store the index in Infinispan: this is ideal for clustered applications since it's otherwise tricky to share the index with correct locking on shared file systems, but is an interesting option for non-clustered deployments too as it can combine the benefits of in-memory performance with reliability and write-through to cloud storage backends like S3, or the Hibernate database itself. See link:$$http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#infinispan-directories$$[Infinispan Directory Configuration] in the Hibernate Search reference documentation for the integration details, or learn more about it at <<sid-65273988>> . 
+*  _Storing Lucene indexes_ : When using Hibernate Search to provide full-text capabilities to your Hibernate/JPA enabled application, you need to store an Apache Lucene index separately from the database. You can store the index in Infinispan: this is ideal for clustered applications since it's otherwise tricky to share the index with correct locking on shared file systems, but is an interesting option for non-clustered deployments too as it can combine the benefits of in-memory performance with reliability and write-through to cloud storage backends like S3, or the Hibernate database itself. See link:$$http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#infinispan-directories$$[Infinispan Directory Configuration] in the Hibernate Search reference documentation for the integration details, or learn more about it at <<sid-68355039>> . 
 
 
 *  _Using Infinispan as a database replacement_ : using the experimental Hibernate Object/Grid Mapper (OGM) you can remove the database and store your entities and relations in the grid directly, interacting with it through the well known JPA(2) interface, with some limitations in the query capabilities. For more details see link:$$http://www.hibernate.org/subprojects/ogm.html$$[Hibernate Object/Grid Mapper (OGM)] . 
diff --git a/documentation/src/main/asciidoc/faqs/chapter-4-Technical_FAQs.adoc b/documentation/src/main/asciidoc/faqs/chapter-4-Technical_FAQs.adoc
index b1cb842..992765d 100644
--- a/documentation/src/main/asciidoc/faqs/chapter-4-Technical_FAQs.adoc
+++ b/documentation/src/main/asciidoc/faqs/chapter-4-Technical_FAQs.adoc
@@ -1,275 +1,280 @@
-[[sid-65273893]]
+[[sid-68354942]]
 
 ==  Technical FAQs
 
 
-*  <<sid-65273894>> 
+*  <<sid-68354943>> 
 
 
-*  <<sid-65273897>> 
+*  <<sid-68354944>> 
 
 
-*  <<sid-65273895>> 
+*  <<sid-68354945>> 
 
 
-*  <<sid-65273896>> 
+*  <<sid-68354946>> 
 
 
-*  <<sid-65273898>> 
+*  <<sid-68354947>> 
 
 
-*  <<sid-65273899>> 
+*  <<sid-68454081>> 
 
 
-*  <<sid-65273902>> 
+*  <<sid-68354948>> 
 
 
-*  <<sid-65273900>> 
+*  <<sid-68354949>> 
 
 
-*  <<sid-65273903>> 
+*  <<sid-68354952>> 
 
 
-*  <<sid-65273901>> 
+*  <<sid-68354950>> 
 
 
-*  <<sid-65273904>> 
+*  <<sid-68354953>> 
 
 
-*  <<sid-65273905>> 
+*  <<sid-68354951>> 
 
 
-*  <<sid-65273908>> 
+*  <<sid-68354955>> 
 
 
-*  <<sid-65273909>> 
+*  <<sid-68354956>> 
 
 
-*  <<sid-65273910>> 
+*  <<sid-68354959>> 
 
 
-*  <<sid-65273906>> 
+*  <<sid-68354960>> 
 
 
-*  <<sid-65273907>> 
+*  <<sid-68354961>> 
 
 
-*  <<sid-65273911>> 
+*  <<sid-68354957>> 
 
 
-*  <<sid-65273912>> 
+*  <<sid-68354958>> 
 
 
-*  <<sid-65273913>> 
+*  <<sid-68354962>> 
 
 
-*  <<sid-65273917>> 
+*  <<sid-68354963>> 
 
 
-*  <<sid-65273914>> 
+*  <<sid-68354964>> 
 
 
-*  <<sid-65273916>> 
+*  <<sid-68354968>> 
 
 
-*  <<sid-65273915>> 
+*  <<sid-68354965>> 
 
 
-*  <<sid-65273918>> 
+*  <<sid-68354967>> 
 
 
-*  <<sid-65273920>> 
+*  <<sid-68354966>> 
 
 
-*  <<sid-65273921>> 
+*  <<sid-68354969>> 
 
 
-*  <<sid-65273922>> 
+*  <<sid-68354971>> 
 
 
-*  <<sid-65273919>> 
+*  <<sid-68354972>> 
 
 
-*  <<sid-65273923>> 
+*  <<sid-68354973>> 
 
 
-*  <<sid-65273924>> 
+*  <<sid-68354970>> 
 
 
-*  <<sid-65273926>> 
+*  <<sid-68354974>> 
 
 
-*  <<sid-65273931>> 
+*  <<sid-68354975>> 
 
 
-*  <<sid-65273928>> 
+*  <<sid-68354977>> 
 
 
-*  <<sid-65273930>> 
+*  <<sid-68354982>> 
 
 
-*  <<sid-65273927>> 
+*  <<sid-68354979>> 
 
 
-*  <<sid-65273929>> 
+*  <<sid-68354981>> 
 
 
-*  <<sid-65273932>> 
+*  <<sid-68354978>> 
 
 
-*  <<sid-65273933>> 
+*  <<sid-68354980>> 
 
 
-*  <<sid-65273934>> 
+*  <<sid-68354983>> 
 
 
-*  <<sid-65273935>> 
+*  <<sid-68354984>> 
 
 
-*  <<sid-65273936>> 
+*  <<sid-68354985>> 
 
 
-*  <<sid-65273937>> 
+*  <<sid-68354986>> 
 
 
-*  <<sid-65273938>> 
+*  <<sid-68354987>> 
 
 
-*  <<sid-65273939>> 
+*  <<sid-68354988>> 
 
 
-*  <<sid-65273940>> 
+*  <<sid-68354989>> 
 
 
-*  <<sid-65273941>> 
+*  <<sid-68354990>> 
 
 
-*  <<sid-65273942>> 
+*  <<sid-68354991>> 
 
 
-*  <<sid-65273944>> 
+*  <<sid-68354992>> 
 
 
-*  <<sid-65273943>> 
+*  <<sid-68354993>> 
 
 
-*  <<sid-65273945>> 
+*  <<sid-68354995>> 
 
 
-*  <<sid-65273946>> 
+*  <<sid-68354994>> 
 
 
-*  <<sid-65273947>> 
+*  <<sid-68354996>> 
 
 
-*  <<sid-65273948>> 
+*  <<sid-68354997>> 
 
 
-*  <<sid-65273949>> 
+*  <<sid-68354998>> 
 
 
-*  <<sid-65273950>> 
+*  <<sid-68354999>> 
 
 
-*  <<sid-65273951>> 
+*  <<sid-68355000>> 
 
 
-*  <<sid-65273952>> 
+*  <<sid-68355001>> 
 
 
-*  <<sid-65273958>> 
+*  <<sid-68355002>> 
 
 
-*  <<sid-65273954>> 
+*  <<sid-68355003>> 
 
 
-*  <<sid-65273959>> 
+*  <<sid-68355009>> 
 
 
-*  <<sid-65273955>> 
+*  <<sid-68355005>> 
 
 
-*  <<sid-65273956>> 
+*  <<sid-68355010>> 
 
 
-*  <<sid-65273953>> 
+*  <<sid-68355006>> 
 
 
-*  <<sid-65273957>> 
+*  <<sid-68355007>> 
 
 
-*  <<sid-65273960>> 
+*  <<sid-68355004>> 
 
 
-*  <<sid-65273961>> 
+*  <<sid-68355008>> 
 
 
-*  <<sid-65273962>> 
+*  <<sid-68355011>> 
 
 
-*  <<sid-65273963>> 
+*  <<sid-68355012>> 
 
 
-*  <<sid-65273964>> 
+*  <<sid-68355013>> 
 
 
-*  <<sid-65273968>> 
+*  <<sid-68355014>> 
 
 
-*  <<sid-65273967>> 
+*  <<sid-68355015>> 
 
 
-*  <<sid-65273965>> 
+*  <<sid-68355019>> 
 
 
-*  <<sid-65273966>> 
+*  <<sid-68355018>> 
 
 
-*  <<sid-65273969>> 
+*  <<sid-68355016>> 
 
 
-*  <<sid-65273970>> 
+*  <<sid-68355017>> 
 
 
-*  <<sid-65273972>> 
+*  <<sid-68355020>> 
 
 
-*  <<sid-65273971>> 
+*  <<sid-68355021>> 
 
 
-*  <<sid-65273973>> 
+*  <<sid-68355023>> 
 
 
-*  <<sid-65273974>> 
+*  <<sid-68355022>> 
 
 
-*  <<sid-65273975>> 
+*  <<sid-68355024>> 
 
 
-*  <<sid-65273976>> 
+*  <<sid-68355025>> 
 
-[[sid-65273894]]
+
+*  <<sid-68355026>> 
+
+
+*  <<sid-68355027>> 
+
+[[sid-68354943]]
 
 
 === General FAQs
 
 
-*  <<sid-65273897>> 
+*  <<sid-68354944>> 
 
 
-*  <<sid-65273895>> 
+*  <<sid-68354945>> 
 
 
-*  <<sid-65273896>> 
+*  <<sid-68354946>> 
 
-[[sid-65273897]]
 
+*  <<sid-68354947>> 
 
-==== Is Infinispan's configuration compatible with JBoss Cache?
 
-No.  But we intend to provide transformation scripts.  Keep in mind though that as long as you use custom components - custom interceptors, cache loaders, eviction policies - we will not be able to translate these and this would have to be done manually.
+*  <<sid-68454081>> 
 
-[[sid-65273895]]
+[[sid-68354944]]
 
 
 ==== What APIs does Infinispan offer?
@@ -290,37 +295,62 @@ No.  But we intend to provide transformation scripts.  Keep in mind though tha
 ==== 
 
 
-[[sid-65273896]]
+[[sid-68354945]]
 
 
 ==== Which JVMs (JDKs) does Infinispan work with?
 
 Infinispan is developed and primarily tested against Sun's Java SE 6.  It should work with most Java SE 6 implementations, including those from IBM, HP, Apple, Oracle (BEA), and IcedTea.  We expect to test on Java SE 7 once this is finalized as well.
 
-[[sid-65273898]]
+[[sid-68354946]]
+
+
+==== Is Infinispan's configuration compatible with JBoss Cache?
+
+No.  But we intend to provide transformation scripts.  Keep in mind though that as long as you use custom components - custom interceptors, cache loaders, eviction policies - we will not be able to translate these and this would have to be done manually.
+
+[[sid-68354947]]
+
+
+==== Grouping API vs Key Affinity Service
+
+ The key affinity (for keys generated with the link:$$https://docs.jboss.org/author/display/ISPN/Key+affinity+service$$[Key Affinity Service] ) might be lost during topology changes. E.g. if k1 maps to node N1 and another node is added to the system, k1 can me migrated to N2 (affinity is lost). With link:$$https://docs.jboss.org/author/display/ISPN/The+Grouping+API$$[grouping API] you have the guarantee that the same node (you don't know/control which node) hosts all the data from the same group even after topology changes. 
+
+[[sid-68454081]]
+
+
+==== Does Infinispan store data by value or by reference?
+
+By default, Infinispan stores data by reference. So once clients store some data, clients can still modify entries via original object references. This means that since client references are valid, clients can make changes to entries in the cache using those references, but these modifications are only local and you still need to call one of the cache's put/replace... methods in order for changes to replicate.
+
+ Obviously, allowing clients to modify cache contents directly, without any cache invocation, has some risks and that's why Infinispan offers the possibility to store data by value instead. The way store-by-value is enabled is by <<sid-68355106,enabling Infinispan to store data in binary format and forcing it to do these binary transformations eagerly>> . 
+
+The reason Infinispan stores data by-reference instead of by-value is performance. Storing data by reference is quicker than doing it by value because it does not have the penalty of having to transform keys and values into their binary format.
+
+[[sid-68354948]]
 
 
 === Cache Loaders and Cache Store FAQs
 
 
-*  <<sid-65273899>> 
+*  <<sid-68354949>> 
 
 
-*  <<sid-65273902>> 
+*  <<sid-68354952>> 
 
 
-*  <<sid-65273900>> 
+*  <<sid-68354950>> 
 
 
-*  <<sid-65273903>> 
+*  <<sid-68354953>> 
 
 
-*  <<sid-65273901>> 
+*  <<sid-68354951>> 
 
 
-*  <<sid-65273904>> 
+*  <<sid-68354955>> 
 
-[[sid-65273899]]
+[[sid-68354949]]
 
 
 ==== Cache loaders and cache stores - what's the difference?
@@ -336,7 +366,7 @@ Infinispan ships with several high performance implementations of these interfac
 ==== 
 
 
-[[sid-65273902]]
+[[sid-68354952]]
 
 
 ==== Are modifications to asynchronous cache stores coalesced or aggregated?
@@ -345,30 +375,30 @@ Before 4.0.0.Beta1, cache store modifications were queued in such way that a mod
 
  Since 4.0.0.Beta1 ( link:$$https://jira.jboss.org/jira/browse/ISPN-116$$[ISPN-116] ), modifications are coalesced or aggregated for the interval that the modification processor thread is currently applying. This means that while changes are being queued, if multiple modifications are made to the same key, only the key's last state will be applied, hence reducing the number of calls to the cache store. 
 
-[[sid-65273900]]
+[[sid-68354950]]
 
 
 ==== In JBoss Cache, the JDBC and File CacheLoaders had restrictions such as only being able to use Strings in Fqns. Is this still the case in Infinispan?
 
  No.  We have completely re-written these implementations with a much better design which allows us to use arbitrary keys (or Fqn elements if using the link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/tree/TreeCache.html$$[TreeCache] API), provided they are serializable.  For details, see the link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/loader/bucket/BucketBasedCacheStore.html$$[BucketBasedCacheStore] . 
 
-[[sid-65273903]]
+[[sid-68354953]]
 
 
 ==== What does the passivation flag do?
 
  Passivation is a mode of storing entries in the cache store _only when_ they are evicted from memory.  The benefit of this approach is to prevent a lot of expensive writes to the cache store if an entry is hot (frequently used) and hence _not_ evicted from memory.  The reverse process, known as _activation_ , occurs when a thread attempts to access an entry which is _not_ in memory but is in the store (i.e., a _passivated_ entry).  Activation involves loading the entry into memory, and then _removing_ it from the cache store.  With passivation enabled, the cache uses the cache store as an overflow tank, akin to link:$$http://en.wikipedia.org/wiki/Paging$$[swapping memory pages to disk] in link:$$http://en.wikipedia.org/wiki/Virtual_memory$$[virtual memory] implementations in operating systems. 
 
- If passivation is disabled, the cache store behaves as a <<sid-65274106>> (or <<sid-65274107>> if asynchronous) cache, where all entries in memory are also maintained in the cache store.  The effect of this is that the cache store will always contain a superset of what is in memory. 
+ If passivation is disabled, the cache store behaves as a <<sid-68355172>> (or <<sid-68355173>> if asynchronous) cache, where all entries in memory are also maintained in the cache store.  The effect of this is that the cache store will always contain a superset of what is in memory. 
 
-[[sid-65273901]]
+[[sid-68354951]]
 
 
 ==== What if I get IOException "Unsupported protocol version 48" with JdbcStringBasedCacheStore?
 
  You have probably set your data column type to VARCHAR , CLOB or something similar, but it should be BLOB/VARBINARY . Even though it's called JdbcStringBasedCacheStore , only the keys are required to be strings; the values can be anything, so they need to be stored in a binary column. See the link:$$http://docs.jboss.org/infinispan/5.0/apidocs/org/infinispan/loaders/jdbc/AbstractNonDelegatingJdbcCacheStoreConfig.html#setDataColumnType%28java.lang.String%29$$[setDataColumnType javadoc] for more details. 
 
-[[sid-65273904]]
+[[sid-68354955]]
 
 
 ==== Is there any way I can boost cache store's performance? SKIP_CACHE_LOAD
@@ -389,34 +419,34 @@ cache.getAdvancedCache().withFlags(Flag.SKIP_CACHE_LOAD).put(key, value);
 
  More flags are described at link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737122$$[Per-Invocation Flags] 
 
-[[sid-65273905]]
+[[sid-68354956]]
 
 
 === Locking FAQs
 
 
-*  <<sid-65273908>> 
+*  <<sid-68354959>> 
 
 
-*  <<sid-65273909>> 
+*  <<sid-68354960>> 
 
 
-*  <<sid-65273910>> 
+*  <<sid-68354961>> 
 
 
-*  <<sid-65273906>> 
+*  <<sid-68354957>> 
 
 
-*  <<sid-65273907>> 
+*  <<sid-68354958>> 
 
-[[sid-65273908]]
+[[sid-68354959]]
 
 
 ==== Does Infinispan support distributed eager locking?
 
 Yes it does. Infinispan, by default, acquires remote locks lazily.  Locks are acquired locally on a node that runs a transaction while other cluster nodes attempt to lock cache keys involved in a transaction during two-phase prepare/commit phase. However, if desired, Infinispan can eagerly lock cache keys either explicitly or implicitly.
 
-[[sid-65273909]]
+[[sid-68354960]]
 
 
 ==== How does Infinispan support explicit eager locking?
@@ -435,7 +465,7 @@ Consider a transaction running on one of the cache nodes:
 
 ----
 
-[[sid-65273910]]
+[[sid-68354961]]
 
 
 ==== How does Infinispan support implicit eager locking?
@@ -466,31 +496,31 @@ Implicit eager locking is enabled as follows:
 
 ----
 
-[[sid-65273906]]
+[[sid-68354957]]
 
 
 ==== JBoss Cache exposed several different locking schemes - pessimistic, optimistic and MVCC.  I don't see a way to specify locking scheme in Infinispan.  Why is this?
 
 This is because Infinispan only supports MVCC.  MVCC is by far more performant, threadsafe and consistent than the other locking schemes.
 
-[[sid-65273907]]
+[[sid-68354958]]
 
 
 ==== What isolation levels does Infinispan support?
 
- Infinispan only supports the isolation levels <<sid-65274131>> and <<sid-65274132>> . 
+ Infinispan only supports the isolation levels <<sid-68355197>> and <<sid-68355198>> . 
 
- The default isolation mode is <<sid-65274131>> .  Unlike JBoss Cache, which used <<sid-65274132>> by default.  We consider <<sid-65274131>> to be good enough for most applications and hence its use as a default. 
+ The default isolation mode is <<sid-68355197>> .  Unlike JBoss Cache, which used <<sid-68355198>> by default.  We consider <<sid-68355197>> to be good enough for most applications and hence its use as a default. 
 
-[[sid-65273911]]
+[[sid-68354962]]
 
 
 === Transaction FAQs
 
 
-*  <<sid-65273912>> 
+*  <<sid-68354963>> 
 
-[[sid-65273912]]
+[[sid-68354963]]
 
 
 ==== When using Atomikos transaction manager, distributed caches are not distributing data, what is the problem?
@@ -505,31 +535,31 @@ There're two ways to get around this issue, either:
 
 .  If using Infinispan 4.2.1.CR1 or earlier, link:$$http://www.atomikos.com/Documentation/JtaProperties$$[configure Atomikos so that com.atomikos.icatch.threaded_2pc is set to false] . This results in commits happening in the same thread that made the cache operations. 
 
-[[sid-65273913]]
+[[sid-68354964]]
 
 
 === Eviction and Expiration FAQs
 
 
-*  <<sid-65273917>> 
+*  <<sid-68354968>> 
 
 
-*  <<sid-65273914>> 
+*  <<sid-68354965>> 
 
 
-*  <<sid-65273916>> 
+*  <<sid-68354967>> 
 
 
-*  <<sid-65273915>> 
+*  <<sid-68354966>> 
 
-[[sid-65273917]]
+[[sid-68354968]]
 
 
 ==== Cache's number of entries never reaches configured maxEntries, why is that?
 
- In the current eviction design, eviction happens per map segment, so when the segment gets filled up, eviction runs in that segment. This means that the theoretical maxEntries might never be achieved, but it'll be close enough. For more information, see the <<sid-65274032,eviction documentation>> . 
+ In the current eviction design, eviction happens per map segment, so when the segment gets filled up, eviction runs in that segment. This means that the theoretical maxEntries might never be achieved, but it'll be close enough. For more information, see the <<sid-68355088,eviction documentation>> . 
 
-[[sid-65273914]]
+[[sid-68354965]]
 
 
 ==== Expiration does not work, what is the problem?
@@ -544,14 +574,14 @@ There're two ways to get around this issue, either:
 
  If you have not enabled (2), or your eviction thread wakeup interval is large and you probe jconsole before the eviction thread kicks in, you will still see the expired entry.  You can be assured that if you tried to _retrieve_ the entry via a get() or containsKey() though, you won't see the entry (and the entry will be removed). 
 
-[[sid-65273916]]
+[[sid-68354967]]
 
 
 ==== Why is cache size sometimes even higher than specified maxEntries of the eviction configuration element?
 
 Although one can specify maxEntries to be a value that is not a power of two, the underlying algorithm will size it to the value V closest to power of two that is larger than maxEntries specified. Eviction algorithms guarantee that the size of cache container will never be greater than V.
 
-[[sid-65273915]]
+[[sid-68354966]]
 
 
 ==== Why isn't there a notification for the expiration of a cache entry?
@@ -569,90 +599,90 @@ Infinispan does not guarantee that an eviction will occur immediately on timeout
 
  As the eviction is only guaranteed to happen _some time later_ than the eviction timeout has elapsed, it has been decided that it is less surprising to not provide a callback than to provide a callback at this later point. 
 
-[[sid-65273918]]
+[[sid-68354969]]
 
 
 === Cache Manager FAQs
 
 
-*  <<sid-65273920>> 
+*  <<sid-68354971>> 
 
 
-*  <<sid-65273921>> 
+*  <<sid-68354972>> 
 
 
-*  <<sid-65273922>> 
+*  <<sid-68354973>> 
 
 
-*  <<sid-65273919>> 
+*  <<sid-68354970>> 
 
-[[sid-65273920]]
+[[sid-68354971]]
 
 
 ==== Can I create caches using different cache modes using the same cache manager?
 
 Yes.  You can create caches using different cache modes, both synchronous and asynchronous, using the same cache manager.
 
-[[sid-65273921]]
+[[sid-68354972]]
 
 
 ==== Can transactions span different Cache instances from the same cache manager?
 
 Yes.  Each cache behaves as a separate, standalone JTA resource.  Internally though, components may be shared as an optimization but this in no way affects how the caches interact with a JTA manager.
 
-[[sid-65273922]]
+[[sid-68354973]]
 
 
 ==== How does multi-tenancy work?
 
 Multi-tenancy is achieved by namespacing.  A single Infinispan cluster can have several named caches (attached to the same CacheManager), and different named caches can have duplicate keys.  So this is, in effect, multi-tenancy for your key/value store.
 
-[[sid-65273919]]
+[[sid-68354970]]
 
 
 ==== Infinispan allows me to create several Caches from a single CacheManager.  Are there any reasons to create separate CacheManagers?
 
 As far as possible, internal components are shared between Cache instances.  Notably, RPC and networking components are shared.  If you need caches that have different network characteristics - such as one cache using TCP while another uses UDP - we recommend you create these using different cache managers.
 
-[[sid-65273923]]
+[[sid-68354974]]
 
 
 === Cache Mode FAQs
 
 
-*  <<sid-65273924>> 
+*  <<sid-68354975>> 
 
 
-*  <<sid-65273926>> 
+*  <<sid-68354977>> 
 
 
-*  <<sid-65273931>> 
+*  <<sid-68354982>> 
 
 
-*  <<sid-65273928>> 
+*  <<sid-68354979>> 
 
 
-*  <<sid-65273930>> 
+*  <<sid-68354981>> 
 
 
-*  <<sid-65273927>> 
+*  <<sid-68354978>> 
 
 
-*  <<sid-65273929>> 
+*  <<sid-68354980>> 
 
 
-*  <<sid-65273932>> 
+*  <<sid-68354983>> 
 
-[[sid-65273924]]
+[[sid-68354975]]
 
 
 ==== What is the difference between a replicated cache and a distributed cache?
 
  Distribution is a new cache mode in Infinispan, in addition to replication and invalidation.  In a replicated cache all nodes in a cluster hold all keys i.e. if a key exists on one nodes, it will also exist on _all_ other mpdes.  In a distributed cache, a number of copies are maintained to provide redundancy and fault tolerance, however this is typically far fewer than the number of nodes in the cluster. A distributed cache provides a far greater degree of scalability than a replicated cache.  
 
- A distributed cache is also able to transparently locate keys across a cluster, and provides an L1 cache for fast local read access of state that is stored remotely.  You can read more in <<sid-65274019_Clusteringmodes-DistributionMode,the reference guide>> . 
+ A distributed cache is also able to transparently locate keys across a cluster, and provides an L1 cache for fast local read access of state that is stored remotely.  You can read more in <<sid-68355074_Clusteringmodes-DistributionMode,the reference guide>> . 
 
-[[sid-65273926]]
+[[sid-68354977]]
 
 
 ==== Does DIST support both synchronous and asynchronous communications?
@@ -661,21 +691,21 @@ As far as possible, internal components are shared between Cache instances.  No
 
  Now unofficially, we will add a configuration option to allow you to set your cache mode to DIST _and_ use asynchronous communications, but this would be an additional configuration option (perhaps something like break_api_contracts ) so that users are aware of what they are getting into. 
 
-[[sid-65273931]]
+[[sid-68354982]]
 
 
 ==== I have caches configured with asynchronous replication or distribution, but these caches appear to be behaving synchronously (waiting for responses), what is going on?
 
  If you have state transfer configured and you have asynchronous mode configured, caches will behave in a synchronous way. This is done so that state transfer can work as expected, but the current solution expands the synchronous calls to cache operations as well, which results in this unexpected behaivour. A better solution that will resolve this confusion is already link:$$https://issues.jboss.org/browse/ISPN-835$$[in the making] (this issue also contains currently viable workarounds). 
 
-[[sid-65273928]]
+[[sid-68354979]]
 
 
 ==== I notice that when using DIST, the cache does a remote get before a write command. Why is this?
 
  Certain methods, such as Cache.put() , are supposed to return the previous value associated with the specified key according to the java.util.Map contract. If this is performed on an instance that does _not_ own the key in question and the key is not in L1 cache, the only way to reliably provide this return value is to do a remote GET before the put. This GET is _always_ sync (regardless of whether the cache is configured to be sync or async) since we need to wait for that return value. 
 
-[[sid-65273928_InoticethatwhenusingDIST%2Cthecachedoesaremotegetbeforeawritecommand.Whyisthis%3F-Isn%27tthatexpensive%3FHowcanIoptimizethisaway%3F]]
+[[sid-68354979_InoticethatwhenusingDIST%2Cthecachedoesaremotegetbeforeawritecommand.Whyisthis%3F-Isn%27tthatexpensive%3FHowcanIoptimizethisaway%3F]]
 
 
 ===== Isn't that expensive? How can I optimize this away?
@@ -684,21 +714,21 @@ As far as possible, internal components are shared between Cache instances.  No
 
  If you feel your code has no need for these return values, then this can be disabled completely (by specifying the &lt;unsafe unreliableReturnValues="true" /&gt; configuration element for a cache-wide setting or the Flag.SKIP_REMOTE_LOOKUP for a per-invocation setting). Note that while this will _not_ impair cache operations and accurate functioning of all public methods is still maintained. However, it _will_ break the java.util.Map interface contract by providing unreliable and inaccurate return values to certain methods, so you would need to be certain that your code does not use these return values for anything useful. 
 
-[[sid-65273930]]
+[[sid-68354981]]
 
 
 ==== I use a clustered cache. I want the guarantees of synchronous replication with the parallelism of asynchronous replication. What can I do?
 
  Infinispan offers a new async API to provide just this. These async methods return Future which can be queried, causing the thread to block till you get a confirmation that any network calls succeeded. You can link:$$http://infinispan.blogspot.com/2009/05/whats-so-cool-about-asynchronous-api.html$$[read more about it] . 
 
-[[sid-65273927]]
+[[sid-68354978]]
 
 
 ==== Is buddy replication supported?
 
  Buddy Replication is not available in Infinispan.  The new distributed cache mode solves the same problems in a far more elegant and scalable manner.  Read link:$$http://infinispan.blogspot.com/2009/08/distribution-instead-of-buddy.html$$[this blog article] for a more detailed discussion on the subject. 
 
-[[sid-65273929]]
+[[sid-68354980]]
 
 
 ==== What is the L1 cache?
@@ -707,7 +737,7 @@ An L1 cache (disabled by default) only exists if you set your cache mode to dist
 
  Also known as a _near cache_ in competing distributed cache products. 
 
-[[sid-65273932]]
+[[sid-68354983]]
 
 
 ==== What consistency guarantees do I have with different Asynchronous processing settings ?
@@ -739,40 +769,40 @@ Switching to asynchronous mode in each of these areas causes loss of some consis
 |===============
 
 
-[[sid-65273933]]
+[[sid-68354984]]
 
 
 === Listener FAQs
 
 
-*  <<sid-65273934>> 
+*  <<sid-68354985>> 
 
 
-*  <<sid-65273935>> 
+*  <<sid-68354986>> 
 
-[[sid-65273934]]
+[[sid-68354985]]
 
 
 ==== In a cache entry modified listener, can the modified value be retrieved via Cache.get() when isPre=false?
 
  No, it cannot. Use CacheEntryModifiedEvent.getValue() to retrieve the value of the entry that was modified. 
 
-[[sid-65273935]]
+[[sid-68354986]]
 
 
 ==== When annotating a method with CacheEntryCreated, how do I retrieve the value of the cache entry added?
 
- <<sid-65274031,Cache listeners>> can be defined to listen for cache entry created events by annotation methods with link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/notifications/cachelistener/annotation/CacheEntryCreated.html$$[@CacheEntryCreated] and having link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/notifications/cachelistener/event/CacheEntryCreatedEvent.html$$[CacheEntryCreatedEvent] as method parameter. link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/notifications/cachelistener/event/CacheEntryCreatedEvent.html$$[CacheEntryCreatedEvent] does not provide a method to retrieve the value that was created in the cache though. To retrieve this value, a method annotated with link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/notifications/cachelistener/annotation/CacheEntryModified.html$$[@CacheEntryModified] needs to be added because every time a cache entry is created, cache entry modified event is also fired. 
+ <<sid-68355087,Cache listeners>> can be defined to listen for cache entry created events by annotation methods with link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/notifications/cachelistener/annotation/CacheEntryCreated.html$$[@CacheEntryCreated] and having link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/notifications/cachelistener/event/CacheEntryCreatedEvent.html$$[CacheEntryCreatedEvent] as method parameter. link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/notifications/cachelistener/event/CacheEntryCreatedEvent.html$$[CacheEntryCreatedEvent] does not provide a method to retrieve the value that was created in the cache though. To retrieve this value, a method annotated with link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/notifications/cachelistener/annotation/CacheEntryModified.html$$[@CacheEntryModified] needs to be added because every time a cache entry is created, cache entry modified event is also fired. 
 
-[[sid-65273936]]
+[[sid-68354987]]
 
 
 === Cloud FAQs
 
 
-*  <<sid-65273937>> 
+*  <<sid-68354988>> 
 
-[[sid-65273937]]
+[[sid-68354988]]
 
 
 ==== How do you make Infinispan send replication traffic over a specific network when you don't know the IP address?
@@ -793,45 +823,45 @@ Some cloud providers charge you less for traffic over internal IP addresses comp
 
 *  NON_LOOPBACK : use the first address found on an interface (which is up), which is not a 127.x.x.x address 
 
-[[sid-65273938]]
+[[sid-68354989]]
 
 
 === Demo FAQs
 
-[[sid-65273939]]
+[[sid-68354990]]
 
 
 ==== When using the GUI Demo, I've just put an entry in the cache with lifespan of -1. Why do I see it as having a lifespan of 60,000?
 
  This is probably a L1 caching event.  When you put an entry in the cache, the entry is mapped to specific nodes in a cluster using a consistent hashing algorithm.  This means that key K could map on to caches A  and B  (or however many owners you have configured).  If you happen to have done the cache.put(K, V) on cache C , however, K  still maps to A  and B  (and will be added to caches A  and B  with their proper lifespans), but it will also be put in cache C's L1 cache. 
 
-[[sid-65273940]]
+[[sid-68354991]]
 
 
 === Query Module FAQs
 
 
-*  <<sid-65273941>> 
+*  <<sid-68354992>> 
 
-[[sid-65273941]]
+[[sid-68354992]]
 
 
 ==== When I run an application based on the Query module, I get a ClassNotFoundException for org.slf4j.impl.StaticLoggerBinder. How do I solve it?
 
  See the SLF4J section in link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737030$$[the reference guide] . 
 
-[[sid-65273942]]
+[[sid-68354993]]
 
 
 === JBoss Application Server Integration FAQs
 
 
-*  <<sid-65273944>> 
+*  <<sid-68354995>> 
 
 
-*  <<sid-65273943>> 
+*  <<sid-68354994>> 
 
-[[sid-65273944]]
+[[sid-68354995]]
 
 
 ==== Can I run my own Infinispan cache within JBoss Application Server 5 or 4?
@@ -873,22 +903,22 @@ Yes, you can, but since Infinispan uses different JGroups jar libraries to the o
 
 ----
 
-[[sid-65273943]]
+[[sid-68354994]]
 
 
 ==== Can I run my own Infinispan cache within JBoss Application Server 6?
 
  Yes you can, it's all explained in the link:$$http://community.jboss.org/docs/16180$$[Infinispan and AS6 integration wiki] . 
 
-[[sid-65273945]]
+[[sid-68354996]]
 
 
 === Logging FAQs
 
 
-*  <<sid-65273946>> 
+*  <<sid-68354997>> 
 
-[[sid-65273946]]
+[[sid-68354997]]
 
 
 ==== How can I enable logging?
@@ -912,25 +942,25 @@ By default Infinispan uses JBoss Logging 3.0 as logging framework. JBoss Logging
               link:$$file:/path/to/log4j.xml$$[]
              ). 
 
-[[sid-65273947]]
+[[sid-68354998]]
 
 
 === Third Party Container FAQs
 
 
-*  <<sid-65273948>> 
+*  <<sid-68354999>> 
 
 
-*  <<sid-65273949>> 
+*  <<sid-68355000>> 
 
-[[sid-65273948]]
+[[sid-68354999]]
 
 
 ==== Can I use Infinispan on Google App Engine for Java?
 
  Not at this moment.  Due to GAE/J restricting classes that can be loaded, and restrictions around use of threads, Infinispan will not work on GAE/J.  However, we do plan to fix this - if you wish to track the progress of Infinispan on GAE/J, have a look at link:$$https://jira.jboss.org/jira/browse/ISPN-57$$[ISPN-57] . 
 
-[[sid-65273949]]
+[[sid-68355000]]
 
 
 ==== When running on Glassfish or Apache, creating a cache throws an exception saying "Unable to construct a GlobalComponentRegistry", what is it wrong?
@@ -944,62 +974,62 @@ Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());
 
 ----
 
-[[sid-65273950]]
+[[sid-68355001]]
 
 
 === Language FAQs
 
 
-*  <<sid-65273951>> 
+*  <<sid-68355002>> 
 
-[[sid-65273951]]
+[[sid-68355002]]
 
 
 ==== Can I use Infinispan with Groovy? What about Jython, Clojure, JRuby or Scala etc.?
 
 While we haven't extensively tested Infinispan on anything other than Java, there is no reason why it cannot be used in any other environment that sits atop a JVM. We encourage you to try, and we'd love to hear your experiences on using Infinispan from other JVM languages.
 
-[[sid-65273952]]
+[[sid-68355003]]
 
 
 === Marshalling &amp; Unmarshalling
 
 
-*  <<sid-65273958>> 
+*  <<sid-68355009>> 
 
 
-*  <<sid-65273954>> 
+*  <<sid-68355005>> 
 
 
-*  <<sid-65273959>> 
+*  <<sid-68355010>> 
 
 
-*  <<sid-65273955>> 
+*  <<sid-68355006>> 
 
 
-*  <<sid-65273956>> 
+*  <<sid-68355007>> 
 
 
-*  <<sid-65273953>> 
+*  <<sid-68355004>> 
 
 
-*  <<sid-65273957>> 
+*  <<sid-68355008>> 
 
-[[sid-65273958]]
+[[sid-68355009]]
 
 
 ==== Best practices implementing java.io.Externalizable
 
  If you decide to implement link:$$http://download.oracle.com/javase/6/docs/api/java/io/Externalizable.html$$[Externalizable] interface, please make sure that the link:$$http://download.oracle.com/javase/6/docs/api/java/io/Externalizable.html#readExternal(java.io.ObjectInput)$$[readExternal()] method is thread safe, otherwise you run the risk of potential getting corrupted data and link:$$http://download.oracle.com/javase/6/docs/api/java/lang/OutOfMemoryError.html$$[OutOfMemoryException] , as seen in link:$$http://community.jboss.org/message/609296#609296$$[this forum post] . 
 
-[[sid-65273954]]
+[[sid-68355005]]
 
 
 ==== Does Infinispan support storing Non-Serializable objects?
 
- See <<sid-65274050_Marshalling-SupportForNonSerializableObjects,the reference guide>> . 
+ See <<sid-68355106_Marshalling-SupportForNonSerializableObjects,the reference guide>> . 
 
-[[sid-65273959]]
+[[sid-68355010]]
 
 
 ==== Do Externalizer implementations need to access internal Externalizer implementations?
@@ -1048,14 +1078,14 @@ public static class ABCMarshallingExternalizer implements AdvancedExternalizer<A
 }
 ----
 
-[[sid-65273955]]
+[[sid-68355006]]
 
 
 ==== Do I need to register an application cacheloader when using an isolated deployment?
 
  In JBossCache when dealing with isolated deployments, registering application cacheloader with cache was needed for replication to work. With Infinispan, there's no such need, link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737168_Marshalling-LazyDeserialization%2528storeAsBinary%2529$$[lazy deserialization] is used to get around the issue. 
 
-[[sid-65273956]]
+[[sid-68355007]]
 
 
 ==== During state transfer, the state receiver logs an EOFException when applying state saying "Read past end of file". Should I worry about this?
@@ -1113,14 +1143,14 @@ java.io.EOFException: Read past end of file
 
 The current logic is for the state receiver to back off in these scenarios and retry after a few seconds. Quite often, after the retry the state generator might have already finished dealing with the other node and hence the state receiver will be able to fully receive the state.
 
-[[sid-65273953]]
+[[sid-68355004]]
 
 
 ==== How do I get more information on marshalling &amp; unmarshalling exceptions?
 
- See <<sid-65274050,the reference guide>> . 
+ See <<sid-68355106_Marshalling-Troubleshooting,the reference guide>> . 
 
-[[sid-65273957]]
+[[sid-68355008]]
 
 
 ==== Why am I getting invalid data passed to readExternal?
@@ -1137,15 +1167,15 @@ The current logic is for the state receiver to back off in these scenarios and r
 ==== 
 
 
-[[sid-65273960]]
+[[sid-68355011]]
 
 
 === Tuning FAQs
 
 
-*  <<sid-65273961>> 
+*  <<sid-68355012>> 
 
-[[sid-65273961]]
+[[sid-68355012]]
 
 
 ==== When running Infinispan under load, I see RejectedExecutionException, how can I fix it?
@@ -1176,15 +1206,15 @@ To solve this issue, you should try any of these options:
 
 *  Disable async marshalling (see the link:$$http://docs.jboss.org/infinispan/5.1/configdocs/urn_infinispan_config_5.1/complexType/configuration.clustering.async.html$$[&lt;async ... &gt;] element for details). This would mean that an executor is _not_ used when replicating, so you will never have a RejectedExecutionException . However this means each put() will take a little longer since marshalling will now happen on the critical path. The RPC is still async though as the thread won't wait for a response from the recipient (fire-and-forget). 
 
-[[sid-65273962]]
+[[sid-68355013]]
 
 
 === JNDI FAQs
 
 
-*  <<sid-65273963>> 
+*  <<sid-68355014>> 
 
-[[sid-65273963]]
+[[sid-68355014]]
 
 
 ==== Can I bind Cache or CacheManager to JNDI?
@@ -1193,45 +1223,45 @@ To solve this issue, you should try any of these options:
 
  To find an example on how to bind Cache or CacheManager to the java: namespace, simply check link:$$https://github.com/infinispan/infinispan/blob/master/core/src/test/java/org/infinispan/jndi/BindingTest.java$$[this unit test case] . 
 
-[[sid-65273964]]
+[[sid-68355015]]
 
 
 === Hibernate 2nd Level Cache FAQs
 
 
-*  <<sid-65273968>> 
+*  <<sid-68355019>> 
 
 
-*  <<sid-65273967>> 
+*  <<sid-68355018>> 
 
 
-*  <<sid-65273965>> 
+*  <<sid-68355016>> 
 
 
-*  <<sid-65273966>> 
+*  <<sid-68355017>> 
 
-[[sid-65273968]]
+[[sid-68355019]]
 
 
 ==== Can I use Infinispan as a remote JPA or Hibernate second level cache?
 
  See link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737110$$[the reference guide] . 
 
-[[sid-65273967]]
+[[sid-68355018]]
 
 
 ==== I'm adding the Infinispan 2nd level cache provider to existing servers that already use JGroups. Should I set Infinispan to use the same JGroups cluster, or should I use two separate cluster names?
 
 TODO
 
-[[sid-65273965]]
+[[sid-68355016]]
 
 
 ==== Is it possible to use the Infinispan 2nd level cache outside of a J2EE server, and if so how do I set up the transaction manager lookup?
 
  link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737110$$[The reference guide] provides details on configuring a transaction manager outside of Java EE. link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737126$$[The reference guide] also provides details on how to use Atomikos, JTOM and Bitronix. 
 
-[[sid-65273966]]
+[[sid-68355017]]
 
 
 ==== What are the pitfalls of not using a non-JTA transaction factory such as JDBCTransactionFactory with Hibernate when Infinispan is used as 2nd level cache provider?
@@ -1240,21 +1270,21 @@ TODO
 
 So, any work on the 2nd level cache will be done under a different transaction to the one used to commit the stuff to the database via Hibernate. In other words, your operations on the database and the 2LC are not treated as a single unit. Risks here include failures to update the 2LC leaving it with stale data while the database committed data correctly.
 
-[[sid-65273969]]
+[[sid-68355020]]
 
 
 === Cache Server FAQs
 
 
-*  <<sid-65273970>> 
+*  <<sid-68355021>> 
 
 
-*  <<sid-65273972>> 
+*  <<sid-68355023>> 
 
 
-*  <<sid-65273971>> 
+*  <<sid-68355022>> 
 
-[[sid-65273970]]
+[[sid-68355021]]
 
 
 ==== After running a Hot Rod server for a while, I get a NullPointerException in HotRodEncoder.getTopologyResponse(), how can I get around it?
@@ -1267,26 +1297,26 @@ So, any work on the 2nd level cache will be done under a different transaction t
 
 *  Or, make sure you create a namedCache for ___hotRodTopologyCache with sync replication, state transfer, no expiration and no eviction. 
 
-[[sid-65273972]]
+[[sid-68355023]]
 
 
 ==== Is there a way to do a Bulk Get on a remote cache?
 
  There's no bulk get operation in Hot Rod, but the Java Hot Rod client has implemented via link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/client/hotrod/RemoteCache.html$$[RemoteCache] the getAsync() operation, which returns a link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/util/concurrent/NotifyingFuture.html$$[org.infinispan.util.concurrent.NotifyingFuture] (extends java.util.concurrent.Future). So, if you want to retrieve multiple keys in parallel, just call multiple times _getAsync()_ and when you need the values, just call _Future.get()_ , or attach a link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/util/concurrent/FutureListener.html$$[ _FutureListener_ ] to the _NotifyingFuture_ to get notified when the value is ready. 
 
-[[sid-65273971]]
+[[sid-68355022]]
 
 
 ==== What is the startServer.sh script used for? What is the startServer.bat script used for?
 
  These scripts are used for starting Infinispan server instances that can be talked to remotely using either our own link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=9470083$$[Hot Rod protocol] or the link:$$http://github.com/trondn/memcached/blob/master/doc/protocol.txt$$[Memcached text protocol] . See link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737146$$[Using Hot Rod Server and Client] and link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737037$$[Using Infinispan Memcached server] wikis for more information on the usage of these scripts. 
 
-[[sid-65273973]]
+[[sid-68355024]]
 
 
 === Debugging FAQs
 
-[[sid-65273974]]
+[[sid-68355025]]
 
 
 ==== How can I get Infinispan to show the full byte array? The log only shows partial contents of byte arrays...
@@ -1319,12 +1349,12 @@ version=281483566645249}]
 
 ----
 
-[[sid-65273975]]
+[[sid-68355026]]
 
 
 === Clustering Transport FAQs
 
-[[sid-65273976]]
+[[sid-68355027]]
 
 
 ==== How do I retrieve the clustering physical address?
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-1-Introduction.adoc b/documentation/src/main/asciidoc/getting_started/chapter-1-Introduction.adoc
index f71c1aa..ef25e63 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-1-Introduction.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-1-Introduction.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-Introduction]]
+[[sid-68355130_GettingStartedGuide-Introduction]]
 
 ==  Introduction
 
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-10-Using_Infinispan_in_servlet_containers_such_as_Tomcat_or_Jetty_and_other_application_servers_such_as_GlassFish_.adoc b/documentation/src/main/asciidoc/getting_started/chapter-10-Using_Infinispan_in_servlet_containers_such_as_Tomcat_or_Jetty_and_other_application_servers_such_as_GlassFish_.adoc
index 50272ca..a2a281e 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-10-Using_Infinispan_in_servlet_containers_such_as_Tomcat_or_Jetty_and_other_application_servers_such_as_GlassFish_.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-10-Using_Infinispan_in_servlet_containers_such_as_Tomcat_or_Jetty_and_other_application_servers_such_as_GlassFish_.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-UsingInfinispaninservletcontainers%28suchasTomcatorJetty%29andotherapplicationservers%28suchasGlassFish%29]]
+[[sid-68355130_GettingStartedGuide-UsingInfinispaninservletcontainers%28suchasTomcatorJetty%29andotherapplicationservers%28suchasGlassFish%29]]
 
 ==  Using Infinispan in servlet containers (such as Tomcat or Jetty) and other application servers (such as GlassFish)
 
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-11-Monitoring_Infinispan.adoc b/documentation/src/main/asciidoc/getting_started/chapter-11-Monitoring_Infinispan.adoc
index f1bff1b..fc2c3d6 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-11-Monitoring_Infinispan.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-11-Monitoring_Infinispan.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-MonitoringInfinispan]]
+[[sid-68355130_GettingStartedGuide-MonitoringInfinispan]]
 
 ==  Monitoring Infinispan
 
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-16-Infinispan_GUI_demo.adoc b/documentation/src/main/asciidoc/getting_started/chapter-16-Infinispan_GUI_demo.adoc
index 407e530..3558c46 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-16-Infinispan_GUI_demo.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-16-Infinispan_GUI_demo.adoc
@@ -1,4 +1,4 @@
-[[sid-65274068]]
+[[sid-68355134]]
 
 ==  Infinispan GUI demo
 
@@ -9,7 +9,7 @@
 NOTE: You will need either the -bin.zip or -all.zip version for this demo.
 ----
 
-[[sid-65274068_InfinispanGUIdemo-Step1%3AStartthedemoGUI]]
+[[sid-68355134_InfinispanGUIdemo-Step1%3AStartthedemoGUI]]
 
 
 === Step 1: Start the demo GUI
@@ -39,7 +39,7 @@ image::[]
 
  
 
-[[sid-65274068_InfinispanGUIdemo-Step3%3AManipulatedata]]
+[[sid-68355134_InfinispanGUIdemo-Step3%3AManipulatedata]]
 
 
 === Step 3: Manipulate data
@@ -52,7 +52,7 @@ image::[]
 
  
 
-[[sid-65274068_InfinispanGUIdemo-Step4%3AStartmorecacheinstances]]
+[[sid-68355134_InfinispanGUIdemo-Step4%3AStartmorecacheinstances]]
 
 
 === Step 4: Start more cache instances
@@ -65,7 +65,7 @@ image::[]
 
  
 
-[[sid-65274068_InfinispanGUIdemo-Step5%3AManipulatemoredata]]
+[[sid-68355134_InfinispanGUIdemo-Step5%3AManipulatemoredata]]
 
 
 === Step 5: Manipulate more data
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-18-Labs.adoc b/documentation/src/main/asciidoc/getting_started/chapter-18-Labs.adoc
index 5f67b30..d8f913c 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-18-Labs.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-18-Labs.adoc
@@ -1,13 +1,13 @@
-[[sid-65274088]]
+[[sid-68355154]]
 
 ==  Labs
 
-[[sid-65274089]]
+[[sid-68355155]]
 
 
 === Lab - Getting Started with Infinispan
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Introduction]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Introduction]]
 
 
 ==== Introduction
@@ -16,12 +16,12 @@
 
 The lab has been updated by Galder Zamarreño for Infinispan 5.1 and has been featured in the Neuchatel JBUG and JUDCon India 2012
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Setup]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Setup]]
 
 
 ==== Setup
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Gettingsetuptorunthelab]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Gettingsetuptorunthelab]]
 
 
 ===== Getting setup to run the lab
@@ -63,24 +63,24 @@ git checkout -b checkpointX checkpointX
 
 * Unzip JBoss AS to your disk to a location of your choice
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Introductionx]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Introductionx]]
 
 
 ==== Introduction
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Usecases%2CkeyfeaturesandbenefitsofInfinispan]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Usecases%2CkeyfeaturesandbenefitsofInfinispan]]
 
 
 ===== Use cases, key features and benefits of Infinispan
 
  _slides, presented by Pete_ _20 minutes_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Sampleproject]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Sampleproject]]
 
 
 ==== Sample project
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Explanationofsampleprojectarchitecture]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Explanationofsampleprojectarchitecture]]
 
 
 ===== Explanation of sample project architecture
@@ -116,12 +116,12 @@ git checkout -b checkpointX checkpointX
 
  _Checkpoint 1_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-InterludeCachinginJavaEE]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-InterludeCachinginJavaEE]]
 
 
 ==== Interlude - Caching in Java EE
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-JSR107%28JCACHE%29andJSR347%28DatagridsforJava%29]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-JSR107%28JCACHE%29andJSR347%28DatagridsforJava%29]]
 
 
 ===== 107 (JCACHE) and JSR-347 (Datagrids for Java)
@@ -133,14 +133,14 @@ Topics covered include:
 
 * TODO
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-JGroups%26Networks]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-JGroups%26Networks]]
 
 
 ==== JGroups &amp; Networks
 
  _presented by Sanne_ _10 minutes_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Makesureyournodescanseeeachother]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Makesureyournodescanseeeachother]]
 
 
 ===== Make sure your nodes can see each other
@@ -151,7 +151,7 @@ Topics covered include:
 
 * If all goes well, you'll get two windows in which you can draw up on your screen. Draw on one, see it in both.
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-HowdoesJGroupswork%3FWhydoyouneedit%3F]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-HowdoesJGroupswork%3FWhydoyouneedit%3F]]
 
 
 ===== How does JGroups work? Why do you need it?
@@ -167,14 +167,14 @@ Topics covered include:
 
 * LAN/WAN based: multicast or TCP for transport
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-InfinispanasalocalcacheandJMX]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-InfinispanasalocalcacheandJMX]]
 
 
 ==== Infinispan as a local cache and JMX
 
  _presented by Sanne_ _10 minutes_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-AddingInfinispantothedemo]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-AddingInfinispantothedemo]]
 
 
 ===== Adding Infinispan to the demo
@@ -265,7 +265,7 @@ if (tickets.getConfiguration().getCacheMode() != CacheMode.LOCAL) {
 
 ----
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-ShowInfinispaninusewithbasicmonitoring]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-ShowInfinispaninusewithbasicmonitoring]]
 
 
 ===== Show Infinispan in use with basic monitoring
@@ -292,14 +292,14 @@ if (tickets.getConfiguration().getCacheMode() != CacheMode.LOCAL) {
 
  _Checkpoint 2_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Expiration%26Eviction]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Expiration%26Eviction]]
 
 
 ==== Expiration &amp; Eviction
 
  _presented by Mircea_ _10 minutes_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-InterludeWhatisexpiration%3FWhatiseviction%3F]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-InterludeWhatisexpiration%3FWhatiseviction%3F]]
 
 
 ===== Interlude - What is expiration? What is eviction?
@@ -318,7 +318,7 @@ Topics covered include:
 
 * Available eviction mechanisms
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Demo]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Demo]]
 
 
 ===== Demo
@@ -341,7 +341,7 @@ tickets.put(allocation.getId(), allocation, 10, TimeUnit.SECONDS);
 
  _Checkpoint 3_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-6.Listeners]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-6.Listeners]]
 
 
 ==== 6. Listeners
@@ -377,19 +377,19 @@ public void registerAbuseListener(@New AbuseListener abuseListener) {
 
  _Checkpoint 4_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Interlude.WhatcanyoulistentoinInfinispan%3F]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Interlude.WhatcanyoulistentoinInfinispan%3F]]
 
 
 ===== Interlude. What can you listen to in Infinispan?
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-TransactionswithInfinispan]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-TransactionswithInfinispan]]
 
 
 ==== Transactions with Infinispan
 
  _presented by Mircea_ _15 minutes_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Transactionsinaction]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Transactionsinaction]]
 
 
 ===== Transactions in action
@@ -528,14 +528,14 @@ Topics discussed include
 
 * Deadlock detection
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Break]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Break]]
 
 
 ==== Break
 
  _15 minutes_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Distribution]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Distribution]]
 
 
 ==== Distribution
@@ -582,7 +582,7 @@ public EmbeddedCacheManager configureCacheManager() {
 
 *  Explain that this JGroups file is exactly as normal for UDP, except that the jgroups.bind_addr is set to the loopback interface 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-InterludeJBossAS7]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-InterludeJBossAS7]]
 
 
 ==== Interlude - JBoss AS 7
@@ -676,7 +676,7 @@ Topics discussed include:
 
 * Note that nodes don't get much memory by default, we need to increase it
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Showthecacherunningindistributedmode]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Showthecacherunningindistributedmode]]
 
 
 ===== Show the cache running in distributed mode
@@ -711,7 +711,7 @@ Topics discussed include:
 
 * show that we can put an entry, and then find it in one of the caches in Infinispan (10 mins)
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-InterludeWhatmodescanInfinispanrunin%3FWhenwouldyouwanttousethem%3F]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-InterludeWhatmodescanInfinispanrunin%3FWhenwouldyouwanttousethem%3F]]
 
 
 ===== Interlude - What modes can Infinispan run in? When would you want to use them?
@@ -733,7 +733,7 @@ Topics discussed include:
 
 * Talk about vnodes to even distribution
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-L1cache]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-L1cache]]
 
 
 ==== L1 cache
@@ -769,7 +769,7 @@ Topics discussed include:
 
  _Checkpoint 6_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-ClientServerModes]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-ClientServerModes]]
 
 
 ==== Client Server Modes
@@ -794,7 +794,7 @@ Topics discussed include:
 
 *  Use a rest client to GET link:$$http://localhost:9080/infinispan-server-rest/rest/ticketAllocationCache/manik-Best%20of%20Abba$$[] 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-InterludewhatclientservermodesdoesInfinispanoffer%3F]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-InterludewhatclientservermodesdoesInfinispanoffer%3F]]
 
 
 ===== Interlude - what client-server modes does Infinispan offer?
@@ -807,7 +807,7 @@ Topics discussed include:
 
 * benefits of Hot Rod
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-CacheStores]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-CacheStores]]
 
 
 ==== CacheStores
@@ -880,7 +880,7 @@ image::[]
 
  _Checkpoint 7_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-InterludeWhatCacheStoresareavailable%3FInwhatscenarioscantheybeused%3F]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-InterludeWhatCacheStoresareavailable%3FInwhatscenarioscantheybeused%3F]]
 
 
 ===== Interlude - What Cache Stores are available? In what scenarios can they be used?
@@ -893,12 +893,12 @@ Topics discussed include:
 
 * CacheStores available as built in
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Bonustopics]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Bonustopics]]
 
 
 ==== Bonus topics
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-QueryingInfinispan]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-QueryingInfinispan]]
 
 
 ===== Querying Infinispan
@@ -910,7 +910,7 @@ Topics discussed include:
 
 * TODO
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-HibernateOGM]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-HibernateOGM]]
 
 
 ===== Hibernate OGM
@@ -922,7 +922,7 @@ Topics discussed include:
 
 * TODO
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-MapReduce]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-MapReduce]]
 
 
 ===== Reduce
@@ -934,7 +934,7 @@ Topics discussed include:
 
 * TODO
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Benchmarkingdatagirds%5CRadargun]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Benchmarkingdatagirds%5CRadargun]]
 
 
 ===== Benchmarking data girds - Radargun
@@ -943,7 +943,7 @@ Introducing project Radargun
 
  _presented by Mircea_ _5 minutes_ 
 
-[[sid-65274089_Lab-GettingStartedwithInfinispan-Conclusion]]
+[[sid-68355155_Lab-GettingStartedwithInfinispan-Conclusion]]
 
 
 ==== Conclusion
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-2-Downloading_and_installing_Infinispan.adoc b/documentation/src/main/asciidoc/getting_started/chapter-2-Downloading_and_installing_Infinispan.adoc
index 0a5c3fd..0d7c912 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-2-Downloading_and_installing_Infinispan.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-2-Downloading_and_installing_Infinispan.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-DownloadingandinstallingInfinispan]]
+[[sid-68355130_GettingStartedGuide-DownloadingandinstallingInfinispan]]
 
 ==  Downloading and installing Infinispan
 
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-3-Infinispan_in_action_GUIDemo.adoc b/documentation/src/main/asciidoc/getting_started/chapter-3-Infinispan_in_action_GUIDemo.adoc
index 2ad41ba..2901a17 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-3-Infinispan_in_action_GUIDemo.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-3-Infinispan_in_action_GUIDemo.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-InfinispaninactionGUIDemo]]
+[[sid-68355130_GettingStartedGuide-InfinispaninactionGUIDemo]]
 
 ==  Infinispan in action - GUIDemo
 
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-4-Using_Infinispan_as_an_embedded_cache_in_Java_SE.adoc b/documentation/src/main/asciidoc/getting_started/chapter-4-Using_Infinispan_as_an_embedded_cache_in_Java_SE.adoc
index 01a71a9..64ad464 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-4-Using_Infinispan_as_an_embedded_cache_in_Java_SE.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-4-Using_Infinispan_as_an_embedded_cache_in_Java_SE.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-UsingInfinispanasanembeddedcacheinJavaSE]]
+[[sid-68355130_GettingStartedGuide-UsingInfinispanasanembeddedcacheinJavaSE]]
 
 ==  Using Infinispan as an embedded cache in Java SE
 
@@ -14,7 +14,7 @@ Running Infinispan in embedded mode is very easy. First, we'll set up a project,
 ==== 
 
 
-[[sid-65274066_GettingStartedGuide-CreatinganewInfinispanproject]]
+[[sid-68355130_GettingStartedGuide-CreatinganewInfinispanproject]]
 
 
 === Creating a new Infinispan project
@@ -101,7 +101,7 @@ You'll also need to enable the JBoss Maven repository. We recommend adding a pro
 
  If you are using Ant, or another build system which doesn't provide declarative dependency management, then the Infinispan distribution zip contains a lib/ directory. Add the contents of this to the build classpath. 
 
-[[sid-65274066_GettingStartedGuide-RunningInfinispanonasinglenode]]
+[[sid-68355130_GettingStartedGuide-RunningInfinispanonasinglenode]]
 
 
 === Running Infinispan on a single node
@@ -144,7 +144,7 @@ You should see Infinispan start up, and the version in use logged to the console
 
 Congratulations, you now have Infinispan running as a local cache!
 
-[[sid-65274066_GettingStartedGuide-Usethedefaultcache]]
+[[sid-68355130_GettingStartedGuide-Usethedefaultcache]]
 
 
 === Use the default cache
@@ -203,7 +203,7 @@ By default entries are immortal but you can override this on a per-key basis and
 ----
 
 ==== 
-[[sid-65274066_GettingStartedGuide-Useacustomcache]]
+[[sid-68355130_GettingStartedGuide-Useacustomcache]]
 
 
 === Use a custom cache
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-5-Using_Infinispan_as_an_embedded_data_grid_in_Java_SE.adoc b/documentation/src/main/asciidoc/getting_started/chapter-5-Using_Infinispan_as_an_embedded_data_grid_in_Java_SE.adoc
index 88134ab..9479ed2 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-5-Using_Infinispan_as_an_embedded_data_grid_in_Java_SE.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-5-Using_Infinispan_as_an_embedded_data_grid_in_Java_SE.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-UsingInfinispanasanembeddeddatagridinJavaSE]]
+[[sid-68355130_GettingStartedGuide-UsingInfinispanasanembeddeddatagridinJavaSE]]
 
 ==  Using Infinispan as an embedded data grid in Java SE
 
@@ -34,7 +34,7 @@ Cache<Object, Object> cache3 = cm.getCache("invalidationSyncCache");
 ==== 
 
 
-[[sid-65274066_GettingStartedGuide-RunningInfinispaninacluster]]
+[[sid-68355130_GettingStartedGuide-RunningInfinispaninacluster]]
 
 
 === Running Infinispan in a cluster
@@ -99,7 +99,7 @@ $> java -cp target/classes/:target/dependency/* org.infinispan.quickstart.cluste
 
 You should see JGroups and Infinispan start up on both consoles, and after about 15s see the 10 entries added by third node distributed to the first and second nodes.
 
-[[sid-65274066_GettingStartedGuide-clusteredcachequickstartarchitecture]]
+[[sid-68355130_GettingStartedGuide-clusteredcachequickstartarchitecture]]
 
 
 ==== clustered-cache quickstart architecture
@@ -153,7 +153,7 @@ Listeners methods are declared using annotations, and receive a payload which co
 ==== 
 
 
- The replication mode example contains two nodes, each of which are started in a separate process. The nodes are very simple, Node0 starts up, registers a listener that logs any changes, and waits for the cluster to form. Node1 starts up, waits for the cluster to form, and then adds an entry. The interesting work happens in the common super class, examined in <<sid-65274066_GettingStartedGuide-Configuringareplicateddatagrid,Configuring a replicated data-grid>> . 
+ The replication mode example contains two nodes, each of which are started in a separate process. The nodes are very simple, Node0 starts up, registers a listener that logs any changes, and waits for the cluster to form. Node1 starts up, waits for the cluster to form, and then adds an entry. The interesting work happens in the common super class, examined in <<sid-68355130_GettingStartedGuide-Configuringareplicateddatagrid,Configuring a replicated data-grid>> . 
 
 
 [IMPORTANT]
@@ -165,9 +165,9 @@ Listeners methods are declared using annotations, and receive a payload which co
 ==== 
 
 
- The distribution mode example contains three nodes, each of which are started in a separate process. The nodes are very simple, Node0 and Node1 start up, register listeners that logs any changes, and wait for the cluster to form. Node2 starts up, waits for the cluster to form, and then adds 20 entries. Each entry get's distributed to it's owners, and you will see some entries add on Node0 and some on Node1 .  You'll notice that Node2 gets _notified_ of all adds - this is just because it is the node which adds the entry, it doesn't reflect that the fact that all these entries are stored there! The interesting work happens in the common super class, examined in <<sid-65274066_GettingStartedGuide-Configuringadistributeddatagrid,Configuring a distributed data-grid>> . 
+ The distribution mode example contains three nodes, each of which are started in a separate process. The nodes are very simple, Node0 and Node1 start up, register listeners that logs any changes, and wait for the cluster to form. Node2 starts up, waits for the cluster to form, and then adds 20 entries. Each entry get's distributed to it's owners, and you will see some entries add on Node0 and some on Node1 .  You'll notice that Node2 gets _notified_ of all adds - this is just because it is the node which adds the entry, it doesn't reflect that the fact that all these entries are stored there! The interesting work happens in the common super class, examined in <<sid-68355130_GettingStartedGuide-Configuringadistributeddatagrid,Configuring a distributed data-grid>> . 
 
-[[sid-65274066_GettingStartedGuide-Configuringthecluster]]
+[[sid-68355130_GettingStartedGuide-Configuringthecluster]]
 
 
 === Configuring the cluster
@@ -192,7 +192,7 @@ new ConfigurationBuilder()
 ==== 
 
 
-[[sid-65274066_GettingStartedGuide-Tweakingtheclusterconfigurationforyournetwork]]
+[[sid-68355130_GettingStartedGuide-Tweakingtheclusterconfigurationforyournetwork]]
 
 
 ==== Tweaking the cluster configuration for your network
@@ -237,7 +237,7 @@ You can also configure the JGroups properties to use in Infinispan's XML configu
 
 ----
 
-[[sid-65274066_GettingStartedGuide-Configuringareplicateddatagrid]]
+[[sid-68355130_GettingStartedGuide-Configuringareplicateddatagrid]]
 
 
 === Configuring a replicated data-grid
@@ -303,7 +303,7 @@ private static EmbeddedCacheManager createCacheManagerFromXml() throws IOExcepti
 ==== 
 
 
-[[sid-65274066_GettingStartedGuide-Configuringadistributeddatagrid]]
+[[sid-68355130_GettingStartedGuide-Configuringadistributeddatagrid]]
 
 
 === Configuring a distributed data-grid
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-6-Creating_your_own_Infinispan_project.adoc b/documentation/src/main/asciidoc/getting_started/chapter-6-Creating_your_own_Infinispan_project.adoc
index fcf6014..cb74582 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-6-Creating_your_own_Infinispan_project.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-6-Creating_your_own_Infinispan_project.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-CreatingyourownInfinispanproject]]
+[[sid-68355130_GettingStartedGuide-CreatingyourownInfinispanproject]]
 
 ==  Creating your own Infinispan project
 
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-7-Using_Infinispan_as_a_second_level_cache_for_Hibernate.adoc b/documentation/src/main/asciidoc/getting_started/chapter-7-Using_Infinispan_as_a_second_level_cache_for_Hibernate.adoc
index 8031b66..06c35cc 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-7-Using_Infinispan_as_a_second_level_cache_for_Hibernate.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-7-Using_Infinispan_as_a_second_level_cache_for_Hibernate.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-UsingInfinispanasasecondlevelcacheforHibernate]]
+[[sid-68355130_GettingStartedGuide-UsingInfinispanasasecondlevelcacheforHibernate]]
 
 ==  Using Infinispan as a second level cache for Hibernate
 
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-8-Accessing_an_Infinispan_data_grid_remotely.adoc b/documentation/src/main/asciidoc/getting_started/chapter-8-Accessing_an_Infinispan_data_grid_remotely.adoc
index cc484e6..7d929f2 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-8-Accessing_an_Infinispan_data_grid_remotely.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-8-Accessing_an_Infinispan_data_grid_remotely.adoc
@@ -1,22 +1,22 @@
-[[sid-65274066_GettingStartedGuide-AccessinganInfinispandatagridremotely]]
+[[sid-68355130_GettingStartedGuide-AccessinganInfinispandatagridremotely]]
 
 ==  Accessing an Infinispan data grid remotely
 
-[[sid-65274066_GettingStartedGuide-UsingHotRodtoaccessanInfinispandatagrid]]
+[[sid-68355130_GettingStartedGuide-UsingHotRodtoaccessanInfinispandatagrid]]
 
 
 === Using Hot Rod to access an Infinispan data-grid
 
 TODO
 
-[[sid-65274066_GettingStartedGuide-UsingRESTtoaccessanInfinipsandatagrid]]
+[[sid-68355130_GettingStartedGuide-UsingRESTtoaccessanInfinipsandatagrid]]
 
 
 === Using REST to access an Infinipsan data-grid
 
 TODO
 
-[[sid-65274066_GettingStartedGuide-UsingmemcachedtoaccessanInfinispandatagrid]]
+[[sid-68355130_GettingStartedGuide-UsingmemcachedtoaccessanInfinispandatagrid]]
 
 
 === Using memcached to access an Infinispan data-grid
diff --git a/documentation/src/main/asciidoc/getting_started/chapter-9-Using_Infinispan_in_JBoss_AS_7.adoc b/documentation/src/main/asciidoc/getting_started/chapter-9-Using_Infinispan_in_JBoss_AS_7.adoc
index ac88c6b..8741e83 100644
--- a/documentation/src/main/asciidoc/getting_started/chapter-9-Using_Infinispan_in_JBoss_AS_7.adoc
+++ b/documentation/src/main/asciidoc/getting_started/chapter-9-Using_Infinispan_in_JBoss_AS_7.adoc
@@ -1,4 +1,4 @@
-[[sid-65274066_GettingStartedGuide-UsingInfinispaninJBossAS7]]
+[[sid-68355130_GettingStartedGuide-UsingInfinispaninJBossAS7]]
 
 ==  Using Infinispan in JBoss AS 7
 
diff --git a/documentation/src/main/asciidoc/upgrading/chapter-1-Upgrading_from_5_0_to_5_1.adoc b/documentation/src/main/asciidoc/upgrading/chapter-1-Upgrading_from_5_0_to_5_1.adoc
index 0720ae3..525cb6a 100644
--- a/documentation/src/main/asciidoc/upgrading/chapter-1-Upgrading_from_5_0_to_5_1.adoc
+++ b/documentation/src/main/asciidoc/upgrading/chapter-1-Upgrading_from_5_0_to_5_1.adoc
@@ -1,10 +1,10 @@
-[[sid-65274140]]
+[[sid-68355206]]
 
 ==  Upgrading from 5.0 to 5.1
 
 Please find below tips and recommendations when upgrading from Infinispan 5.0 to 5.1:
 
-[[sid-65274140_Upgradingfrom5.0to5.1-API]]
+[[sid-68355206_Upgradingfrom5.0to5.1-API]]
 
 
 === API
@@ -61,7 +61,7 @@ RemoteCacheManager cacheContainer = new RemoteCacheManager();
 RemoteCache cache = cacheContainer.getCache();
 ----
 
-[[sid-65274140_Upgradingfrom5.0to5.1-EvictionandExpiration]]
+[[sid-68355206_Upgradingfrom5.0to5.1-EvictionandExpiration]]
 
 
 === Eviction and Expiration
@@ -77,7 +77,7 @@ RemoteCache cache = cacheContainer.getCache();
 
 .  Eviction's maxEntries is used as guide for the entire cache, but eviction happens on a per cache segment, so when the segment is full, the segment is evicted. That's why maxEntries is a theoretical limit but in practical terms, it'll be a bit less than that. This is done for performance reasons. 
 
-[[sid-65274140_Upgradingfrom5.0to5.1-Transactions]]
+[[sid-68355206_Upgradingfrom5.0to5.1-Transactions]]
 
 
 === Transactions
@@ -88,7 +88,7 @@ RemoteCache cache = cacheContainer.getCache();
 
 . In 5.0, commit and rollback phases were asynchronous by default. Starting with 5.1, these are now synchronous by default, to provide the guarantees required by a single lock-owner model.
 
-[[sid-65274140_Upgradingfrom5.0to5.1-Statetransfer]]
+[[sid-68355206_Upgradingfrom5.0to5.1-Statetransfer]]
 
 
 === State transfer
@@ -97,7 +97,7 @@ One of the big changes we made in 5.1 was to use the same push-based state trans
 
  As a consequence we've unified the state transfer configuration as well, there is now a stateTransfer element holding a simplified state transfer configuration. The corresponding attributes in the stateRetrieval and hash elements have been deprecated, as have been some attributes that are no longer used. 
 
-[[sid-65274140_Upgradingfrom5.0to5.1-Configuration]]
+[[sid-68355206_Upgradingfrom5.0to5.1-Configuration]]
 
 
 === Configuration
@@ -171,7 +171,7 @@ The schema documentation has changed format, as it is now produced using the sta
 
 We are in the process of adding in support for this configuration style for modules (such as cache stores). In the meantime, please use the old configuration or XML if you require support for cache store module configuration.
 
-[[sid-65274140_Upgradingfrom5.0to5.1-FlagsandClassLoaders]]
+[[sid-68355206_Upgradingfrom5.0to5.1-FlagsandClassLoaders]]
 
 
 === Flags and ClassLoaders
@@ -191,14 +191,14 @@ cache.withFlags(f1, f2).withClassLoader(cl).put(k, v);
 
 The above pattern has always been the intention of this API anyway.
 
-[[sid-65274140_Upgradingfrom5.0to5.1-JGroupsBindAddress]]
+[[sid-68355206_Upgradingfrom5.0to5.1-JGroupsBindAddress]]
 
 
 === JGroups Bind Address
 
  Since upgrading to JGroups 3.x, -Dbind.address is ignored. This should be replaced with -Djgroups.bind_addr . 
 
-[[sid-65274141]]
+[[sid-68355207]]
 
 
 === Configuration changes from 5.0 to 5.1
diff --git a/documentation/src/main/asciidoc/upgrading/chapter-2-Upgrading_from_5_1_to_5_2.adoc b/documentation/src/main/asciidoc/upgrading/chapter-2-Upgrading_from_5_1_to_5_2.adoc
index ef587da..694abb5 100644
--- a/documentation/src/main/asciidoc/upgrading/chapter-2-Upgrading_from_5_1_to_5_2.adoc
+++ b/documentation/src/main/asciidoc/upgrading/chapter-2-Upgrading_from_5_1_to_5_2.adoc
@@ -1,8 +1,8 @@
-[[sid-65274142]]
+[[sid-68355208]]
 
 ==  Upgrading from 5.1 to 5.2
 
-[[sid-65274142_Upgradingfrom5.1to5.2-Declarativeconfiguration]]
+[[sid-68355208_Upgradingfrom5.1to5.2-Declarativeconfiguration]]
 
 
 === Declarative configuration
@@ -18,7 +18,7 @@ In order to use all of the latest features, make sure you change the namespace d
 
 ----
 
-[[sid-65274142_Upgradingfrom5.1to5.2-Transaction]]
+[[sid-68355208_Upgradingfrom5.1to5.2-Transaction]]
 
 
 === Transaction
@@ -46,14 +46,14 @@ builder.transaction().useSynchronization(false).recovery().enabled(false)
 
 ----
 
-[[sid-65274142_Upgradingfrom5.1to5.2-CacheLoaderandStoreconfiguration]]
+[[sid-68355208_Upgradingfrom5.1to5.2-CacheLoaderandStoreconfiguration]]
 
 
 === Cache Loader and Store configuration
 
  Cache Loader and Store configuration has changed greatly in Infinispan 5.2. Please refer to the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737103$$[Cache Loaders and Stores] documentation. 
 
-[[sid-65274142_Upgradingfrom5.1to5.2-VirtualNodes%3ESegments]]
+[[sid-68355208_Upgradingfrom5.1to5.2-VirtualNodes%3ESegments]]
 
 
 === Virtual Nodes &gt; Segments
diff --git a/documentation/src/main/asciidoc/upgrading/chapter-3-Upgrading_from_5_2_to_5_3.adoc b/documentation/src/main/asciidoc/upgrading/chapter-3-Upgrading_from_5_2_to_5_3.adoc
new file mode 100644
index 0000000..8a7ada0
--- /dev/null
+++ b/documentation/src/main/asciidoc/upgrading/chapter-3-Upgrading_from_5_2_to_5_3.adoc
@@ -0,0 +1,6 @@
+[[sid-68355209]]
+
+==  Upgrading from 5.2 to 5.3
+
+This page documents the code / configuration changes required when upgrading from Infinispan 5.2 to 5.3
+
diff --git a/documentation/src/main/asciidoc/upgrading/upgrading.adoc b/documentation/src/main/asciidoc/upgrading/upgrading.adoc
index 169f6ff..5282c79 100644
--- a/documentation/src/main/asciidoc/upgrading/upgrading.adoc
+++ b/documentation/src/main/asciidoc/upgrading/upgrading.adoc
@@ -1,3 +1,4 @@
 
 include::chapter-1-Upgrading_from_5_0_to_5_1.adoc\[\]
 include::chapter-2-Upgrading_from_5_1_to_5_2.adoc\[\]
+include::chapter-3-Upgrading_from_5_2_to_5_3.adoc\[\]
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-1-New_in_Infinispan_4_1_0.adoc b/documentation/src/main/asciidoc/user_guide/chapter-1-New_in_Infinispan_4_1_0.adoc
index 728ab4c..056066e 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-1-New_in_Infinispan_4_1_0.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-1-New_in_Infinispan_4_1_0.adoc
@@ -1,4 +1,4 @@
-[[sid-65273977_UserGuide-NewinInfinispan4.1.0]]
+[[sid-68355028_UserGuide-NewinInfinispan4.1.0]]
 
 ==  New in Infinispan 4.1.0
 
@@ -12,7 +12,7 @@
 . Hot Rod
 
 
-.  <<sid-65274056,Protocol specification (version 1)>> 
+.  <<sid-68355113,Protocol specification (version 1)>> 
 
 
 .  link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737146$$[Using the Hot Rod server module] 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-10-Using_Infinispan_Memcached_Server.adoc b/documentation/src/main/asciidoc/user_guide/chapter-10-Using_Infinispan_Memcached_Server.adoc
index 0f288f8..c63666a 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-10-Using_Infinispan_Memcached_Server.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-10-Using_Infinispan_Memcached_Server.adoc
@@ -1,15 +1,15 @@
-[[sid-65273984]]
+[[sid-68355035]]
 
 ==  Using Infinispan Memcached Server
 
-[[sid-65273984_UsingInfinispanMemcachedServer-Introduction]]
+[[sid-68355035_UsingInfinispanMemcachedServer-Introduction]]
 
 
 === Introduction
 
  Starting with version 4.1, the Infinispan distribution contains a server module that implements the link:$$http://github.com/memcached/memcached/blob/master/doc/protocol.txt$$[Memcached text protocol] . This allows Memcached clients to talk to one or serveral Infinispan backed Memcached servers. These servers could either be working standalone just like Memcached does where each server acts independently and does not communicate with the rest, or they could be clustered where servers replicate or distribute their contents to other Infinispan backed Memcached servers, thus providing clients with failover capabilities. 
 
-[[sid-65273984_UsingInfinispanMemcachedServer-StartinganInfinispanMemcachedserver]]
+[[sid-68355035_UsingInfinispanMemcachedServer-StartinganInfinispanMemcachedserver]]
 
 
 === Starting an Infinispan Memcached server
@@ -23,7 +23,7 @@ $ ./bin/startServer.sh -r memcached
 
  When the script is called without any further parameters, the started Infinispan Memcached server binds to _port 11211 on localhost_ (127.0.0.1) and uses a local (unclustered) Infinispan cache instance configured with default values underneath. 
 
-[[sid-65273984_UsingInfinispanMemcachedServer-CommandLineOptions]]
+[[sid-68355035_UsingInfinispanMemcachedServer-CommandLineOptions]]
 
 
 === Command Line Options
@@ -32,7 +32,7 @@ $ ./bin/startServer.sh -r memcached
 
 Please note that, since the Memcached protocol does not allow specifying a cache to use, the mapping between Infinispan Memcached server instances and Infinispan Cache instances is 1 to 1. Therefore, when passing an Infinispan configuration file to the Infinispan Memcache server, either define a named cache with name "memcachedCache" or modify the default cache configuration.
 
-[[sid-65273984_UsingInfinispanMemcachedServer-EnablingStatistics]]
+[[sid-68355035_UsingInfinispanMemcachedServer-EnablingStatistics]]
 
 
 === Enabling Statistics
@@ -51,26 +51,26 @@ Please note that, since the Memcached protocol does not allow specifying a cache
 
 Infinispan Memcached server has jmx statistics enabled by default.
 
-[[sid-65273984_UsingInfinispanMemcachedServer-CommandClarifications]]
+[[sid-68355035_UsingInfinispanMemcachedServer-CommandClarifications]]
 
 
 === Command Clarifications
 
-[[sid-65273984_UsingInfinispanMemcachedServer-FlushAll]]
+[[sid-68355035_UsingInfinispanMemcachedServer-FlushAll]]
 
 
 ==== Flush All
 
  Even in a clustered environment, flush_all command leads to the clearing of the Infinispan Memcached server where the call lands. There's no attempt to propagate this flush to other nodes in the cluster. This is done so that flush_all with delay use case can be reproduced with the Infinispan Memcached server. The aim of passing a delay to flush_all is so that different Memcached servers in a full can be flushed at different times, and hence avoid overloading the database with requests as a result of all Memcached servers being empty. For more info, check the link:$$http://github.com/memcached/memcached/blob/master/doc/protocol.txt$$[Memcached text protocol section on flush_all] . 
 
-[[sid-65273984_UsingInfinispanMemcachedServer-UnsupportedFeatures]]
+[[sid-68355035_UsingInfinispanMemcachedServer-UnsupportedFeatures]]
 
 
 === Unsupported Features
 
 This section explains those parts of the memcached text protocol that for one reason or the other, are not currently supported by the Infinispan based memcached implementation.
 
-[[sid-65273984_UsingInfinispanMemcachedServer-IndividualStats]]
+[[sid-68355035_UsingInfinispanMemcachedServer-IndividualStats]]
 
 
 ==== Individual Stats
@@ -121,28 +121,28 @@ Here's the list of currently unsupported stats:
 
 *  reclaimed 
 
-[[sid-65273984_UsingInfinispanMemcachedServer-StatisticSettings]]
+[[sid-68355035_UsingInfinispanMemcachedServer-StatisticSettings]]
 
 
 ==== Statistic Settings
 
 The settings statistics section of the text protocol has not been implemented due to its volatility.
 
-[[sid-65273984_UsingInfinispanMemcachedServer-SettingswithArgumentsParameter]]
+[[sid-68355035_UsingInfinispanMemcachedServer-SettingswithArgumentsParameter]]
 
 
 ==== Settings with Arguments Parameter
 
  Since the arguments that can be send to the Memcached server are not documented, Infinispan Memcached server does not support passing any arguments to stats command. If any parameters are passed, the Infinispan Memcached server will respond with a CLIENT_ERROR . 
 
-[[sid-65273984_UsingInfinispanMemcachedServer-DeleteHoldTimeParameter]]
+[[sid-68355035_UsingInfinispanMemcachedServer-DeleteHoldTimeParameter]]
 
 
 ==== Delete Hold Time Parameter
 
 Memcached does no longer honor the optional hold time parameter to delete command and so the Infinispan based memcached server does not implement such feature either.
 
-[[sid-65273984_UsingInfinispanMemcachedServer-VerbosityCommand]]
+[[sid-68355035_UsingInfinispanMemcachedServer-VerbosityCommand]]
 
 
 ==== Verbosity Command
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-11-Asynchronous_API.adoc b/documentation/src/main/asciidoc/user_guide/chapter-11-Asynchronous_API.adoc
index 5cd8beb..bba18ec 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-11-Asynchronous_API.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-11-Asynchronous_API.adoc
@@ -1,4 +1,4 @@
-[[sid-65273985]]
+[[sid-68355036]]
 
 ==  Asynchronous API
 
@@ -8,7 +8,7 @@
 
 For example, in a cache paramerized as Cache&lt;String, String&gt;, Cache.put(String key, String value) returns a String.  Cache.putAsync(String key, String value) would return a Future&lt;String&gt;.
 
-[[sid-65273985_AsynchronousAPI-WhyusesuchanAPI%3F]]
+[[sid-68355036_AsynchronousAPI-WhyusesuchanAPI%3F]]
 
 
 === Why use such an API?
@@ -32,14 +32,14 @@ for (Future<?> f: futures) f.get();
 
 ----
 
-[[sid-65273985_AsynchronousAPI-Whichprocessesactuallyhappenasynchronously%3F]]
+[[sid-68355036_AsynchronousAPI-Whichprocessesactuallyhappenasynchronously%3F]]
 
 
 === Which processes actually happen asynchronously?
 
  There are 4 things in Infinispan that can be considered to be on the critical path of a typical write operation.  These are, in terms of cost, network calls, marshalling, writing to a cache store (optional), and locking.  As of Infinispan 4.0, using the async methods will take the network calls and marshalling off the critical path.  For various technical reasons, writing to a cache store and acquiring locks, however, still happens in the caller's thread.  In future, we plan to take these offline as well.  See link:$$http://lists.jboss.org/pipermail/infinispan-dev/2010-January/002219.html$$[this developer mail list thread] about this topic. 
 
-[[sid-65273985_AsynchronousAPI-Notifyingfutures]]
+[[sid-68355036_AsynchronousAPI-Notifyingfutures]]
 
 
 === Notifying futures
@@ -65,7 +65,7 @@ cache.putAsync("key", "value").attachListener(futureListener);
 
 ----
 
-[[sid-65273985_AsynchronousAPI-Furtherreading]]
+[[sid-68355036_AsynchronousAPI-Furtherreading]]
 
 
 === Further reading
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-12-Tree_API_Module.adoc b/documentation/src/main/asciidoc/user_guide/chapter-12-Tree_API_Module.adoc
index 77eb4b4..b1a3610 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-12-Tree_API_Module.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-12-Tree_API_Module.adoc
@@ -1,15 +1,15 @@
-[[sid-65273986]]
+[[sid-68355037]]
 
 ==  Tree API Module
 
-[[sid-65273986_TreeAPIModule-Introduction]]
+[[sid-68355037_TreeAPIModule-Introduction]]
 
 
 === Introduction
 
  link:$$http://docs.jboss.org/infinispan/4.2/apidocs/org/infinispan/tree/package-summary.html$$[Infinispan's tree API module] offers clients the possibility of storing data using a tree-structure like API. This API is similar to the one link:$$http://docs.jboss.org/jbosscache/3.2.1.GA/apidocs/org/jboss/cache/package-summary.html$$[provided by JBoss Cache] , hence the tree module is perfect for those users wanting to migrate their applications from JBoss Cache to Infinispan, who want to limit changes their codebase as part of the migration. Besides, it's important to understand that Infinispan provides this tree API much more efficiently than JBoss Cache did, so if you're a user of the tree API in JBoss Cache, you should consider migrating to Infinispan. 
 
-[[sid-65273986_TreeAPIModule-WhatisTreeAPIabout%3F]]
+[[sid-68355037_TreeAPIModule-WhatisTreeAPIabout%3F]]
 
 
 === What is Tree API about?
@@ -20,12 +20,12 @@
 
 Please remember that users should not use root as a place to store data. Instead, users should define their own paths and store data there. The following sections will delve into the practical aspects of this API.
 
-[[sid-65273986_TreeAPIModule-UsingTreeAPI]]
+[[sid-68355037_TreeAPIModule-UsingTreeAPI]]
 
 
 === Using Tree API
 
-[[sid-65273986_TreeAPIModule-Dependencies]]
+[[sid-68355037_TreeAPIModule-Dependencies]]
 
 
 ==== Dependencies
@@ -47,7 +47,7 @@ Please remember that users should not use root as a place to store data. Instead
 
 ----
 
-[[sid-65273986_TreeAPIModule-CreatingaTreeCache]]
+[[sid-68355037_TreeAPIModule-CreatingaTreeCache]]
 
 
 ==== Creating a Tree Cache
@@ -67,7 +67,7 @@ TreeCache treeCache = TreeCacheFactory.createTreeCache(cache);
 
 ----
 
-[[sid-65273986_TreeAPIModule-ManipulatingdatainaTreeCache]]
+[[sid-68355037_TreeAPIModule-ManipulatingdatainaTreeCache]]
 
 
 ==== Manipulating data in a Tree Cache
@@ -146,7 +146,7 @@ Or:
 Set<Node<String, Object>> personsChildren = persons.getChildren();
 ----
 
-[[sid-65273986_TreeAPIModule-CommonOperations]]
+[[sid-68355037_TreeAPIModule-CommonOperations]]
 
 
 ==== Common Operations
@@ -215,7 +215,7 @@ Final tree structure:
 
 ----
 
-[[sid-65273986_TreeAPIModule-LockingInTreeAPI]]
+[[sid-68355037_TreeAPIModule-LockingInTreeAPI]]
 
 
 === Locking In Tree API
@@ -271,7 +271,7 @@ To make this move, locks would have been acquired on:
 
 *  _/a/b/c_ and _/a/b/c/e_ - because that's new target location for the nodes being moved 
 
-[[sid-65273986_TreeAPIModule-Listenersfortreecacheevents]]
+[[sid-68355037_TreeAPIModule-Listenersfortreecacheevents]]
 
 
 === Listeners for tree cache events
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-13-Infinispan_as_a_storage_for_Lucene_indexes.adoc b/documentation/src/main/asciidoc/user_guide/chapter-13-Infinispan_as_a_storage_for_Lucene_indexes.adoc
index 9a06d74..060d71f 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-13-Infinispan_as_a_storage_for_Lucene_indexes.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-13-Infinispan_as_a_storage_for_Lucene_indexes.adoc
@@ -1,4 +1,4 @@
-[[sid-65273988]]
+[[sid-68355039]]
 
 ==  Infinispan as a storage for Lucene indexes
 
@@ -10,42 +10,46 @@ This directory closely mimicks the same semantics of the traditional filesystem
 
  Two different _LockFactory_ implementations are provided to guarantee only one _IndexWriter_ at a time will make changes to the index, again implementing the same semantics as when opening an index on a local filesystem. As with other Lucene Directories, you can override the _LockFactory_ if you prefer to use an alternative implementation. 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-AdditionalLinks]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-AdditionalLinks]]
 
 
 === Additional Links
 
- Javadoc: link:$$http://docs.jboss.org/infinispan/5.2/apidocs/org/infinispan/lucene/InfinispanDirectory.html$$[] Issue tracker: link:$$https://jira.jboss.org/browse/ISPN/component/12312732$$[] Source code: link:$$http://www.jboss.org/infinispan/sourcecode.html$$[] 
+ Javadoc: link:$$http://docs.jboss.org/infinispan/5.3/apidocs/org/infinispan/lucene/InfinispanDirectory.html$$[] Issue tracker: link:$$https://jira.jboss.org/browse/ISPN/component/12312732$$[] Source code: link:$$http://www.jboss.org/infinispan/sourcecode.html$$[] 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Lucenecompatibility]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Lucenecompatibility]]
 
 
 === Lucene compatibility
 
-Current version was developed and compiled against Lucene 3.6.0, and also tested to work with Lucene versions from 3.0.x to 3.5.0, version 2.9.x, and  the older 2.4.1.
+ Current version was developed and compiled against both _Lucene 3.6.2_ and _Lucene 4.3.0_ (separately and then assembled in a single jar for your convenience as most code is shared). It is also regularly tested to work with Lucene versions from 3.0.x to 3.5.0, version 2.9.x, the older 2.4.1 and newer version 4.0, 4.1, 4.2. 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Howtouseit]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Howtouseit]]
 
 
 === How to use it
 
- To create a Directory instance: 
+To create a Directory instance:
 
 
 ----
 import org.apache.lucene.store.Directory;
-import org.infinispan.lucene.InfinispanDirectory;
+import org.infinispan.lucene.directory.DirectoryBuilder;
 import org.infinispan.Cache;
 
 Cache cache = // create an Infinispan cache, configured as you like
-Directory indexDir = new InfinispanDirectory(cache, "indexName");
+Directory indexDir = DirectoryBuilder.newDirectoryInstance(cache, cache, cache, indexName)
+                                     .create();
+
 ----
 
- The _indexName_ is a unique key to identify your index. It takes the same role as the path did on filesystem based indexes: you can create several different indexes giving them different names. When you use the same _indexName_ in another instance connected to the same network (or instantiated on the same machine, useful for testing) they will join, form a cluster and share all content. 
+ The _indexName_ is a unique key to identify your index. It takes the same role as the path did on filesystem based indexes: you can create several different indexes giving them different names. When you use the same _indexName_ in another instance connected to the same network (or instantiated on the same machine, useful for testing) they will join, form a cluster and share all content. Using a different _indexName_ allows you to store different indexes in the same set of Caches. 
+
+ The _cache_ is passed three times in this example, as that is ok for a quick demo, but as the API suggests it's a good idea to tune each cache separately as they will be used in different ways. More details provided below. 
 
 New nodes can be added or removed dynamically, making the service administration very easy and also suited for cloud environments: it's simple to react to load spikes, as adding more memory and CPU power to the search system is done by just starting more nodes.
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Limitations]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Limitations]]
 
 
 === Limitations
@@ -56,7 +60,7 @@ New nodes can be added or removed dynamically, making the service administration
 
 Reading (searching) is of course possible in parallel, from any number of threads on each node; changes applied to the single IndexWriter are affecting results of all threads on all nodes in a very short time, or guaranteed to be visible after a commit when using transactions.
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Configuration]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Configuration]]
 
 
 === Configuration
@@ -69,7 +73,7 @@ Batching was required in previous versions, it's not strictly needed anymore.
 
 Any Infinispan configuration should work fine as long as caches are not configured to remove entries after thresholds.
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Demo]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Demo]]
 
 
 === Demo
@@ -78,7 +82,7 @@ Any Infinispan configuration should work fine as long as caches are not configur
 
 Start several instances, then try adding text in one instance and searching for it on the other. The configuration is not tuned at all, but should work out-of-the box without any changes. If your network interface has multicast enabled, it will cluster across the local network with other instances of the demo.
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Mavendependencies]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Mavendependencies]]
 
 
 === Maven dependencies
@@ -90,21 +94,21 @@ Start several instances, then try adding text in one instance and searching for
 <dependency>
    <groupId>org.infinispan</groupId>
    <artifactId>infinispan-lucene-directory</artifactId>
-   <version>5.2.4.Final</version>
+   <version>5.3.0.Beta1</version>
 </dependency>
 
 ----
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-UsingaCacheLoader]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-UsingaCacheLoader]]
 
 
 === Using a CacheLoader
 
- Using a CacheLoader you can have the index content backed up to a permanent storage; you can use a shared store for all nodes or one per node, see <<sid-65274001>> for more details. 
+ Using a CacheLoader you can have the index content backed up to a permanent storage; you can use a shared store for all nodes or one per node, see <<sid-68355053>> for more details. 
 
  When using a CacheLoader to store a Lucene index, to get best write performance you would need to configure the CacheLoader with _async=true_ . 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Storingtheindexinadatabase]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Storingtheindexinadatabase]]
 
 
 ==== Storing the index in a database
@@ -118,7 +122,7 @@ Start several instances, then try adding text in one instance and searching for
 
 ----
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-LoadinganexistingLuceneIndex]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-LoadinganexistingLuceneIndex]]
 
 
 ==== Loading an existing Lucene Index
@@ -138,7 +142,7 @@ Start several instances, then try adding text in one instance and searching for
 
 Implementing write-through should not be hard: you're welcome to try implementing it.
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Architecturallimitations]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Architecturallimitations]]
 
 
 === Architectural limitations
@@ -156,40 +160,40 @@ Implementing write-through should not be hard: you're welcome to try implementin
 
  The _Infinispan Lucene Directory_ protects its content by implementing a distributed locking strategy, though this is designed as a last line of defense and is not to be considered an efficient mechanism to coordinate multiple writes: if you don't apply one of the above suggestions and get high write contention from multiple nodes you will likely get timeout exception. 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Suggestionsforoptimalperformance]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Suggestionsforoptimalperformance]]
 
 
 === Suggestions for optimal performance
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-JGroups%26Neworkingstack]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-JGroups%26Neworkingstack]]
 
 
 ==== JGroups &amp; Neworking stack
 
  JGroups manages all network IO and as such it is a critical component to tune for your specific environment. Make sure to read the link:$$http://jgroups.org/manual-3.x/html/index.html$$[JGroups reference documentation] , and play with the performance tests included in JGroups to make sure your network stack is setup appropriately. Don't forget to check also operating system level parameters, for example buffer sizes dedicated for networking. JGroups will log warning when it detects something wrong, but there is much more you can look into. 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-UsingaCacheStore]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-UsingaCacheStore]]
 
 
 ==== Using a CacheStore
 
  Currently all CacheStore implementations provided by Infinispan have a significant slowdown; we hope to resolve that soon but for the time being if you need high performance on writes with the Lucene Directory the best option is to disable any CacheStore; the second best option is to configure the CacheStore as _async_ . If you only need to load a Lucene index from read-only storage, see the above description for _org.infinispan.lucene.cachestore.LuceneCacheLoader_ . 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-ApplystandardLucenetuning]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-ApplystandardLucenetuning]]
 
 
 ==== Apply standard Lucene tuning
 
  All known options of Lucene apply to the Infinispan Lucene Directory as well; of course the effect might be less significant in some cases, but you should definitely read the link:$$http://lucene.apache.org/core/index.html$$[Apache Lucene documentation] . 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Disablebatchingandtransactions]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Disablebatchingandtransactions]]
 
 
 ==== Disable batching and transactions
 
 Early versions required Infinispan to have batching or transactions enabled. This is no longer a requirement, and in fact disabling them should provide little improvement in performance.
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-Settherightchunksize]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-Settherightchunksize]]
 
 
 ==== Set the right chunk size
@@ -204,7 +208,7 @@ Early versions required Infinispan to have batching or transactions enabled. Thi
 
  Using the _org.apache.lucene.index.IndexWriterConfig_ you can tune your index writing to _approximately_ keep your segment size to a reasonable level, from there then tune the chunksize, after having defined the chunksize you might want to revisit your network configuration settings. 
 
-[[sid-65273988_InfinispanasastorageforLuceneindexes-UsededicatedCacheinstances]]
+[[sid-68355039_InfinispanasastorageforLuceneindexes-UsededicatedCacheinstances]]
 
 
 ==== Use dedicated Cache instances
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-14-Infinispan_Server_Modules.adoc b/documentation/src/main/asciidoc/user_guide/chapter-14-Infinispan_Server_Modules.adoc
index b79c546..5f56f41 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-14-Infinispan_Server_Modules.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-14-Infinispan_Server_Modules.adoc
@@ -1,8 +1,8 @@
-[[sid-65273989]]
+[[sid-68355040]]
 
 ==  Infinispan Server Modules
 
-[[sid-65273989_InfinispanServerModules-Introduction]]
+[[sid-68355040_InfinispanServerModules-Introduction]]
 
 
 === Introduction
@@ -15,7 +15,7 @@ image::[]
 
  
 
-[[sid-65273989_InfinispanServerModules-ClientServeroverPeertoPeer]]
+[[sid-68355040_InfinispanServerModules-ClientServeroverPeertoPeer]]
 
 
 ==== Client-Server over Peer-to-Peer
@@ -54,7 +54,7 @@ image::[]
 
 Deploying Infinispan in this way also allows you to manage each tier independently, for example, you can upgrade you application or app server without bringing down your Infinispan data grid nodes.
 
-[[sid-65273989_InfinispanServerModules-PeertoPeeroverClientServer]]
+[[sid-68355040_InfinispanServerModules-PeertoPeeroverClientServer]]
 
 
 ==== to-Peer over Client-Server
@@ -65,14 +65,14 @@ Client-server Infinispan requests are likely to take longer compared to p2p requ
 
 Environments where application tier elasticity is not so important, or where server side applications access state-transfer-disabled, replicated Infinispan cache instances are amongst scenarios where Infinispan p2p deployments can be more suited than client-server ones.
 
-[[sid-65273989_InfinispanServerModules-ServerModules]]
+[[sid-68355040_InfinispanServerModules-ServerModules]]
 
 
 === Server Modules
 
 So, now that it's clear when it makes sense to deploy Infinispan in client-server mode, what are available solutions? All Infinispan server modules are based on the same pattern where the server backend creates an embedded Infinispan instance and if you start multiple backends, they can form a cluster and share/distribute state if configured to do so. The server types below primarily differ in the type of listener endpoint used to handle incoming connections. Here's a brief look at each of them:
 
-[[sid-65273989_InfinispanServerModules-RESTServerModule]]
+[[sid-68355040_InfinispanServerModules-RESTServerModule]]
 
 
 ==== REST Server Module
@@ -89,7 +89,7 @@ So, now that it's clear when it makes sense to deploy Infinispan in client-serve
 
 *  Clients wanting to load balance or failover between different Infinispan REST servers can do so using any standard HTTP load balancer such as link:$$http://www.jboss.org/mod_cluster$$[mod_cluster] . It's worth noting though these load balancers maintain a static view of the servers in the backend and if a new one was to be added, it would require manual update of the load balancer. 
 
-[[sid-65273989_InfinispanServerModules-MemcachedServerModule]]
+[[sid-68355040_InfinispanServerModules-MemcachedServerModule]]
 
 
 ==== Memcached Server Module
@@ -106,7 +106,7 @@ So, now that it's clear when it makes sense to deploy Infinispan in client-serve
 
 * In terms of load balancing and failover, there're a few clients that can load balance or failover given a static list of server addresses (perl's Cache::Memcached for example) but any server addition or removal would require manual intervention.
 
-[[sid-65273989_InfinispanServerModules-HotRodServerModule]]
+[[sid-68355040_InfinispanServerModules-HotRodServerModule]]
 
 
 ==== Hot Rod Server Module
@@ -123,7 +123,7 @@ So, now that it's clear when it makes sense to deploy Infinispan in client-serve
 
 * Load balancing and failover is dynamically provided by Hot Rod client implementations using information provided by the server.
 
-[[sid-65273989_InfinispanServerModules-WebSocketServerModule]]
+[[sid-68355040_InfinispanServerModules-WebSocketServerModule]]
 
 
 ==== WebSocket Server Module
@@ -140,7 +140,7 @@ So, now that it's clear when it makes sense to deploy Infinispan in client-serve
 
 * Since websockets work on the same HTTP port, any HTTP load balancer would do to load balance and failover.
 
-[[sid-65273989_InfinispanServerModules-ServerComparisonSummary]]
+[[sid-68355040_InfinispanServerModules-ServerComparisonSummary]]
 
 
 === Server Comparison Summary
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-15-Management_Tooling.adoc b/documentation/src/main/asciidoc/user_guide/chapter-15-Management_Tooling.adoc
index 82da2c6..f49e9b9 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-15-Management_Tooling.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-15-Management_Tooling.adoc
@@ -1,22 +1,22 @@
-[[sid-65273990]]
+[[sid-68355041]]
 
 ==  Management Tooling
 
-[[sid-65273990_ManagementTooling-Introduction]]
+[[sid-68355041_ManagementTooling-Introduction]]
 
 
 === Introduction
 
 Management of Infinispan instances is all about exposing as much relevant statistical information that allows administrators to get view of the state of each Infinispan instance. Taking in account that a single installation could be made up of several tens or hundreds Infinispan instances, providing clear and concise information in an efficient manner is imperative. The following sections dive into the range of management tooling that Infinispan provides.
 
-[[sid-65273990_ManagementTooling-JMX]]
+[[sid-68355041_ManagementTooling-JMX]]
 
 
 === JMX
 
  Over the years, link:$$http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/$$[JMX] has become the de facto standard for management and administration of middleware and as a result, the Infinispan team has decided to standarize on this technology for the exposure of management or statistical information. 
 
-[[sid-65273990_ManagementTooling-EnablingJMXStatistics]]
+[[sid-68355041_ManagementTooling-EnablingJMXStatistics]]
 
 
 ==== Enabling JMX Statistics
@@ -67,7 +67,7 @@ Understanding The MBeans
 
  Once you have enabled JMX reporting at either the CacheManager or Cache level, you should be able to connect to VM(s) where Infinispan is running using a standard JMX GUI such as link:$$http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html$$[JConsole] or link:$$http://java.sun.com/javase/6/docs/technotes/guides/visualvm/$$[VisualVM] , and you should find the following MBeans: 
 
-[[sid-65273990_ManagementTooling-Infinispan4.1orearlier]]
+[[sid-68355041_ManagementTooling-Infinispan4.1orearlier]]
 
 
 ===== Infinispan 4.1 or earlier
@@ -91,7 +91,7 @@ For example, the cache store JMX component MBean for a default cache configured
 
 Please note that any cache names that contain ':' or '=' characters will be substituted by '_' character. Infinispan does this because ':' and '=' are control characters for JMX object names.
 
-[[sid-65273990_ManagementTooling-Infinispan4.2orlater]]
+[[sid-68355041_ManagementTooling-Infinispan4.2orlater]]
 
 
 ===== Infinispan 4.2 or later
@@ -121,14 +121,14 @@ Please note that any cache names that contain ':' or '=' characters will be subs
 
 Please note that cache and cache manager names are quoted to protect against illegal characters being used in these user-defined names.
 
-[[sid-65273990_ManagementTooling-MultipleJMXDomains]]
+[[sid-68355041_ManagementTooling-MultipleJMXDomains]]
 
 
 ==== Multiple JMX Domains
 
 There can be situations where several CacheManager instances are created in a single VM, or Cache names belonging to different CacheManagers under the same VM clash.
 
-[[sid-65273990_ManagementTooling-Infinispan4.1orearlierx]]
+[[sid-68355041_ManagementTooling-Infinispan4.1orearlierx]]
 
 
 ===== Infinispan 4.1 or earlier
@@ -181,7 +181,7 @@ globalConfiguration.setAllowDuplicateDomains(true)
 
 Remember that by default, duplicate domains are disallowed.
 
-[[sid-65273990_ManagementTooling-Infinispan4.2orlaterx]]
+[[sid-68355041_ManagementTooling-Infinispan4.2orlaterx]]
 
 
 ===== Infinispan 4.2 or later
@@ -213,7 +213,7 @@ Using either of these options should result on the CacheManager MBean name being
 
 For the time being, you can still set your own jmxDomain if you need to and we also allow duplicate domains, or rather duplicate JMX names, but these should be limited to very special cases where different cache managers within the same JVM are named equally.
 
-[[sid-65273990_ManagementTooling-RegisteringMBeansInNonDefaultMBeanServers]]
+[[sid-68355041_ManagementTooling-RegisteringMBeansInNonDefaultMBeanServers]]
 
 
 ==== Registering MBeans In Non-Default MBean Servers
@@ -249,7 +249,7 @@ There has been a couple of noticeable additions in Infinispan 5.0 in terms of MB
 
 .  When global JMX statistics are enabled, JGroups MBeans are also registered automatically, so you can get key information of the group communication transport layer that's used to cluster Infinispan instances. To find out more about the information provided, check the link:$$http://community.jboss.org/docs/10938$$[JGroups JMX documentation] . 
 
-[[sid-65273990_ManagementTooling-RHQ]]
+[[sid-68355041_ManagementTooling-RHQ]]
 
 
 === RHQ
@@ -316,7 +316,7 @@ The actual port value used does not really matter here, but what matters is that
 
 .  Once Infinispan instances have been discovered, you should see a new resource for each of the cache manager running appearing in the link:$$http://rhq-project.org/display/JOPR2/Initial+Auto-discovery+and+Import$$[Inventory/Discovery Queue] of the RHQ server. Simply import it now and you should see each cache manager appearing with as many child cache resources as caches are running in each cache manager. You're now ready to monitor Infinispan! 
 
-[[sid-65273990_ManagementTooling-RHQmonitoringtips]]
+[[sid-68355041_ManagementTooling-RHQmonitoringtips]]
 
 
 ==== RHQ monitoring tips
@@ -349,7 +349,7 @@ ____
 ==== 
 
 
-[[sid-65273990_ManagementTooling-Writingpluginsforothermanagementtools]]
+[[sid-68355041_ManagementTooling-Writingpluginsforothermanagementtools]]
 
 
 === Writing plugins for other management tools
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-16-Asynchronous_Options.adoc b/documentation/src/main/asciidoc/user_guide/chapter-16-Asynchronous_Options.adoc
index b614953..86e0fe9 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-16-Asynchronous_Options.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-16-Asynchronous_Options.adoc
@@ -1,8 +1,8 @@
-[[sid-65273991]]
+[[sid-68355043]]
 
 ==  Asynchronous Options
 
-[[sid-65273991_AsynchronousOptions-Introduction]]
+[[sid-68355043_AsynchronousOptions-Introduction]]
 
 
 === Introduction
@@ -13,14 +13,14 @@ With asynchronous modes, speed is more important than consistency and this is pa
 
 In order to choose the asynchronous configuration that best suits your application, it's important to understand the following configuration settings:
 
-[[sid-65273991_AsynchronousOptions-AsynchronousCommunications]]
+[[sid-68355043_AsynchronousOptions-AsynchronousCommunications]]
 
 
 === Asynchronous Communications
 
  Whenever you add link:$$http://docs.jboss.org/infinispan/5.1/configdocs/urn_infinispan_config_5.1/complexType/configuration.clustering.async.html$$[&lt;async&gt;] element within &lt;clustering&gt;, you're telling the underlying JGroups layer in Infinispan to use asynchronous communication. What this means is that JGroups will send any replication/distribution/invalidation request to the wire but will not wait for a reply from the receiver. 
 
-[[sid-65273991_AsynchronousOptions-AsynchronousMarshalling]]
+[[sid-68355043_AsynchronousOptions-AsynchronousMarshalling]]
 
 
 === Asynchronous Marshalling
@@ -51,11 +51,11 @@ cache.put("car", "bmw");
 
 On the contrary, if your application only ever makes one modification per key/value pair and there's no happens-before relationship between them, then async marshalling is a very valid optimization that can increase performance of your application without data consistency risks.
 
- If you have async marshalling turned on and see exceptions related to java.util.concurrent.RejectedExecutionException , as explained in the <<sid-65273893,technical faq page>> , you should also consider switching off async marshalling. 
+ If you have async marshalling turned on and see exceptions related to java.util.concurrent.RejectedExecutionException , as explained in the <<sid-68354942,technical faq page>> , you should also consider switching off async marshalling. 
 
  Back in Infinispan 4.0, when &lt;async&gt; element was used, this property was set to true by default. However due to reordering risks mentioned earlier, the default has changed to false from Infinispan 4.1 onwards. 
 
-[[sid-65273991_AsynchronousOptions-ReplicationQueue]]
+[[sid-68355043_AsynchronousOptions-ReplicationQueue]]
 
 
 === Replication Queue
@@ -64,14 +64,14 @@ The aim of the replication queue is to batch the individual cache operations and
 
 Until Infinispan 4.1.0.CR2, replication queue always flushed data with async marshalling turned on, which meant that there was a small gap where flush calls could be reordered. Since 4.1.0.CR3, async marshalling configuration is taken into account, and decides whether the flush calls goes directly to the JGroups layer, or whether an intermediate handing over to a different thread occurs. The advantages of using async marshalling with replication queue are less than clear because replication queue itself already makes client requests return faster, so it's generally recommended to have async marshalling turned off, or &lt;asyncTransportExecutor&gt; element's maxThreads set to 1, when replication queue is turned on.
 
-[[sid-65273991_AsynchronousOptions-AsynchronousAPI]]
+[[sid-68355043_AsynchronousOptions-AsynchronousAPI]]
 
 
 === Asynchronous API
 
  Finally, the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737045$$[asynchronous API] can be used to emulate non-blocking APIs, whereby calls are handed over to a different thread and asynchronous API calls return to the client immediately. Similar to async marshalling, using this API can lead to reordering, so you should avoid calling modifying asynchronous methods on the same keys. 
 
-[[sid-65273991_AsynchronousOptions-ReturnValues]]
+[[sid-68355043_AsynchronousOptions-ReturnValues]]
 
 
 === Return Values
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-17-Infinispan_as_Hibernate_2nd_Level_Cache_in_JBoss_AS_5_x.adoc b/documentation/src/main/asciidoc/user_guide/chapter-17-Infinispan_as_Hibernate_2nd_Level_Cache_in_JBoss_AS_5_x.adoc
index 8714085..add0d2e 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-17-Infinispan_as_Hibernate_2nd_Level_Cache_in_JBoss_AS_5_x.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-17-Infinispan_as_Hibernate_2nd_Level_Cache_in_JBoss_AS_5_x.adoc
@@ -1,4 +1,4 @@
-[[sid-65273992]]
+[[sid-68355044]]
 
 ==  Infinispan as Hibernate 2nd-Level Cache in JBoss AS 5.x
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-18-Clustered_Configuration_QuickStart.adoc b/documentation/src/main/asciidoc/user_guide/chapter-18-Clustered_Configuration_QuickStart.adoc
index d7f71a4..e02390d 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-18-Clustered_Configuration_QuickStart.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-18-Clustered_Configuration_QuickStart.adoc
@@ -1,10 +1,10 @@
-[[sid-65273995]]
+[[sid-68355047]]
 
 ==  Clustered Configuration QuickStart
 
  Infinispan ships with _pre-configured_ JGroups stacks that make it easy for you to jump-start a clustered configuration. 
 
-[[sid-65273995_ClusteredConfigurationQuickStart-UsinganexternalJGroupsfile]]
+[[sid-68355047_ClusteredConfigurationQuickStart-UsinganexternalJGroupsfile]]
 
 
 === Using an external JGroups file
@@ -40,7 +40,7 @@ GlobalConfiguration gc = new GlobalConfigurationBuilder().transport().addPropert
 
  In both cases above, Infinispan looks for _jgroups.xml_ first in your classpath, and then for an absolute path name if not found in the classpath. 
 
-[[sid-65273995_ClusteredConfigurationQuickStart-UseoneofthepreconfiguredJGroupsfiles]]
+[[sid-68355047_ClusteredConfigurationQuickStart-UseoneofthepreconfiguredJGroupsfiles]]
 
 
 === Use one of the pre-configured JGroups files
@@ -58,7 +58,7 @@ The configurations available are:
 
 *  jgroups-ec2.xml - Uses TCP as a transport and link:$$http://community.jboss.org/docs/DOC-15925$$[S3_PING] for discovery.  Suitable on link:$$http://$$[Amazon EC2] nodes where UDP multicast isn't available. 
 
-[[sid-65273995_ClusteredConfigurationQuickStart-FinetuningJGroupssettings]]
+[[sid-68355047_ClusteredConfigurationQuickStart-FinetuningJGroupssettings]]
 
 
 ==== tuning JGroups settings
@@ -70,7 +70,7 @@ The settings above can be further tuned without editing the XML files themselves
 $ java -cp ... -Djgroups.tcp.port=1234 -Djgroups.tcp.address=10.11.12.13
 ----
 
-[[sid-65273995_ClusteredConfigurationQuickStart-jgroupsudp.xml]]
+[[sid-68355047_ClusteredConfigurationQuickStart-jgroupsudp.xml]]
 
 
 ===== jgroups-udp.xml
@@ -85,7 +85,7 @@ $ java -cp ... -Djgroups.tcp.port=1234 -Djgroups.tcp.address=10.11.12.13
 |===============
 
 
-[[sid-65273995_ClusteredConfigurationQuickStart-jgroupstcp.xml]]
+[[sid-68355047_ClusteredConfigurationQuickStart-jgroupstcp.xml]]
 
 
 ===== jgroups-tcp.xml
@@ -102,7 +102,7 @@ $ java -cp ... -Djgroups.tcp.port=1234 -Djgroups.tcp.address=10.11.12.13
 |===============
 
 
-[[sid-65273995_ClusteredConfigurationQuickStart-jgroupsec2.xml]]
+[[sid-68355047_ClusteredConfigurationQuickStart-jgroupsec2.xml]]
 
 
 ===== jgroups-ec2.xml
@@ -119,7 +119,7 @@ $ java -cp ... -Djgroups.tcp.port=1234 -Djgroups.tcp.address=10.11.12.13
 |===============
 
 
-[[sid-65273995_ClusteredConfigurationQuickStart-Furtherreading]]
+[[sid-68355047_ClusteredConfigurationQuickStart-Furtherreading]]
 
 
 === Further reading
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-19-Locking_and_Concurrency.adoc b/documentation/src/main/asciidoc/user_guide/chapter-19-Locking_and_Concurrency.adoc
index c9a1999..7da31cf 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-19-Locking_and_Concurrency.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-19-Locking_and_Concurrency.adoc
@@ -1,4 +1,4 @@
-[[sid-65273997]]
+[[sid-68355049]]
 
 ==  Locking and Concurrency
 
@@ -18,7 +18,7 @@
 
 The rest of this wiki page is broken down into the following sections:
 
-[[sid-65273997_LockingandConcurrency-MVCCimplementationdetails]]
+[[sid-68355049_LockingandConcurrency-MVCCimplementationdetails]]
 
 
 === MVCC implementation details
@@ -29,7 +29,7 @@ In particular, Infinispan's MVCC implementation is heavily optimized for readers
 
  Writers, on the other hand, need to acquire a write lock.  This ensures only one concurrent writer per entry, causing concurrent writers to queue up to change an entry.  To allow concurrent reads, writers make a copy of the entry they intend to modify, by wrapping the entry in a link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/container/entries/MVCCEntry.html$$[MVCCEntry] .  This copy isolates concurrent readers from seeing partially modified state.  Once a write has completed, MVCCEntry.commit() will flush changes to the data container and subsequent readers will see the changes written. 
 
-[[sid-65273997_LockingandConcurrency-Isolationlevels]]
+[[sid-68355049_LockingandConcurrency-Isolationlevels]]
 
 
 === Isolation levels
@@ -61,14 +61,14 @@ Here's a more detailed example that should help understand the difference betwee
 
 With REPEATABLE_READ, step 7 will still return v. So, if you're gonna retrieve the same key multiple times within a transaction, you should use REPEATABLE_READ.
 
-[[sid-65273997_LockingandConcurrency-TheLockManager]]
+[[sid-68355049_LockingandConcurrency-TheLockManager]]
 
 
 === The LockManager
 
 The LockManager is a component that is responsible for locking an entry for writing.  The LockManager makes use of a LockContainer to locate/hold/create locks.  LockContainers come in two broad flavours, with support for lock striping and with support for one lock per entry.
 
-[[sid-65273997_LockingandConcurrency-Lockstriping]]
+[[sid-68355049_LockingandConcurrency-Lockstriping]]
 
 
 === Lock striping
@@ -89,14 +89,14 @@ Since Infinispan 5.0, lock striping is disabled by default, due to potential dea
 
  The size of the shared lock collection used by lock striping can be tuned using the concurrencyLevel attribute of the link:$$http://docs.jboss.org/infinispan/5.1/configdocs/urn_infinispan_config_5.1/complexType/configuration.locking.html$$[&lt;locking /&gt;] configuration element. 
 
-[[sid-65273997_LockingandConcurrency-Concurrencylevels]]
+[[sid-68355049_LockingandConcurrency-Concurrencylevels]]
 
 
 === Concurrency levels
 
 In addition to determining the size of the striped lock container, this concurreny level is also used to tune any JDK ConcurrentHashMap based collections where related, such as internal to DataContainers.  Please refer to the JDK ConcurrentHashMap Javadocs for a detailed discussion of concurrency levels, as this parameter is used in exactly the same way in Infinispan.
 
-[[sid-65273997_LockingandConcurrency-Explicitandimplicitdistributedeagerlocking]]
+[[sid-68355049_LockingandConcurrency-Explicitandimplicitdistributedeagerlocking]]
 
 
 === Explicit and implicit distributed eager locking
@@ -139,7 +139,7 @@ Implicit eager locking is enabled as follows:
 <transaction useEagerLocking="true" />
 ----
 
-[[sid-65273997_LockingandConcurrency-Lockingasingleremotenode]]
+[[sid-68355049_LockingandConcurrency-Lockingasingleremotenode]]
 
 
 === Locking a single remote node
@@ -200,14 +200,14 @@ The following xml snippet shows how can be configured:
 
 Note that the configuration is ignored if eager locking is disabled or cache mode is not DIST.
 
-[[sid-65273997_LockingandConcurrency-Consistency]]
+[[sid-68355049_LockingandConcurrency-Consistency]]
 
 
 ==== Consistency
 
 The fact that a single owner is locked (as opposed to all owners being locked) does not break the following consistency guarantee: if key K is hashed to nodes {A, B} and transaction TX1 acquires a lock for K, let's say on A. If another transaction, TX2, is started on B (or any other node) and TX2 tries to lock K then it will fail with a timeout as the lock is already held by TX1. The reason for this is the that the lock for a key K is always, deterministically, acquired on the same node of the cluster, regardless of where the transaction originates.
 
-[[sid-65273997_LockingandConcurrency-Nontransactionalcachesandconcurrentupdates]]
+[[sid-68355049_LockingandConcurrency-Nontransactionalcachesandconcurrentupdates]]
 
 
 === transactional caches and concurrent updates
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-2-New_in_Infinispan_4_2_0.adoc b/documentation/src/main/asciidoc/user_guide/chapter-2-New_in_Infinispan_4_2_0.adoc
index f216fdb..347013e 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-2-New_in_Infinispan_4_2_0.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-2-New_in_Infinispan_4_2_0.adoc
@@ -1,4 +1,4 @@
-[[sid-65273977_UserGuide-NewinInfinispan4.2.0]]
+[[sid-68355028_UserGuide-NewinInfinispan4.2.0]]
 
 ==  New in Infinispan 4.2.0
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-20-Configuring_Cache_declaratively.adoc b/documentation/src/main/asciidoc/user_guide/chapter-20-Configuring_Cache_declaratively.adoc
index bd5a1a8..bd17ef9 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-20-Configuring_Cache_declaratively.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-20-Configuring_Cache_declaratively.adoc
@@ -1,4 +1,4 @@
-[[sid-65273998]]
+[[sid-68355050]]
 
 ==  Configuring Cache declaratively
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-21-Configuration_Migration_Tools.adoc b/documentation/src/main/asciidoc/user_guide/chapter-21-Configuration_Migration_Tools.adoc
index ea9021b..5a2ec8b 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-21-Configuration_Migration_Tools.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-21-Configuration_Migration_Tools.adoc
@@ -1,4 +1,4 @@
-[[sid-65273999]]
+[[sid-68355051]]
 
 ==  Configuration Migration Tools
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-22-Consistent_Concurrent_Updates_With_Hot_Rod_Versioned_Operations.adoc b/documentation/src/main/asciidoc/user_guide/chapter-22-Consistent_Concurrent_Updates_With_Hot_Rod_Versioned_Operations.adoc
index 86b6dbd..9246e1c 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-22-Consistent_Concurrent_Updates_With_Hot_Rod_Versioned_Operations.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-22-Consistent_Concurrent_Updates_With_Hot_Rod_Versioned_Operations.adoc
@@ -1,8 +1,8 @@
-[[sid-65274000]]
+[[sid-68355052]]
 
 ==  Consistent Concurrent Updates With Hot Rod Versioned Operations
 
-[[sid-65274000_ConsistentConcurrentUpdatesWithHotRodVersionedOperations-Introduction]]
+[[sid-68355052_ConsistentConcurrentUpdatesWithHotRodVersionedOperations-Introduction]]
 
 
 === Introduction
@@ -11,7 +11,7 @@
 
  However, when it comes to link:$$http://community.jboss.org/wiki/HotRodProtocol$$[Hot Rod protocol] backed link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737146$$[servers] , clients do not yet have the ability to start remote transactions but they can call instead versioned operations to mimic the conditional methods provided by the embedded Infinispan cache instance API.  Let's look at a real example to understand how it works. 
 
-[[sid-65274000_ConsistentConcurrentUpdatesWithHotRodVersionedOperations-DataConsistencyProblem]]
+[[sid-68355052_ConsistentConcurrentUpdatesWithHotRodVersionedOperations-DataConsistencyProblem]]
 
 
 === Data Consistency Problem
@@ -34,7 +34,7 @@ image::[]
 
 Obviously, this would be wrong.  Two concurrent updates have resulted in an incorrect account balance.  The second update should not have been allowed since the balance the second ATM had was incorrect. Even if the ATM would have retrieved the balance before calculating the new balance, someone could have updated between the new balance being retrieved and the update. Before finding out how to solve this issue in a client-server scenario with Hot Rod, let's look at how this is solved when Infinispan clients run in peer-to-peer mode where clients and Infinispan live within the same JVM.
 
-[[sid-65274000_ConsistentConcurrentUpdatesWithHotRodVersionedOperations-PeertoPeerSolution]]
+[[sid-68355052_ConsistentConcurrentUpdatesWithHotRodVersionedOperations-PeertoPeerSolution]]
 
 
 ==== to-Peer Solution
@@ -47,7 +47,7 @@ image::[]
 
  
 
-[[sid-65274000_ConsistentConcurrentUpdatesWithHotRodVersionedOperations-ClientServerSolution]]
+[[sid-68355052_ConsistentConcurrentUpdatesWithHotRodVersionedOperations-ClientServerSolution]]
 
 
 ==== Client-Server Solution
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-23-Cache_Loaders_and_Stores.adoc b/documentation/src/main/asciidoc/user_guide/chapter-23-Cache_Loaders_and_Stores.adoc
index 0266710..ee5f392 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-23-Cache_Loaders_and_Stores.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-23-Cache_Loaders_and_Stores.adoc
@@ -1,15 +1,15 @@
-[[sid-65274001]]
+[[sid-68355053]]
 
 ==  Cache Loaders and Stores
 
-[[sid-65274001_CacheLoadersandStores-Introduction]]
+[[sid-68355053_CacheLoadersandStores-Introduction]]
 
 
 === Introduction
 
 Cache loader is Infinispan's connection to a (persistent) data store. Cache loader fetches data from a store when that data is not in the cache, and when modifications are made to data in the cache the CacheLoader is called to store those modifications back to the store. Cache loaders are associated with individual caches, i.e. different caches from the same cache manager might have different cache store configurations.
 
-[[sid-65274001_CacheLoadersandStores-Configuration]]
+[[sid-68355053_CacheLoadersandStores-Configuration]]
 
 
 === Configuration
@@ -27,7 +27,7 @@ Cache loaders can be configured in a chain. Cache read operations will look at a
            purgeSynchronously="true"
            ignoreModifications="false"
            purgeOnStartup="false"
-           location="${java.io.tmpdir}" />
+           location="${java.io.tmpdir}">
       <async
            enabled="true"
            flushLockTimeout="15000"
@@ -68,7 +68,7 @@ builder.loaders()
 ----
 
 
-*  passivation (false by default) has a significant impact on how Infinispan interacts with the loaders, and is discussed in the <<sid-65274001,next paragraph>> . 
+*  passivation (false by default) has a significant impact on how Infinispan interacts with the loaders, and is discussed in the <<sid-68355053,next paragraph>> . 
 
 
 * shared (false by default) indicates that the cache loader is shared among different cache instances, for example where all instances in a cluster use the same JDBC settings to talk to the same remote, shared database. Setting this to true prevents repeated and unnecessary writes of the same data to the cache loader by different cache instances.
@@ -103,7 +103,7 @@ builder.loaders()
 
 *  async element has to do with cache store persisting data (a)synchronously to the actual store. It is discussed in detail link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737144$$[here] . 
 
-[[sid-65274001_CacheLoadersandStores-CachePassivation]]
+[[sid-68355053_CacheLoadersandStores-CachePassivation]]
 
 
 === Cache Passivation
@@ -112,7 +112,7 @@ A cache loader can be used to enforce entry passivation and activation on evicti
 
 When an eviction policy in effect evicts an entry from the cache, if passivation is enabled, a notification that the entry is being passivated will be emitted to the cache listeners and the entry will be stored. When a user attempts to retrieve a entry that was evicted earlier, the entry is (lazily) loaded from the cache loader into memory. When the entry and its children have been loaded, they're removed from the cache loader and a notification is emitted to the cache listeners that the entry has been activated. In order to enable passivation just set passivation to true (false by default). When passivation is used, only the first cache loader configured is used and all others are ignored.
 
-[[sid-65274001_CacheLoadersandStores-CacheLoaderBehaviorwithPassivationDisabledvsEnabled]]
+[[sid-68355053_CacheLoadersandStores-CacheLoaderBehaviorwithPassivationDisabledvsEnabled]]
 
 
 ==== Cache Loader Behavior with Passivation Disabled vs Enabled
@@ -177,7 +177,7 @@ When passivation is disabled, whenever an element is modified, added or removed,
 
 . Memory: keyOne Disk:
 
-[[sid-65274001_CacheLoadersandStores-Filesystembasedcacheloaders]]
+[[sid-68355053_CacheLoadersandStores-Filesystembasedcacheloaders]]
 
 
 === File system based cache loaders
@@ -193,11 +193,14 @@ Infinispan ships with several cache loaders that utilize the file system as a da
 
 *  link:$$http://jdbm.sourceforge.net/$$[JdbmCacheStore] , which is a cache loader implementation based on the JDBM engine, a fast and free alternative to BerkeleyDB. 
 
+
+* LevelDBCacheStore, which is a cache store implementation based on Google's LevelDB, a fast key-value store.
+
  Note that the BerkeleyDB implementation is much more efficient than the filesystem-based implementation, but requires a commercial license if distributed with an application (see link:$$http://www.oracle.com/database/berkeley-db/index.html$$[] for details). 
 
  For detailed description of all the parameters supported by the stores, please consult the link:$$http://infinispan.sourceforge.net/4.0/apidocs/$$[javadoc] . 
 
-[[sid-65274001_CacheLoadersandStores-JDBCbasedcacheloaders]]
+[[sid-68355053_CacheLoadersandStores-JDBCbasedcacheloaders]]
 
 
 === JDBC based cache loaders
@@ -213,14 +216,14 @@ Based on the type of keys to be persisted, there are three JDBC cache loaders:
 
 *  link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/loaders/jdbc/mixed/JdbcMixedCacheStore.html$$[JdbcMixedCacheStore] - it is a hybrid implementation that, based on the key type, delegates to either link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/loaders/jdbc/binary/JdbcBinaryCacheStore.html$$[JdbcBinaryCacheStore] or link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/loaders/jdbc/stringbased/JdbcStringBasedCacheStore.html$$[JdbcStringBasedCacheStore] . 
 
-[[sid-65274001_CacheLoadersandStores-WhichJDBCcacheloadershouldIuse%3F]]
+[[sid-68355053_CacheLoadersandStores-WhichJDBCcacheloadershouldIuse%3F]]
 
 
 ==== Which JDBC cache loader should I use?
 
  It is generally preferable to use link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/loaders/jdbc/stringbased/JdbcStringBasedCacheStore.html$$[JdbcStringBasedCacheStore] when you are in control of the key types, as it offers better throughput under heavy load. One scenario in which it is not possible to use it though, is when you can't write an link:$$http://infinispan.sourceforge.net/4.0/apidocs/$$[Key2StringMapper] to map the keys to to string objects (e.g. when you don't have control over the types of the keys, for whatever reason). Then you should use either link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/loaders/jdbc/binary/JdbcBinaryCacheStore.html$$[JdbcBinaryCacheStore] or link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/loaders/jdbc/mixed/JdbcMixedCacheStore.html$$[JdbcMixedCacheStore] . The later is preferred to the former when the majority of the keys are handled by link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/loaders/jdbc/stringbased/JdbcStringBasedCacheStore.html$$[JdbcStringBasedCacheStore] , but you still have some keys you cannot convert through link:$$http://infinispan.sourceforge.net/4.0/apidocs/$$[Key2StringMapper] . 
 
-[[sid-65274001_CacheLoadersandStores-Connectionmanagement%28pooling%29]]
+[[sid-68355053_CacheLoadersandStores-Connectionmanagement%28pooling%29]]
 
 
 ==== Connection management (pooling)
@@ -238,7 +241,7 @@ Based on the type of keys to be persisted, there are three JDBC cache loaders:
 
 The PooledConnectionFactory is generally recommended for stand-alone deployments (i.e. not running within AS or servlet container). ManagedConnectionFactory can be used when running in a managed environment where a DataSource is present, so that connection pooling is performed within the DataSource.
 
-[[sid-65274001_CacheLoadersandStores-Sampleconfigurations]]
+[[sid-68355053_CacheLoadersandStores-Sampleconfigurations]]
 
 
 ==== Sample configurations
@@ -434,14 +437,14 @@ ConfigurationBuilder builder = new ConfigurationBuilder();
 ==== 
 
 
-[[sid-65274001_CacheLoadersandStores-Cloudcacheloader]]
+[[sid-68355053_CacheLoadersandStores-Cloudcacheloader]]
 
 
 === Cloud cache loader
 
  The CloudCacheStore implementation utilizes link:$$http://code.google.com/p/jclouds/$$[JClouds] to communicate with cloud storage providers such as link:$$http://aws.amazon.com/s3/$$[Amazon's S3] , Rackspace's link:$$http://www.rackspacecloud.com/cloud_hosting_products/files$$[Cloudfiles] or any other such provider supported by JClouds. If you're planning to use Amazon S3 for storage, consider using it with Infinispan. Infinispan itself provides in-memory caching for your data to minimize the amount of remote access calls, thus reducing the latency and cost of fetching your Amazon S3 data. With cache replication, you are also able to load data from your local cluster without having to remotely access it every time. Note that Amazon S3 does not support transactions. If transactions are used in your application then there is some possibility of state inconsistency when using this cache loader. However, writes are atomic, in that if a write fails nothing is considered written and data is never corrupted. For a list of configuration refer to the link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/loaders/cloud/CloudCacheStoreConfig.html$$[javadoc] . 
 
-[[sid-65274001_CacheLoadersandStores-Remotecacheloader]]
+[[sid-68355053_CacheLoadersandStores-Remotecacheloader]]
 
 
 === Remote cache loader
@@ -501,14 +504,14 @@ b.loaders().addStore(RemoteCacheStoreConfigurationBuilder.class)
 
 In this sample configuration, the remote cache store is configured to use the remote cache named "mycache" on servers "one" and "two". It also configures connection pooling and provides a custom transport executor. Additionally the cache store is asynchronous.
 
-[[sid-65274001_CacheLoadersandStores-Cassandracacheloader]]
+[[sid-68355053_CacheLoadersandStores-Cassandracacheloader]]
 
 
 === Cassandra cache loader
 
  The CassandraCacheStore was introduced in Infinispan 4.2. Read the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737148$$[specific page] for details on implementation and configuration. 
 
-[[sid-65274001_CacheLoadersandStores-Clustercacheloader]]
+[[sid-68355053_CacheLoadersandStores-Clustercacheloader]]
 
 
 === Cluster cache loader
@@ -542,10 +545,353 @@ b.loaders()
 
 Note: The ClusterCacheLoader does not support preloading(preload=true). It also won't provide state if fetchPersistentSate=true.
 
-[[sid-65274001_CacheLoadersandStores-CacheLoadersandtransactionalcaches]]
+[[sid-68355053_CacheLoadersandStores-JPAcachestore]]
+
+
+=== JPA cache store
+
+The implementation depends on JPA 2.0 specification to access entity meta model.
+
+In normal use cases, it's recommended to leverage Infinispan for JPA second level cache and/or query cache.  However, if you'd like to use only Infinispan API and you want Infinispan to persist into a cache store using a common format (e.g., a database with well defined schema), then JPA Cache Store could be right for you.
+
+When using JPA Cache Store, the key should be the ID of the entity, while the value should be the entity object.  Only a single @Id or @EmbeddedId annotated property is allowed.  Auto-generated ID is not supported.  Lastly, all entries will be stored as immortal entries.
+
+[[sid-68355053_CacheLoadersandStores-SampleUsage]]
+
+
+==== Sample Usage
+
+For example, given a persistence unit "myPersistenceUnit", and a JPA entity User:
+
+persistence.xml
+
+
+----
+
+<persistence-unit name="myPersistenceUnit">
+	...
+</persistence-unit>
+
+----
+
+ User entity class ﻿(see link:$$https://github.com/infinispan/infinispan/tree/master/cachestore/jpa/src/test/java/org/infinispan/loaders/jpa/entity$$[test for full example] ) 
+
+
+----
+
+@Entity
+public class User implements Serializable {
+	@Id
+	private String username;
+	private String firstName;
+	private String lastName;
+
+	...
+}
+
+----
+
+Then you can configure a cache "usersCache" to use JPA Cache Store, so that when you put data into the cache, the data would be persisted into the database based on JPA configuration.
+
+
+----
+
+EmbeddedCacheManager cacheManager = ...;
+
+
+Configuration cacheConfig = new ConfigurationBuilder().loaders()
+				.addLoader(JpaCacheStoreConfigurationBuilder.class)
+				.persistenceUnitName("myPersistenceUnit")
+				.entityClass(User.class)
+				.build();
+cacheManager.defineCache("usersCache", cacheConfig);
+
+Cache<String, User> usersCache = cacheManager.getCache("usersCache");
+usersCache.put("raytsang", new User(...));
+
+----
+
+Normally a single Infinispan cache can store multiple types of key/value pairs, for example:
+
+
+----
+
+Cache<String, User> usersCache = cacheManager.getCache("myCache");
+usersCache.put("raytsang", new User());
+Cache<Integer, Teacher> teachersCache = cacheManager.getCache("myCache");
+teachersCache.put(1, new Teacher());
+
+----
+
+It's important to note that, when a cache is configured to use a JPA Cache Store, that cache would only be able to store ONE type of data.
+
+
+----
+
+Cache<String, User> usersCache = cacheManager.getCache("myJPACache"); // configured for User entity class
+usersCache.put("raytsang", new User());
+Cache<Integer, Teacher> teachersCache = cacheManager.getCache("myJPACache"); // cannot do this when this cache is configured to use a JPA cache store
+teachersCache.put(1, new Teacher());
+
+----
+
+ Use of @EmbeddedId is supported so that you can also use composite keys (see the link:$$https://github.com/infinispan/infinispan/blob/master/cachestore/jpa/src/test/java/org/infinispan/loaders/jpa/entity/Vehicle.java$$[test code] for full example). 
+
+
+----
+
+@Entity
+public class Vehicle implements Serializable {
+	@EmbeddedId
+	private VehicleId id;
+	private String color;	...
+}
+
+@Embeddable
+public class VehicleId implements Serializable
+{
+	private String state;
+	private String licensePlate;
+	...
+}
+
+----
+
+Lastly, auto-generated IDs ﻿(e.g., @GeneratedValue) is not supported.  When putting things into the cache with a JPA cache store, the key should be the ID value!
+
+[[sid-68355053_CacheLoadersandStores-Configurationx]]
+
+
+==== Configuration
+
+[[sid-68355053_CacheLoadersandStores-SampleProgramaticConfiguration]]
+
+
+===== Sample Programatic Configuration
+
+
+----
+
+Configuration cacheConfig = new ConfigurationBuilder().loaders()
+				.addLoader(JpaCacheStoreConfigurationBuilder.class)
+				.persistenceUnitName("org.infinispan.loaders.jpa.configurationTest")
+				.entityClass(User.class)
+				.build();
+
+----
+
+[options="header"]
+|===============
+|Parameter|Description
+|persistenceUnitName| JPA persistence unit name in JPA configuration ﻿(persistence.xml) that contains the JPA entity class 
+|entityClass| JPA entity class that is expected to be stored in this cache.  Only one class is allowed. 
+
+|===============
+
+
+[[sid-68355053_CacheLoadersandStores-SampleXMLConfiguration]]
+
+
+===== Sample XML Configuration
+
+
+----
+
+<namedCache name="vehicleCache">
+	<loaders passivation="false" shared="true" preload="true">
+		<jpaStore 
+			persistenceUnitName="org.infinispan.loaders.jpa.configurationTest"
+			entityClassName="org.infinispan.loaders.jpa.entity.User"
+		/>
+	</loaders>
+</namedCache>
+
+----
+
+[options="header"]
+|===============
+|Parameter|Description
+|persistenceUnitName| JPA persistence unit name in JPA configuration ﻿(persistence.xml) that contains the JPA entity class 
+|entityClassName|Fully qualified JPA entity class name that is expected to be stored in this cache.  Only one class is allowed.
+
+|===============
+
+
+[[sid-68355053_CacheLoadersandStores-AdditionalReferences]]
+
+
+==== Additional References
+
+ Refer to the link:$$https://github.com/infinispan/infinispan/blob/master/cachestore/jpa/src/test/java/org/infinispan/loaders/jpa/config/ConfigurationTest.java$$[test case] for code samples in action. 
+
+ Refer to link:$$https://github.com/infinispan/infinispan/blob/master/cachestore/jpa/src/test/resources/config/jpa-config-53.xml$$[test configurations] for configuration samples. 
+
+[[sid-68355053_CacheLoadersandStores-LevelDBcachestore]]
+
+
+=== LevelDB cache store
+
+ link:$$http://code.google.com/p/leveldb/$$[LevelDB] is a fast key-value filesystem-based storage written at Google.  LevelDB cache store currently uses a link:$$https://github.com/dain/leveldb$$[Java implementation] .  It may be possible to use a link:$$https://github.com/fusesource/leveldbjni$$[JNI implementation] in the future. 
+
+[[sid-68355053_CacheLoadersandStores-SampleUsagex]]
+
+
+==== Sample Usage
+
+LevelDB cache store requires 2 filesystem directories to be configured - each directory for a LevelDB database.  One location is used to store non-expired data, while the second location is used to store expired keys pending purge.
+
+EmbeddedCacheManager cacheManager = ...;
+
+
+----
+
+Configuration cacheConfig = new ConfigurationBuilder().loaders()
+				.addLoader(LevelDBCacheStoreConfigurationBuilder.class)
+				.build();
+cacheManager.defineCache("usersCache", cacheConfig);
+
+Cache<String, User> usersCache = cacheManager.getCache("usersCache");
+usersCache.put("raytsang", new User(...));
+
+----
+
+[[sid-68355053_CacheLoadersandStores-Configurationxx]]
+
+
+==== Configuration
+
+[[sid-68355053_CacheLoadersandStores-SampleProgramaticConfigurationx]]
+
+
+===== Sample Programatic Configuration
+
+
+----
+
+Configuration cacheConfig = new ConfigurationBuilder().loaders()
+				.addLoader(LevelDBCacheStoreConfigurationBuilder.class)
+				.location("/tmp/leveldb/data")
+				.expiredLocation("/tmp/leveldb/expired")
+				.entityClass(User.class)
+				.build();
+
+----
+
+[options="header"]
+|===============
+|Parameter|Description
+|location|Directory to use for LevelDB to store primary cache store data.  Directory will be auto-created if it does not exit.
+|expiredLocation| Directory to use for LevelDB to store expiring data pending to be purged permanently.  Directory will be auto-created if it does not exit. 
+| expiryQueueSize |Size of the in-memory queue to hold expiring entries before it gets flushed into expired LevelDB store
+|clearThreshold| There are two methods to clear all entries in LevelDB.  One method is to iterate through all entries and remove each entry individually.  The other method is to delete the database and re-init.  For smaller databases, deleting individual entries is faster than the latter method.  This configuration sets the max number of entries allowed before using the latter method 
+| compressionType |Configuration for LevelDB for data compression, see CompressionType enum for options
+| blockSize | Configuration for LevelDB - see link:$$http://leveldb.googlecode.com/svn/trunk/doc/index.html$$[documentation] for performance tuning 
+| cacheSize | Configuration for LevelDB - see link:$$http://leveldb.googlecode.com/svn/trunk/doc/index.html$$[documentation] for performance tuning 
+
+|===============
+
+
+[[sid-68355053_CacheLoadersandStores-SampleXMLConfigurationx]]
+
+
+===== Sample XML Configuration
+
+
+----
+
+<namedCache name="vehicleCache">
+	<loaders passivation="false" shared="true" preload="true">
+		<leveldbStore 
+			location="/tmp/leveldb/data"
+			expiredLocation="/tmp/leveldb/expired"
+		/>
+	</loaders>
+</namedCache>
+
+----
+
+[[sid-68355053_CacheLoadersandStores-AdditionalReferencesx]]
+
+
+==== Additional References
+
+ Refer to the link:$$https://github.com/infinispan/infinispan/blob/master/cachestore/leveldb/src/test/java/org/infinispan/loaders/leveldb/config/ConfigurationTest.java$$[test case] for code samples in action. 
+
+ Refer to link:$$https://github.com/infinispan/infinispan/blob/master/cachestore/leveldb/src/test/resources/config/leveldb-config-52.xml$$[test configurations] for configuration samples. 
+
+[[sid-68355053_CacheLoadersandStores-CacheLoadersandtransactionalcaches]]
 
 
 === Cache Loaders and transactional caches
 
 When a cache is transactional and a cache loader is present, the cache loader won't be enlisted in the transaction in which the cache is part. That means that it is possible to have inconsistencies at cache loader level: the transaction to succeed applying the in-memory state but (partially) fail applying the changes to the store. Manual recovery would not work with caches stores.
 
+[[sid-68355053_CacheLoadersandStores-MongoDBcacheloader]]
+
+
+=== MongoDB cache loader
+
+The MongoDB cachestore is released within the 5.3 version of Infinispan aka "Tactical Nuclear Penguin".
+
+To communicate with the MongoDB server instance, we are using the official java driver version  2.10.1
+
+To configure the cachestore, you just need to add a new entry into the loaders section.
+
+Here is an example for your xml configuration file:
+
+
+----
+
+<loaders>
+   <mongodbStore xmlns="urn:infinispan:config:mongodb:5.3" >
+        <connection host="localhost" port="27017" timeout="2000" acknowledgment="0"/>
+        <authentication username="mongoUser" password="mongoPass" />
+        <storage database="infinispan_test_database" collection="infispan_cachestore" />
+   </mongodbStore>
+</loaders>
+
+----
+
+If you prefer the programmatic API here is a snippet:
+
+
+----
+
+ConfigurationBuilder b = new ConfigurationBuilder();
+b.loaders().addStore(MongoDBCacheStoreConfigurationBuilder.class)
+   .host( "localhost" )
+   .port( 27017 )
+   .timeout( 1500 )
+   .acknowledgment( 0 )
+   .username( "mongoDBUSer" )
+   .password( "mongoBDPassword" )
+   .database( "infinispan_cachestore" )
+   .collection( "indexes" );
+
+final Configuration config = b.build();
+MongoDBCacheStoreConfiguration store = (MongoDBCacheStoreConfiguration) config.loaders().cacheLoaders().get(0);
+
+----
+
+ The connection section contains the connection information to connect to the MongoDB server instance. The authentication section is optional, it allows you to specificy username and password if you are using some. The storage section explicits where you will store the data. 
+
+[options="header"]
+|===============
+|Section|property|usage|default value
+| _connection_ | | | 
+| |host| The hostname of the server on which the MongoDB is running |localhost
+| |port| The port used by the MongoDB server instance. |27017
+| |timeout| The timeout used by the MongoDB driver at the connection. (in ms) |2000
+| |acknoledgement| The value used to configure the acknowledgment for write operation (-1 / 0 / 1 / 2+) |1
+| _authentication_ | | | 
+| |username| The username used for the authentication with the MongoDB server. | 
+| |password| The password used for the authentication with the MongoDB server. | 
+| _storage_ | | | 
+| |database| The database used to store elements. | 
+| |collection| The collection which will contain the elements. | 
+
+|===============
+
+
+ For more information about the configuration property usage, you can refer to the official link:$$http://api.mongodb.org/java/2.10.1/com/mongodb/WriteConcern.html$$[MongoDB java driver documentation] 
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-24-Portable_Serialization_For_Hot_Rod_With_Apache_Avro.adoc b/documentation/src/main/asciidoc/user_guide/chapter-24-Portable_Serialization_For_Hot_Rod_With_Apache_Avro.adoc
index c90e989..0ef2502 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-24-Portable_Serialization_For_Hot_Rod_With_Apache_Avro.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-24-Portable_Serialization_For_Hot_Rod_With_Apache_Avro.adoc
@@ -1,15 +1,15 @@
-[[sid-65274007]]
+[[sid-68355061]]
 
 ==  Portable Serialization For Hot Rod With Apache Avro
 
-[[sid-65274007_PortableSerializationForHotRodWithApacheAvro-Introduction]]
+[[sid-68355061_PortableSerializationForHotRodWithApacheAvro-Introduction]]
 
 
 === Introduction
 
  Starting with Infinispan 5.0, Hot Rod clients can be configured with a marshaller that produces plattform independent payloads using link:$$http://avro.apache.org/$$[Apache Avro] . This means that payloads generated by a Java, Avro-based, marshaller could be read by a Python, Avro-based, marshaller. When Hot Rod clients in other languages such as Python or Ruby become available, this will mean that for example, data stored via Java Hot Rod client will be readable by a Python Hot Rod client. 
 
-[[sid-65274007_PortableSerializationForHotRodWithApacheAvro-LanguagesSupported]]
+[[sid-68355061_PortableSerializationForHotRodWithApacheAvro-LanguagesSupported]]
 
 
 === Languages Supported
@@ -33,7 +33,7 @@ Avro currently supports providing portable serialization payloads for the follow
 
 So interoperability of payloads is limited to these languages. The choice of Avro over other existing portable serialization libraries (i.e. Google Protocol Buffers, Apache Thrift, MessagePack...etc) was done based languages supported, ease of use, and payload size.
 
-[[sid-65274007_PortableSerializationForHotRodWithApacheAvro-ObjectTypesSupported]]
+[[sid-68355061_PortableSerializationForHotRodWithApacheAvro-ObjectTypesSupported]]
 
 
 === Object Types Supported
@@ -85,7 +85,7 @@ Therefore, it's clear that users are free to use any portable serialization libr
 
  Short and Byte Java primitive types are not supported per se. Instead, clients should pass integers which will be encoded efficiently using link:$$http://lucene.apache.org/java/2_4_0/fileformats.html#VInt$$[variable-length] link:$$http://code.google.com/apis/protocolbuffers/docs/encoding.html#types$$[zig zag] coding. Primitive arrays not supported except byte arrays. Instead, use their object counter partners, i.e. Integer...etc. 
 
-[[sid-65274007_PortableSerializationForHotRodWithApacheAvro-JavaConfiguration]]
+[[sid-68355061_PortableSerializationForHotRodWithApacheAvro-JavaConfiguration]]
 
 
 === Java Configuration
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-25-The_Grouping_API.adoc b/documentation/src/main/asciidoc/user_guide/chapter-25-The_Grouping_API.adoc
index 7051c54..f4bf05a 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-25-The_Grouping_API.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-25-The_Grouping_API.adoc
@@ -1,10 +1,10 @@
-[[sid-65274009]]
+[[sid-68355063]]
 
 ==  The Grouping API
 
 In some cases you may wish to co-locate a group of entries onto a particular node. In this, the group API will be useful for you.
 
-[[sid-65274009_TheGroupingAPI-Howdoesitwork%3F]]
+[[sid-68355063_TheGroupingAPI-Howdoesitwork%3F]]
 
 
 === How does it work?
@@ -13,7 +13,7 @@ Infinispan allocates each node a portion of the total hash space. Normally, when
 
  If you use the grouping API , then Infinispan will ignore the hash of the key when deciding which _node_ to store the entry on, and instead use a hash of the group. Infinispan still uses the hash of the key to store the entry on a node. When the group API is in use, it is important that every node can still compute, using an algorithm, the owner of every key. For this reason, the group cannot be specified manually. The group can either be intrinsic to the entry (generated by the key class) or extrinsic (generated by an external function). 
 
-[[sid-65274009_TheGroupingAPI-HowdoIusethegroupingAPI%3F]]
+[[sid-68355063_TheGroupingAPI-HowdoIusethegroupingAPI%3F]]
 
 
 === How do I use the grouping API?
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-26-Infinispan_transactions.adoc b/documentation/src/main/asciidoc/user_guide/chapter-26-Infinispan_transactions.adoc
index 4fd31ed..2960261 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-26-Infinispan_transactions.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-26-Infinispan_transactions.adoc
@@ -1,8 +1,8 @@
-[[sid-65274010]]
+[[sid-68355064]]
 
 ==  Infinispan transactions
 
-[[sid-65274010_Infinispantransactions-JTASupport]]
+[[sid-68355064_Infinispantransactions-JTASupport]]
 
 
 === JTA Support
@@ -42,7 +42,7 @@ TransactionManager tm = cache.getAdvancedCache().getTransactionManager();
 
 ----
 
-[[sid-65274010_Infinispantransactions-Configuringtransactions]]
+[[sid-68355064_Infinispantransactions-Configuringtransactions]]
 
 
 === Configuring transactions
@@ -70,7 +70,7 @@ Transactions are being configured at cache level; bellow is a sample configurati
 
  For more details on how two phase commit (2PC) is implemented in Infinispan and how locks are being acquired see the section below. All possible transactional settings are available in link:$$http://docs.jboss.org/infinispan/5.1/configdocs/$$[Configuration reference] 
 
-[[sid-65274010_Infinispantransactions-Transactionalmodes]]
+[[sid-68355064_Infinispantransactions-Transactionalmodes]]
 
 
 === Transactional modes
@@ -109,7 +109,7 @@ Do not forget to configure a TransactionManagerLookup for transactional caches.
 
 Supported transaction models are optimistic and pessimistic. Optimistic model is an improvement over the old transaction model as it completely defers lock acquisition to transaction prepare time. New approach reduces lock acquisition duration and increases throughput which in turn avoids deadlocks significantly. In pessimistic model, cluster wide-locks are acquired on each write operation only being released after the transaction completed.
 
-[[sid-65274010_Infinispantransactions-OptimisticTransactions]]
+[[sid-68355064_Infinispantransactions-OptimisticTransactions]]
 
 
 ==== Optimistic Transactions
@@ -146,7 +146,7 @@ By default, a transactional cache is optimistic.
 ==== 
 
 
-[[sid-65274010_Infinispantransactions-PessimisticTransactions]]
+[[sid-68355064_Infinispantransactions-PessimisticTransactions]]
 
 
 ==== Pessimistic Transactions
@@ -186,7 +186,7 @@ assert c.transaction().lockingMode() == LockingMode.PESSIMISTIC;
 
 ----
 
-[[sid-65274010_Infinispantransactions-Backwardcompatibility]]
+[[sid-68355064_Infinispantransactions-Backwardcompatibility]]
 
 
 ==== Backward compatibility
@@ -206,7 +206,7 @@ The autoCommit feature can be managed through configuration:
 
 ----
 
-[[sid-65274010_Infinispantransactions-WhatdoIneedpessimisticoroptimistictransactions%3F]]
+[[sid-68355064_Infinispantransactions-WhatdoIneedpessimisticoroptimistictransactions%3F]]
 
 
 ==== What do I need - pessimistic or optimistic transactions?
@@ -215,7 +215,7 @@ The autoCommit feature can be managed through configuration:
 
 On the other hand, pessimistic transactions might be a better fit when there is high contention on the keys and transaction rollbacks are less desirable. Pessimistic transactions are more costly by their nature: each write operation potentially involves a RPC for lock acquisition.
 
-[[sid-65274010_Infinispantransactions-Deadlockdetection]]
+[[sid-68355064_Infinispantransactions-Deadlockdetection]]
 
 
 === Deadlock detection
@@ -232,21 +232,21 @@ On the other hand, pessimistic transactions might be a better fit when there is
 
 Note: deadlock detection only runs on an a per cache basis: deadlocks that spread over two or more caches won't be detected.
 
-[[sid-65274010_Infinispantransactions-Transactionandexceptions]]
+[[sid-68355064_Infinispantransactions-Transactionandexceptions]]
 
 
 === Transaction and exceptions
 
  If a link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/CacheException.html$$[CacheException] (or a subclass of it) is thrown by a cache method within the scope of a JTA transaction, then the transaction is automatically marked for rollback. 
 
-[[sid-65274010_Infinispantransactions-Transactionrecoveryonnodefailures]]
+[[sid-68355064_Infinispantransactions-Transactionrecoveryonnodefailures]]
 
 
 === Transaction recovery on node failures
 
  Transaction recovery is discussed in link:$$http://community.jboss.org/docs/DOC-16646?uniqueTitle=false$$[this] document. 
 
-[[sid-65274010_Infinispantransactions-EnlistingSynchronization]]
+[[sid-68355064_Infinispantransactions-EnlistingSynchronization]]
 
 
 === Enlisting Synchronization
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-27-Load_Testing_Infinispan_Server_Modules.adoc b/documentation/src/main/asciidoc/user_guide/chapter-27-Load_Testing_Infinispan_Server_Modules.adoc
index 25fe7b3..15f1d1b 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-27-Load_Testing_Infinispan_Server_Modules.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-27-Load_Testing_Infinispan_Server_Modules.adoc
@@ -1,4 +1,4 @@
-[[sid-65274012]]
+[[sid-68355066]]
 
 ==  Load Testing Infinispan Server Modules
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-28-Using_Infinispan_as_JPA_Hibernate_Second_Level_Cache_Provider.adoc b/documentation/src/main/asciidoc/user_guide/chapter-28-Using_Infinispan_as_JPA_Hibernate_Second_Level_Cache_Provider.adoc
index d07fb52..455dd1a 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-28-Using_Infinispan_as_JPA_Hibernate_Second_Level_Cache_Provider.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-28-Using_Infinispan_as_JPA_Hibernate_Second_Level_Cache_Provider.adoc
@@ -1,8 +1,8 @@
-[[sid-65274013]]
+[[sid-68355067]]
 
 ==  Using Infinispan as JPA-Hibernate Second Level Cache Provider
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-Overview]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-Overview]]
 
 
 === Overview
@@ -21,7 +21,7 @@
 ==== 
 
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-Configuration]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-Configuration]]
 
 
 === Configuration
@@ -92,14 +92,14 @@
 
  This is all the configuration you need to have JPA/Hibernate use Infinispan as cache provider with the default settings. You will still need to define which entities and queries need to be cached as defined in the Hibernate reference documentation, but that configuration aspect is not peculiar to Infinispan. This default configuration should suit the majority of use cases but sometimes, further configuration is required and to help with such situations, please check the following section where more advanced settings are discussed. 
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-DefaultConfigurationExplained]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-DefaultConfigurationExplained]]
 
 
 === Default Configuration Explained
 
 The aim of this section is to explain the default settings for each of the different global data type (entity, collection, query and timestamps) caches, why these were chosen and what are the available alternatives.
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-DefaultsforEntity%2FCollectionCaching]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-DefaultsforEntity%2FCollectionCaching]]
 
 
 ==== Defaults for Entity/Collection Caching
@@ -135,7 +135,7 @@ The aim of this section is to explain the default settings for each of the diffe
 
 *  By default _entites and collections are configured with lazy deserialization_ which helps deserialization when entities or collections are stored in isolated deployments. If you're sure you'll never deploy your entities or collections in classloader isolated deployment archives, you can disable this setting. 
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-DefaultsforQueryCaching]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-DefaultsforQueryCaching]]
 
 
 ==== Defaults for Query Caching
@@ -158,7 +158,7 @@ The aim of this section is to explain the default settings for each of the diffe
 
 *  By default, _query cache has initial state transfer disabled_ . It is not recommended that this is enabled. 
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-DefaultsforTimestampsCache]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-DefaultsforTimestampsCache]]
 
 
 ==== Defaults for Timestamps Cache
@@ -169,7 +169,7 @@ The aim of this section is to explain the default settings for each of the diffe
 
 *  By default, the _timestamps cache is configured with a cluster cache loader (in Hibernate 3.6.0 or earlier it had state transfer enabled)_ so that joining nodes can retrieve all timestamps. You shouldn't attempt to disable the cluster cache loader for the timestamps cache. 
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-JTATransactionsConfiguration]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-JTATransactionsConfiguration]]
 
 
 === JTA Transactions Configuration
@@ -276,14 +276,14 @@ For Example if you were running with the JBoss Application Server you would set:
 </property>
 ----
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-StandaloneJTAforJPA%2FHibernateusingInfinispanas2LC]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-StandaloneJTAforJPA%2FHibernateusingInfinispanas2LC]]
 
 
 ==== Standalone JTA for JPA/Hibernate using Infinispan as 2LC
 
  The JBoss standalone JTA example referred to in the previous section is inspired by the great work of Guenther Demetz, one of the members of the Infinispan community, who wrote an link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737126$$[impressive wiki explaining how to set up standalone JTA with different transaction managers running outside of an EE server, and how to get this to work with an Infinispan backed JPA/Hibernate application] . 
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-AdvancedConfiguration]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-AdvancedConfiguration]]
 
 
 === Advanced Configuration
@@ -507,7 +507,7 @@ The query would be stored under "AccountRegion" cache instance and users could c
 </property>
 ----
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-IntegrationwithJBossApplicationServer]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-IntegrationwithJBossApplicationServer]]
 
 
 === Integration with JBoss Application Server
@@ -518,7 +518,7 @@ Infinispan based Hibernate 2LC was developed as part of Hibernate 3.5 release an
 
  Recently, William Decoste has helped migrate the Infinispan 2LC module to Hibernate 3.3, and link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737057$$[in this wiki] , he explains how to integrate Infinispan Hibernate 2LC with JBoss AS/EAP 5.x. 
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-UsingInfinispanasremoteSecondLevelCache%3F]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-UsingInfinispanasremoteSecondLevelCache%3F]]
 
 
 === Using Infinispan as remote Second Level Cache?
@@ -548,10 +548,10 @@ There are however some edge cases where it might make sense to have a remote sec
 
 *  To pin the cache and the application server onto different CPU cores (using _numactl_ ), and even pin them to different physically memory based on the NUMA nodes. 
 
-[[sid-65274013_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-FrequentlyAskedQuestions]]
+[[sid-68355067_UsingInfinispanasJPA-HibernateSecondLevelCacheProvider-FrequentlyAskedQuestions]]
 
 
 === Frequently Asked Questions
 
- To find out more please go to the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=5832912$$[Hibernate 2nd level cache  section] in the <<sid-65273893,Technical FAQ wiki>> . 
+ To find out more please go to the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=5832912$$[Hibernate 2nd level cache  section] in the <<sid-68354942,Technical FAQ wiki>> . 
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-29-Default_Values_For_Property_Based_Attributes.adoc b/documentation/src/main/asciidoc/user_guide/chapter-29-Default_Values_For_Property_Based_Attributes.adoc
index 85e7987..b232a10 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-29-Default_Values_For_Property_Based_Attributes.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-29-Default_Values_For_Property_Based_Attributes.adoc
@@ -1,10 +1,10 @@
-[[sid-65274015]]
+[[sid-68355069]]
 
 ==  Default Values For Property Based Attributes
 
  The aim of this article is to complement the link:$$http://docs.jboss.org/infinispan/5.1/configdocs$$[configuration reference] documentation with information on default values that could not be automatically generated. Please find below the name of the XML elements and their corresponding property default values: 
 
-[[sid-65274015_DefaultValuesForPropertyBasedAttributes-asyncListenerExecutor]]
+[[sid-68355069_DefaultValuesForPropertyBasedAttributes-asyncListenerExecutor]]
 
 
 === asyncListenerExecutor
@@ -15,7 +15,7 @@
 
 * threadNamePrefix = "notification-thread"
 
-[[sid-65274015_DefaultValuesForPropertyBasedAttributes-asyncTransportExecutor]]
+[[sid-68355069_DefaultValuesForPropertyBasedAttributes-asyncTransportExecutor]]
 
 
 === asyncTransportExecutor
@@ -26,7 +26,7 @@
 
 * threadNamePrefix = "transport-thread"
 
-[[sid-65274015_DefaultValuesForPropertyBasedAttributes-evictionScheduledExecutor]]
+[[sid-68355069_DefaultValuesForPropertyBasedAttributes-evictionScheduledExecutor]]
 
 
 === evictionScheduledExecutor
@@ -37,7 +37,7 @@
 
 * threadNamePrefix = "eviction-thread"
 
-[[sid-65274015_DefaultValuesForPropertyBasedAttributes-replicationQueueScheduledExecutor]]
+[[sid-68355069_DefaultValuesForPropertyBasedAttributes-replicationQueueScheduledExecutor]]
 
 
 === replicationQueueScheduledExecutor
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-3-New_in_Infinispan_5_0_0.adoc b/documentation/src/main/asciidoc/user_guide/chapter-3-New_in_Infinispan_5_0_0.adoc
index b5cd1fa..5b81d96 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-3-New_in_Infinispan_5_0_0.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-3-New_in_Infinispan_5_0_0.adoc
@@ -1,4 +1,4 @@
-[[sid-65273977_UserGuide-NewinInfinispan5.0.0]]
+[[sid-68355028_UserGuide-NewinInfinispan5.0.0]]
 
 ==  New in Infinispan 5.0.0
 
@@ -18,7 +18,7 @@
 .  link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=59146687$$[MapReduce Framework] 
 
 
-.  <<sid-65273979,Fluent Programmatic Configuration>> 
+.  <<sid-68355030,Fluent Programmatic Configuration>> 
 
 
 .  link:$$http://docs.jboss.org/infinispan/5.0/apidocs/config.html$$[Configuration Reference] 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-30-Running_Infinispan_on_Amazon_Web_Services.adoc b/documentation/src/main/asciidoc/user_guide/chapter-30-Running_Infinispan_on_Amazon_Web_Services.adoc
index 7b58f6d..011e7a6 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-30-Running_Infinispan_on_Amazon_Web_Services.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-30-Running_Infinispan_on_Amazon_Web_Services.adoc
@@ -1,22 +1,22 @@
-[[sid-65274016]]
+[[sid-68355070]]
 
 ==  Running Infinispan on Amazon Web Services
 
 Infinispan can be used on the Amazon Web Service (AWS) platform and similar cloud based environment in several ways. As Infinispan uses JGroups as the underlying communication technology, the majority of the configuration work is done JGroups. The default auto discovery won't work on EC2 as multicast is not allowed, but JGroups provides several other discovery protocols so we only have to choose one.
 
-[[sid-65274016_RunningInfinispanonAmazonWebServices-TCPPing%2CGossipRouter%2CS3Ping]]
+[[sid-68355070_RunningInfinispanonAmazonWebServices-TCPPing%2CGossipRouter%2CS3PING]]
 
 
-=== TCPPing, GossipRouter, S3_Ping
+=== TCPPing, GossipRouter, S3_PING
 
- The TCPPing approach contains a static list of the IP address of each member of the cluster in the JGroups configuration file. While this works it doesn't really help when cluster nodes are dynamically added to the cluster. See link:$$http://community.jboss.org/wiki/JGroupsTCPPING$$[] for more information about TCPPing. Sample TCPPing configuration 
+ The TCPPing approach contains a static list of the IP address of each member of the cluster in the JGroups configuration file. While this works it doesn't really help when cluster nodes are dynamically added to the cluster. See link:$$http://community.jboss.org/wiki/JGroupsTCPPING$$[] for more information about TCPPing. 
 
+.Sample TCPPing configuration
 
+==== 
 ----
-
-<config xmlns="urn:org:jgroups"
-     xmlns:xsi="[http://www.w3.org/2001/XMLSchema-instance]"     
-     xsi:schemaLocation="urn:org:jgroups      file:schema/JGroups-2.8.xsd">
+<config xmlns="urn:org:jgroups" xmlns:xsi="[http://www.w3.org/2001/XMLSchema-instance]"     
+     xsi:schemaLocation="urn:org:jgroups file:schema/JGroups-2.8.xsd">
       <TCP bind_port="7800" />
       <TCPPING timeout="3000"
            initial_hosts="$\{jgroups.tcpping.initial_hosts:localhost\[7800\],localhost\[7801\]\}"
@@ -31,54 +31,105 @@ Infinispan can be used on the Amazon Web Service (AWS) platform and similar clou
            retransmit_timeout="300,600,1200,2400,4800"
            discard_delivered_msgs="true"/>
       <UNICAST timeout="300,600,1200" />
-      <pbcast.STABLE stability_delay="1000" desired_avg_gossip="50000"  max_bytes="400000"/>
-      <pbcast.GMS print_local_addr="true" join_timeout="3000"   view_bundling="true"/>
-      <FC max_credits="2000000"  min_threshold="0.10"/>
-      <FRAG2 frag_size="60000"  />
+      <pbcast.STABLE
+           stability_delay="1000"
+           desired_avg_gossip="50000"
+           max_bytes="400000"/>
+      <pbcast.GMS
+           print_local_addr="true"
+           join_timeout="3000"
+           view_bundling="true"/>
+      <FC max_credits="2000000" min_threshold="0.10"/>
+      <FRAG2 frag_size="60000" />
       <pbcast.STREAMING_STATE_TRANSFER/>
 </config>
-
 ----
 
-[[sid-65274016_RunningInfinispanonAmazonWebServices-GossipRouter]]
+==== 
+[[sid-68355070_RunningInfinispanonAmazonWebServices-GossipRouter]]
 
 
 === GossipRouter
 
  Another approach is to have a central server (Gossip, which each node will be configured to contact. This central server will tell each node in the cluster about each other node. More on Gossip Router @ link:$$http://community.jboss.org/docs/DOC-10890$$[http://www.jboss.org/community/wiki/JGroupsGossipRouter] 
 
- The address (ip:port) that the Gossip router is listening on can be injected into the JGroups configuration used by Infinispan. To do this pass the gossip routers address as a system property to the JVM e.g. -DGossipRouterAddress="10.10.2.4[12001]" and reference this property in the JGroups configuration that Infinispan is using e.g. _Sample JGroups configuration for Gossip Router_ 
+The address (ip:port) that the Gossip router is listening on can be injected into the JGroups configuration used by Infinispan. To do this pass the gossip routers address as a system property to the JVM e.g. -DGossipRouterAddress="10.10.2.4[12001]" and reference this property in the JGroups configuration that Infinispan is using e.g.
+
 
- &lt;config&gt;     &lt;TCP bind_port="7800" /&gt;     &lt;TCPGOSSIP timeout="3000" initial_hosts="${GossipRouterAddress}" num_initial_members="3" /&gt; . . &lt;/config&gt; 
+----
 
-[[sid-65274016_RunningInfinispanonAmazonWebServices-S3Ping]]
+<config>
+    <TCP bind_port="7800" />
+    <TCPGOSSIP timeout="3000" initial_hosts="$\{GossipRouterAddress\}" num_initial_members="3" />
+.
+.
+</config>
 
+----
 
-=== S3_Ping
+[[sid-68355070_RunningInfinispanonAmazonWebServices-S3PING]]
 
- Finally you can configure your JGroups instances to use a shared storage to exchange the details of the cluster nodes. S3_ping was added to JGroups in 2.6.12 and 2.8, and allows the Amazon S3 to be used as the shared storage. It is experimental at the moment but offers another method of clustering without a central server. Be sure that you have signed up for Amazon S3 as well as EC2 to use this method. Sample S3_Ping configuration 
+
+=== S3_PING
+
+Finally you can configure your JGroups instances to use a shared storage to exchange the details of the cluster nodes. S3_PING was added to JGroups in 2.6.12 and 2.8, and allows the Amazon S3 to be used as the shared storage. It is experimental at the moment but offers another method of clustering without a central server. Be sure that you have signed up for Amazon S3 as well as EC2 to use this method.
 
 
 ----
-<?xml version="1.0" encoding="UTF-8"?><config>     <TCP bind_port="7800" />     <S3_PING secret_access_key="replace this with you secret access key" access_key="replace this with your           access key" location="replace this with your S3 bucket location" />     <MERGE2 max_interval="30000" min_interval="10000" />     <FD_SOCK />     <FD timeout="10000" max_tries="5" />     <VERIFY_SUSPECT timeout="1500" />     <pbcast.NAKACK use_mcast_xmit="false" gc_lag="0" retransmit_timeout="300,600,1200,2400,4800"          discard_delivered_msgs="true" />     <UNICAST timeout="300,600,1200,2400,3600" />     <pbcast.STABLE stability_delay="1000" desired_avg_gossip="50000" max_bytes="400000" />     <VIEW_SYNC avg_send_interval="60000" />     <pbcast.GMS print_local_addr="true" join_timeout="60000" view_bundling="true" />     <FC max_credits="20000000" min_threshold="0.10" />     <FRAG2 frag_size="60000" />     <pbcast.STATE_TRANSFER />     <pbcast.FLUSH timeout="0" /></config>
+
+<?xml version="1.0" encoding="UTF-8"?>
+<config>
+    <TCP bind_port="7800" />
+    <S3_PING
+            secret_access_key="replace this with you secret access key"
+            access_key="replace this with your access key"
+            location="replace this with your S3 bucket location" />
+    <MERGE2
+            max_interval="30000"
+            min_interval="10000" />
+    <FD_SOCK />
+    <FD timeout="10000"
+            max_tries="5" />
+    <VERIFY_SUSPECT timeout="1500" />
+    <pbcast.NAKACK
+            use_mcast_xmit="false"
+            gc_lag="0" retransmit_timeout="300,600,1200,2400,4800"
+            discard_delivered_msgs="true" />
+    <UNICAST timeout="300,600,1200,2400,3600" />
+    <pbcast.STABLE
+            stability_delay="1000"
+            desired_avg_gossip="50000"
+            max_bytes="400000" />
+    <VIEW_SYNC
+            avg_send_interval="60000" />
+    <pbcast.GMS
+            print_local_addr="true"
+            join_timeout="60000"
+            view_bundling="true" />
+    <FC max_credits="20000000"
+            min_threshold="0.10" />
+    <FRAG2 frag_size="60000" />
+    <pbcast.STATE_TRANSFER />
+    <pbcast.FLUSH timeout="0" />
+</config>
 
 ----
 
-[[sid-65274016_RunningInfinispanonAmazonWebServices-JDBCPING]]
+[[sid-68355070_RunningInfinispanonAmazonWebServices-JDBCPING]]
 
 
 === JDBC_PING
 
  A similar approach to S3_PING, but using a JDBC connection to a shared database. On EC2 that is quite easy using Amazon RDS. See the link:$$http://community.jboss.org/wiki/JDBCPING$$[JDBC_PING Wiki page] for details. 
 
-[[sid-65274016_RunningInfinispanonAmazonWebServices-Creatingaclusternodewithdistributedcache]]
+[[sid-68355070_RunningInfinispanonAmazonWebServices-Creatingaclusternodewithdistributedcache]]
 
 
 === Creating a cluster node with distributed cache
 
- _Creating a cluster_ 
-
+.Creating a cluster
 
+==== 
 ----
 
 GlobalConfiguration gc = GlobalConfiguration.getClusteredDefault();
@@ -104,3 +155,4 @@ cache_manager = new DefaultCacheManager(gc, c, false);
 
 ----
 
+==== 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-31-Eviction_Examples.adoc b/documentation/src/main/asciidoc/user_guide/chapter-31-Eviction_Examples.adoc
index 1d32b17..c9f8d52 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-31-Eviction_Examples.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-31-Eviction_Examples.adoc
@@ -1,8 +1,8 @@
-[[sid-65274017]]
+[[sid-68355071]]
 
 ==  Eviction Examples
 
-[[sid-65274017_EvictionExamples-Introduction]]
+[[sid-68355071_EvictionExamples-Introduction]]
 
 
 === Introduction
@@ -19,7 +19,7 @@
 
 .  Four eviction strategies are shipped, link:$$http://docs.jboss.org/infinispan/5.0/apidocs/org/infinispan/eviction/EvictionStrategy.html#NONE$$[EvictionStrategy.NONE] , link:$$http://docs.jboss.org/infinispan/5.0/apidocs/org/infinispan/eviction/EvictionStrategy.html#LRU$$[EvictionStrategy.LRU] , link:$$http://docs.jboss.org/infinispan/5.0/apidocs/org/infinispan/eviction/EvictionStrategy.html#UNORDERED$$[EvictionStrategy.UNORDERED] , and link:$$http://docs.jboss.org/infinispan/5.0/apidocs/org/infinispan/eviction/EvictionStrategy.html#LIRS$$[EvictionStrategy.LIRS] . 
 
-[[sid-65274017_EvictionExamples-Configuration]]
+[[sid-68355071_EvictionExamples-Configuration]]
 
 
 === Configuration
@@ -60,7 +60,7 @@ Configuration c = new ConfigurationBuilder().eviction().strategy(EvictionStrateg
 
 ----
 
-[[sid-65274017_EvictionExamples-Defaultvalues]]
+[[sid-68355071_EvictionExamples-Defaultvalues]]
 
 
 ==== Default values
@@ -84,7 +84,7 @@ Eviction is disabled by default.  If enabled (using an empty &lt;eviction /&gt;
 
 Expiration lifespan and maxIdle both default to -1.
 
-[[sid-65274017_EvictionExamples-Usingexpiration]]
+[[sid-68355071_EvictionExamples-Usingexpiration]]
 
 
 ==== Using expiration
@@ -118,7 +118,7 @@ cache.put("riesling", rieslingPrice, 5,
 
 ----
 
-[[sid-65274017_EvictionExamples-Evictiondesigns]]
+[[sid-68355071_EvictionExamples-Evictiondesigns]]
 
 
 === Eviction designs
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-32-Clustering_modes.adoc b/documentation/src/main/asciidoc/user_guide/chapter-32-Clustering_modes.adoc
index 9df2f34..be2147d 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-32-Clustering_modes.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-32-Clustering_modes.adoc
@@ -1,22 +1,22 @@
-[[sid-65274019]]
+[[sid-68355074]]
 
 ==  Clustering modes
 
-[[sid-65274019_Clusteringmodes-Introduction]]
+[[sid-68355074_Clusteringmodes-Introduction]]
 
 
 === Introduction
 
 Infinispan can be configured to be either local (standalone) or clustered. If in a cluster, the cache can be configured to replicate changes to all nodes, to invalidate changes across nodes and finally to be used in distributed mode - state changes are replicated to a small subset of nodes enough to be fault tolerant but not to many nodes to prevent scalability.
 
-[[sid-65274019_Clusteringmodes-LocalMode]]
+[[sid-68355074_Clusteringmodes-LocalMode]]
 
 
 === Local Mode
 
  While Infinispan is particularly interesting in clustered mode, it also offers a very capable local mode, where it acts as a simple, in-memory data cache similar to JBoss Cache and EHCache. But why would one use a local cache rather than a map? Caches offer a lot of features over and above a simple map, including write-through and write-behind caching to persist data, eviction of entries to prevent running out of memory, and support for expirable entries. Infinispan, specifically, is built around a high-performance, read-biased data container which uses modern techniques like MVCC locking - which buys you non-blocking, thread-safe reads even when concurrent writes are taking place. Infinispan also makes heavy use of compare-and-swap and other lock-free algorithms, making it ideal for high-throughput, multi-CPU/multi-core environments. Further, Infinispan's Cache API extends the JDK's ConcurrentMap - making migration from a map to Infinispan trivial. For more details refer to link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737159$$[Non-clustered, LOCAL mode] section. 
 
-[[sid-65274019_Clusteringmodes-ReplicatedMode]]
+[[sid-68355074_Clusteringmodes-ReplicatedMode]]
 
 
 === Replicated Mode
@@ -35,7 +35,7 @@ Replication can be synchronous or asynchronous. Use of either one of the options
 
 Asynchronous replication is faster (no caller blocking), because synchronous replication requires acknowledgments from all nodes in a cluster that they received and applied the modification successfully (round-trip time). However, when a synchronous replication returns successfully, the caller knows for sure that all modifications have been applied to all cache instances, whereas this is not be the case with asynchronous replication. With asynchronous replication, errors are simply written to a log. Even when using transactions, a transaction may succeed but replication may not succeed on all cache instances.
 
-[[sid-65274019_Clusteringmodes-InvalidationMode]]
+[[sid-68355074_Clusteringmodes-InvalidationMode]]
 
 
 === Invalidation Mode
@@ -56,7 +56,7 @@ Invalidation messages are sent after each modification (no transactions or batch
 
 Invalidation too can be synchronous or asynchronous, and just as in the case of replication, synchronous invalidation blocks until all caches in the cluster receive invalidation messages and have evicted stale data while asynchronous invalidation works in a 'fire-and-forget' mode, where invalidation messages are broadcast but doesn't block and wait for responses.
 
-[[sid-65274019_Clusteringmodes-DistributionMode]]
+[[sid-68355074_Clusteringmodes-DistributionMode]]
 
 
 === Distribution Mode
@@ -65,7 +65,7 @@ Invalidation too can be synchronous or asynchronous, and just as in the case of
 
  _NOTE:_ This behavior is due to change in Infinispan 5.3, where just a single GET call is made.  See link:$$https://issues.jboss.org/browse/ISPN-825$$[ISPN-825] . 
 
-[[sid-65274019_Clusteringmodes-Readconsistency]]
+[[sid-68355074_Clusteringmodes-Readconsistency]]
 
 
 ==== Read consistency
@@ -82,7 +82,7 @@ image::[]
 
                                                        Figure 3. Distribution mode
 
-[[sid-65274019_Clusteringmodes-VirtualNodesImprovingthedistributionofdata]]
+[[sid-68355074_Clusteringmodes-VirtualNodesImprovingthedistributionofdata]]
 
 
 ==== Virtual Nodes - Improving the distribution of data
@@ -147,7 +147,7 @@ new ConfigurationBuilder()
 
 TODO Add notes on how to select number of virtual nodes.
 
-[[sid-65274019_Clusteringmodes-L1Caching]]
+[[sid-68355074_Clusteringmodes-L1Caching]]
 
 
 === L1 Caching
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-33-Using_Infinispan_as_a_Spring_Cache_provider.adoc b/documentation/src/main/asciidoc/user_guide/chapter-33-Using_Infinispan_as_a_Spring_Cache_provider.adoc
index 0e63dfa..934b2c9 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-33-Using_Infinispan_as_a_Spring_Cache_provider.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-33-Using_Infinispan_as_a_Spring_Cache_provider.adoc
@@ -1,4 +1,4 @@
-[[sid-65274020]]
+[[sid-68355076]]
 
 ==  Using Infinispan as a Spring Cache provider
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-34-Distributed_Data_Stream_Processing_Framework_In_Infinispan.adoc b/documentation/src/main/asciidoc/user_guide/chapter-34-Distributed_Data_Stream_Processing_Framework_In_Infinispan.adoc
index e28da78..75d9d75 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-34-Distributed_Data_Stream_Processing_Framework_In_Infinispan.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-34-Distributed_Data_Stream_Processing_Framework_In_Infinispan.adoc
@@ -1,4 +1,4 @@
-[[sid-65274021]]
+[[sid-68355077]]
 
 ==  Distributed Data Stream Processing Framework In Infinispan
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-35-Per_Invocation_Flags.adoc b/documentation/src/main/asciidoc/user_guide/chapter-35-Per_Invocation_Flags.adoc
index b1ccbb6..e03d7f5 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-35-Per_Invocation_Flags.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-35-Per_Invocation_Flags.adoc
@@ -1,4 +1,4 @@
-[[sid-65274022]]
+[[sid-68355078]]
 
 ==  Invocation Flags
 
@@ -6,7 +6,7 @@
 
  What Infinispan is doing here is effectively saying that when putting data read from external read, it will use an almost-zero lock acquisition time and that if the locks cannot be acquired, it will fail silently without throwing any exception related to lock acquisition. It also specifies that regardless of the cache mode, if the cache is clustered, it will replicate asynchronously and so won't wait for responses from other nodes. The combination of all these flags make this kind of operation very efficient, and the efficiency comes from the fact this type of _putForExternalRead_ calls are used with the knowledge that client can always head back to a persistent store of some sorts to retrieve the data that should be stored in memory. So, any attempt to store the data is just a best effort and if not possible, the client should try again if there's a cache miss. 
 
-[[sid-65274022_Per-InvocationFlags-Examples]]
+[[sid-68355078_Per-InvocationFlags-Examples]]
 
 
 === Examples
@@ -24,7 +24,7 @@ cache.getAdvancedCache()
 
  It's worth noting that these flags are only active for the duration of the cache operation. If the same flags need to be used in several invocations, even if they're in the same transaction, link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/AdvancedCache.html#withFlags(org.infinispan.context.Flag...)$$[withFlags()] needs to be called repeatedly. Clearly, if the cache operation is to be replicated in another node, the flags are carried over to the remote nodes as well. 
 
-[[sid-65274022_Per-InvocationFlags-DecoratedCache]]
+[[sid-68355078_Per-InvocationFlags-DecoratedCache]]
 
 
 === DecoratedCache
@@ -43,7 +43,7 @@ strictlyLocal.put("local_3", "only");
 
 This approach makes your code more readable.
 
-[[sid-65274022_Per-InvocationFlags-Suppressingreturnvaluesfromaput%28%29orremove%28%29]]
+[[sid-68355078_Per-InvocationFlags-Suppressingreturnvaluesfromaput%28%29orremove%28%29]]
 
 
 === Suppressing return values from a put() or remove()
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-36-Key_affinity_service.adoc b/documentation/src/main/asciidoc/user_guide/chapter-36-Key_affinity_service.adoc
index 395049f..ddd22b0 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-36-Key_affinity_service.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-36-Key_affinity_service.adoc
@@ -1,15 +1,15 @@
-[[sid-65274023]]
+[[sid-68355079]]
 
 ==  Key affinity service
 
-[[sid-65274023_Keyaffinityservice-Introduction]]
+[[sid-68355079_Keyaffinityservice-Introduction]]
 
 
 === Introduction
 
  The key affinity service solves the following problem: for a distributed Infinispan cluster one wants to make sure that a value is placed in a certain node. Based on a supplied cluster link:$$http://docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/remoting/transport/Address.html$$[address] identifying the node, the service returns a key that will be hashed to that particular node. 
 
-[[sid-65274023_Keyaffinityservice-API]]
+[[sid-68355079_Keyaffinityservice-API]]
 
 
 === API
@@ -36,7 +36,7 @@ cache.put(localKey, "yourValue");
 
 The service is started at step 2: after this point it uses the supplied Excutor to generate and queue keys. At step 3, we obtain a key for this service, and use it at step 4, with that guarantee that it is distributed in node identified by cacheManager.getAddress().
 
-[[sid-65274023_Keyaffinityservice-Lifecycle]]
+[[sid-68355079_Keyaffinityservice-Lifecycle]]
 
 
 === Lifecycle
@@ -58,7 +58,7 @@ The KeyAffinityService, once started, needs to be explicitly stopped. This stops
 
 The only situation in which KeyAffinityService stops by itself is when the cache manager with wich it was registered is shutdown.
 
-[[sid-65274023_Keyaffinityservice-Topologychanges]]
+[[sid-68355079_Keyaffinityservice-Topologychanges]]
 
 
 === Topology changes
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-37-Transaction_recovery.adoc b/documentation/src/main/asciidoc/user_guide/chapter-37-Transaction_recovery.adoc
index 359d558..be5d24c 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-37-Transaction_recovery.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-37-Transaction_recovery.adoc
@@ -1,20 +1,20 @@
-[[sid-65274024]]
+[[sid-68355080]]
 
 ==  Transaction recovery
 
-[[sid-65274024_Transactionrecovery-]]
+[[sid-68355080_Transactionrecovery-]]
 
 
 === 
 
-[[sid-65274024_Transactionrecovery-Whentouserecovery]]
+[[sid-68355080_Transactionrecovery-Whentouserecovery]]
 
 
 === When to use recovery
 
 Consider a distributed transaction in which money are transfered from an account stored in the database to an account stored in Infinispan. When TransactionManager.commit() is invoked, both resources prepare successfully(1st phase). During commit (2nd phase), the database successfully applies the changes whilst Infinispan fails before receiving the commit request from the TransactionManager. At this point the system is in an inconsistent state: money are taken from the datbase account but not visible yet in Infinispan(locks are only released during 2nd phase of 2PC). Recovery deals with this situation to make sure data in both the database and Infinispan ends up in a consistent state.
 
-[[sid-65274024_Transactionrecovery-Howdoesitwork]]
+[[sid-68355080_Transactionrecovery-Howdoesitwork]]
 
 
 === How does it work
@@ -23,7 +23,7 @@ Recovery is coordinated by the TransactionManager (TM). The TM works with Infini
 
  Knowing the in-doubt transaction ids, the SA can now connect to the Infinispan cluster and replay the commit of transactions or force the rollback. Infinispan provides JMX tooling for this - this is explained extensively in the link:$$http://community.jboss.org/docs/DOC-16646?uniqueTitle=false#Reconciliate_state$$[Reconciliate state] section. 
 
-[[sid-65274024_Transactionrecovery-Configuringrecovery%C2%A0%C2%A0%C2%A0]]
+[[sid-68355080_Transactionrecovery-Configuringrecovery%C2%A0%C2%A0%C2%A0]]
 
 
 === Configuring recovery   
@@ -57,14 +57,14 @@ boolean isRecoveryEnabled = configuration.isTransactionRecoveryEnabled();
 
 Recovery can be enabled/disabled o a per cache level: e..g it is possible to have a transaction spanning a cache that is has it enabled and another one that doesn't.
 
-[[sid-65274024_Transactionrecovery-EnableJMXsupport]]
+[[sid-68355080_Transactionrecovery-EnableJMXsupport]]
 
 
 ==== Enable JMX support
 
  _Important:_ In order to be able to use JMX for managing recovery JMX support must be explicitly enabled. More about enabling JMX link:$$http://community.jboss.org/docs/DOC-14865#Enabling_JMX_Statistics$$[here] . 
 
-[[sid-65274024_Transactionrecovery-Recoverycache]]
+[[sid-68355080_Transactionrecovery-Recoverycache]]
 
 
 ==== Recovery cache
@@ -75,7 +75,7 @@ This in-doubt transaction data is held within a local cache: this allows one to
 
  It is possible (though not mandated) to share same recovery cache between all the Infinispan caches that have recovery enabled.  If default recovery cache is overridden then the specified recovery cache must use a link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/transaction/lookup/class-use/TransactionManagerLookup.html$$[TransactionManagerLookup] that returns a different TM than the one used by the cache itself. 
 
-[[sid-65274024_Transactionrecovery-IntegrationwiththeTM]]
+[[sid-68355080_Transactionrecovery-IntegrationwiththeTM]]
 
 
 === Integration with the TM
@@ -90,7 +90,7 @@ XAResource xar = cache.getAdvancedCache().getXAResource(); 
 
  Note: It is a common practice to run the recovery in a different process than the one running the transaction. At the moment it is not possible to do this with infinispan: the recovery must be run from the same process where the infinispan instance exists. This limitation will be dropped once link:$$https://issues.jboss.org/browse/ISPN-375$$[ransactions over HotRod are available] . 
 
-[[sid-65274024_Transactionrecovery-Reconciliatestate]]
+[[sid-68355080_Transactionrecovery-Reconciliatestate]]
 
 
 === conciliate state
@@ -125,14 +125,14 @@ image::[]
 
  _Note:_ All JMX operations described above can be executed on any node, disregarding where the transaction originated. 
 
-[[sid-65274024_Transactionrecovery-Forcecommit%2FrollbackbasedonXID]]
+[[sid-68355080_Transactionrecovery-Forcecommit%2FrollbackbasedonXID]]
 
 
 ==== Force commit/rollback based on XID
 
 XID-based JMX operations for forcing in-doubt transactions' commit/rollback are available as well: these methods receive byte[] arrays describing the XID instead of the number associated with the transactions (as previously described at step 2). These can be useful e.g. if one wants to set up an automatic completion job for certain in-doubt transactions. This process is plugged into TM's recovery and has access to the TM's XID objects.
 
-[[sid-65274024_Transactionrecovery-Wanttoknowmore%3F]]
+[[sid-68355080_Transactionrecovery-Wanttoknowmore%3F]]
 
 
 === Want to know more?
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-38-Implementing_standalone_JPA_JTA_Hibernate_application_outside_J2EE_server_using_Infinispan_2nd_level_cache.adoc b/documentation/src/main/asciidoc/user_guide/chapter-38-Implementing_standalone_JPA_JTA_Hibernate_application_outside_J2EE_server_using_Infinispan_2nd_level_cache.adoc
index 564424b..85689da 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-38-Implementing_standalone_JPA_JTA_Hibernate_application_outside_J2EE_server_using_Infinispan_2nd_level_cache.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-38-Implementing_standalone_JPA_JTA_Hibernate_application_outside_J2EE_server_using_Infinispan_2nd_level_cache.adoc
@@ -1,8 +1,8 @@
-[[sid-65274025]]
+[[sid-68355081]]
 
 ==  Implementing standalone JPA JTA Hibernate application outside J2EE server using Infinispan 2nd level cache
 
-[[sid-65274025_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-Introduction]]
+[[sid-68355081_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-Introduction]]
 
 
 === Introduction
@@ -37,7 +37,7 @@ A very important aspect is not forgetting to couple the datasource with your tra
 ==== 
 
 
-[[sid-65274025_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-JBossTransactions]]
+[[sid-68355081_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-JBossTransactions]]
 
 
 === JBoss Transactions
@@ -237,7 +237,7 @@ The content of the corresponding complete persistence.xml:
 
 ----
 
-[[sid-65274025_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-JOTM]]
+[[sid-68355081_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-JOTM]]
 
 
 === JOTM
@@ -374,12 +374,12 @@ Adjust following 2 properties in your persistence.xml:
 
  For using the JTA Hibernate application as servlet in tomcat please read  link:$$http://jotm.objectweb.org/current/jotm/doc/howto-tomcat-jotm.html$$[] and also link:$$https://forum.hibernate.org/viewtopic.php?f=1&amp;t=1003866$$[] 
 
-[[sid-65274025_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-Bitronix]]
+[[sid-68355081_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-Bitronix]]
 
 
 === Bitronix
 
- The Transaction Manager comes bundled with a fake in memory jndi-implementation which is ideal for standalone purpose. To integrate with Infinispan I did need a ad-hoc pre-alpha improvement (see attached link:$$https://docs.jboss.org/author/download/attachments/65274025/btm-ispn.jar?version=1&amp;modificationDate=1308852871000$$[btm-ispn.jar] by courtesy of  Mr. Ludivic Orban). BitronixTM offers the so-called Last Resource Commit optimization (aka Last Resource Gambit or Last Agent optimization) and it allows a single non-XA database to participate in a XA transaction by cleverly ordering the resources. "Last Resource Commit" is not part of the XA spec as it doesn't cover the transaction-recovery aspect, so if your database does not support XA (or if you don't wish to have the Xa-driver performance overhead against the plain jdbc) then the "Last Resource Commit" feature should be ideal for the combination 1 single database plus infinispan. 
+ The Transaction Manager comes bundled with a fake in memory jndi-implementation which is ideal for standalone purpose. To integrate with Infinispan I did need a ad-hoc pre-alpha improvement (see attached link:$$https://docs.jboss.org/author/download/attachments/68355081/btm-ispn.jar?version=1&amp;modificationDate=1308852871000$$[btm-ispn.jar] by courtesy of  Mr. Ludivic Orban). BitronixTM offers the so-called Last Resource Commit optimization (aka Last Resource Gambit or Last Agent optimization) and it allows a single non-XA database to participate in a XA transaction by cleverly ordering the resources. "Last Resource Commit" is not part of the XA spec as it doesn't cover the transaction-recovery aspect, so if your database does not support XA (or if you don't wish to have the Xa-driver performance overhead against the plain jdbc) then the "Last Resource Commit" feature should be ideal for the combination 1 single database plus infinispan. 
 
 
 ----
@@ -480,7 +480,7 @@ Adjust following 2 properties in your corresponding persistence.xml:
 
 ----
 
-[[sid-65274025_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-Atominkos]]
+[[sid-68355081_ImplementingstandaloneJPAJTAHibernateapplicationoutsideJ2EEserverusingInfinispan2ndlevelcache-Atominkos]]
 
 
 === Atominkos
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-39-Infinispan_Maven_Archetypes.adoc b/documentation/src/main/asciidoc/user_guide/chapter-39-Infinispan_Maven_Archetypes.adoc
index ded565b..0c43e55 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-39-Infinispan_Maven_Archetypes.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-39-Infinispan_Maven_Archetypes.adoc
@@ -1,84 +1,93 @@
-[[sid-65274026]]
+[[sid-68355082]]
 
 ==  Infinispan Maven Archetypes
 
- Infinispan currently has 2 separate Maven link:$$http://maven.apache.org/guides/introduction/introduction-to-archetypes.html$$[archetypes] you can use to create a skeleton project and get started using Infinispan.  This is an easy way to get started using Infinispan as the archetype generates sample code, a sample Maven pom.xml with necessary depedencies, etc. 
+ Infinispan currently has 2 separate Maven link:$$http://maven.apache.org/guides/introduction/introduction-to-archetypes.html$$[archetypes] you can use to create a skeleton project and get started using Infinispan.  This is an easy way to get started using Infinispan as the archetype generates sample code, a sample Maven pom.xml with necessary depedencies, etc. 
 
 
-----
-NOTE:  You don't need to have any experience with or knowledge of Maven's Archetypes to use this!  Just follow the simple steps below.
-----
+.
+****
+NOTE:  You don't need to have any experience with or knowledge of Maven's Archetypes to use this!  Just follow the simple steps below.
 
 
-* 
-* 
-----
-WARNING: These archetypes have only been tested with <a href="http://maven.apache.org/docs/3.0.1/release-notes.html">Maven 3</a>.  Please report back if you have any success with using Maven 2.
-----
+****
+
+
+
+.
+****
+ WARNING: These archetypes have only been tested with link:$$http://maven.apache.org/docs/3.0.1/release-notes.html$$[Maven 3] .  Please report back if you have any success with using Maven 2. 
+
+
+****
 
-Starting a new project
 
-Use the newproject-archetype project.  The simple command below will get you started, and
+[[sid-68355082_InfinispanMavenArchetypes-Startinganewproject]]
+
+
+=== Starting a new project
+
+Use the newproject-archetype project.  The simple command below will get you started, and
 
 
 ----
 $ mvn archetype:generate \
     -DarchetypeGroupId=org.infinispan.archetypes \
     -DarchetypeArtifactId=newproject-archetype \
-    -DarchetypeVersion=1.0.10 \
+    -DarchetypeVersion=1.0.13 \
     -DarchetypeRepository=http://repository.jboss.org/nexus/content/groups/public
 
 ----
 
- You will be prompted for a few things, including the _artifactId_ , _groupId_ and _version_ of your new project.  And that's it - you're ready to go! 
+ You will be prompted for a few things, including the _artifactId_ , _groupId_ and _version_ of your new project.  And that's it - you're ready to go! 
 
-[[sid-65274026_InfinispanMavenArchetypes-Playingwithyournewproject]]
+[[sid-68355082_InfinispanMavenArchetypes-Playingwithyournewproject]]
 
 
-=== Playing with your new project
+==== Playing with your new project
 
- The skeleton project ships with a sample application class, interacting with Infinispan.  You should open this new project in your IDE - most good IDEs such as IntelliJ and Eclipse allow you to import Maven projects, see link:$$http://www.jetbrains.com/idea/webhelp/importing-maven-project.html$$[this guide] and link:$$http://m2eclipse.sonatype.org/$$[this guide] .  Once you open your project in your IDE, you should examine the generated classes and read through the comments. 
+ The skeleton project ships with a sample application class, interacting with Infinispan.  You should open this new project in your IDE - most good IDEs such as IntelliJ and Eclipse allow you to import Maven projects, see link:$$http://www.jetbrains.com/idea/webhelp/importing-maven-project.html$$[this guide] and link:$$http://m2eclipse.sonatype.org/$$[this guide] .  Once you open your project in your IDE, you should examine the generated classes and read through the comments. 
 
-[[sid-65274026_InfinispanMavenArchetypes-Onthecommandline...]]
+[[sid-68355082_InfinispanMavenArchetypes-Onthecommandline...]]
 
 
-=== On the command line...
+==== On the command line...
 
-Try running
+ Try running 
 
 
 ----
 $ mvn install -Prun
 ----
 
-in your newly generated project!  This runs the main() method in the generated application class.
+in your newly generated project!  This runs the main() method in the generated application class.
 
-[[sid-65274026_InfinispanMavenArchetypes-WritingatestcaseforInfinispan]]
+[[sid-68355082_InfinispanMavenArchetypes-WritingatestcaseforInfinispan]]
 
 
 === Writing a test case for Infinispan
 
 This archetype is useful if you wish to contribute a test to the Infinispan project and helps you get set up to use Infinispan's testing harness and related tools.
 
-Use
+ Use 
 
 
 ----
 $ mvn archetype:generate \
     -DarchetypeGroupId=org.infinispan.archetypes \
     -DarchetypeArtifactId=testcase-archetype \
-    -DarchetypeVersion=1.0.10 \
+    -DarchetypeVersion=1.0.13 \
     -DarchetypeRepository=http://repository.jboss.org/nexus/content/groups/public
 ----
 
-As above, this will prompt you for project details and again as above, you should open this project in your IDE.  Once you have done so, you will see some sample tests written for Infinispan making use of Infinispan's test harness and testing tools along with extensive comments and links for further reading.
+As above, this will prompt you for project details and again as above, you should open this project in your IDE.  Once you have done so, you will see some sample tests written for Infinispan making use of Infinispan's test harness and testing tools along with extensive comments and links for further reading.
 
-[[sid-65274026_InfinispanMavenArchetypes-Onthecommandline...x]]
+[[sid-68355082_InfinispanMavenArchetypes-Onthecommandline...x]]
 
 
 ==== On the command line...
 
-Try running
+ Try running 
 
 
 ----
@@ -87,14 +96,14 @@ $ mvn test
 
 in your newly generated project to run your tests.
 
-The generated project has a few different profiles you can use as well, using Maven's -P flag.  E.g.,
+The generated project has a few different profiles you can use as well, using Maven's -P flag.  E.g.,
 
 
 ----
 $ mvn test -Pudp
 ----
 
-[[sid-65274026_InfinispanMavenArchetypes-Availableprofiles]]
+[[sid-68355082_InfinispanMavenArchetypes-Availableprofiles]]
 
 
 ==== Available profiles
@@ -110,31 +119,33 @@ The profiles available in the generated sample project are:
 
 *  jbosstm: Use the embedded link:$$http://www.jboss.org/jbosstm$$[JBoss Transaction Manager] rather than Infinispan's dummy test transaction manager 
 
-[[sid-65274026_InfinispanMavenArchetypes-ContributingtestsbacktoInfinispan]]
+[[sid-68355082_InfinispanMavenArchetypes-ContributingtestsbacktoInfinispan]]
 
 
 ==== Contributing tests back to Infinispan
 
- If you have written a functional, unit or stress test for Infinispan and want to contribute this back to Infinispan, your best bet is to link:$$https://github.com/infinispan/infinispan$$[fork the Infinispan sources on GitHub] .  The test you would have prototyped and tested in an isolated project created using this archetype can be simply dropped in to Infinispan's test suite.  Make your changes, add your test, prove that it fails even on Infinispan's upstream source tree and issue a link:$$http://help.github.com/pull-requests/$$[pull request] . 
+ If you have written a functional, unit or stress test for Infinispan and want to contribute this back to Infinispan, your best bet is to link:$$https://github.com/infinispan/infinispan$$[fork the Infinispan sources on GitHub] .  The test you would have prototyped and tested in an isolated project created using this archetype can be simply dropped in to Infinispan's test suite.  Make your changes, add your test, prove that it fails even on Infinispan's upstream source tree and issue a link:$$http://help.github.com/pull-requests/$$[pull request] . 
 
 
-----
-TIP: New to working with Infinispan and GitHub?  Want to know how best to work with the repositories and contribute code?  Read <a __default_attr="16089" __jive_macro_name="document" _modifiedtitle="Infinispan and GitHub" class="jive_macro jive_macro_document" href="javascript:;" modifiedtitle="Infinispan and GitHub" title="Infinispan and GitHub"></a>
-----
+.
+****
+ TIP: New to working with Infinispan and GitHub?  Want to know how best to work with the repositories and contribute code?  Read link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=68355224$$[Infinispan and GitHub] 
+
+
+****
 
 
-* 
-* [[sid-65274026_InfinispanMavenArchetypes-Versions]]
+[[sid-68355082_InfinispanMavenArchetypes-Versions]]
 
 
 === Versions
 
-The archetypes generate poms with dependencies to specific versions of Infinispan.  You should edit these generated poms by hand to point to other versions of Infinispan that you are interested in.
+The archetypes generate poms with dependencies to specific versions of Infinispan.  You should edit these generated poms by hand to point to other versions of Infinispan that you are interested in.
 
-[[sid-65274026_InfinispanMavenArchetypes-SourceCode]]
+[[sid-68355082_InfinispanMavenArchetypes-SourceCode]]
 
 
 === Source Code
 
- The source code used to generate these archetypes are link:$$https://github.com/infinispan/infinispan-archetypes$$[on GitHub] .  If you wish to enhance and contribute back to the project, fork away! 
+ The source code used to generate these archetypes are link:$$https://github.com/infinispan/infinispan-archetypes$$[on GitHub] .  If you wish to enhance and contribute back to the project, fork away! 
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-4-New_in_Infinispan_5_2_0.adoc b/documentation/src/main/asciidoc/user_guide/chapter-4-New_in_Infinispan_5_2_0.adoc
index 1df5e7d..b762548 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-4-New_in_Infinispan_5_2_0.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-4-New_in_Infinispan_5_2_0.adoc
@@ -1,4 +1,4 @@
-[[sid-65273977_UserGuide-NewinInfinispan5.2.0]]
+[[sid-68355028_UserGuide-NewinInfinispan5.2.0]]
 
 ==  New in Infinispan 5.2.0
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-40-Accessing_data_in_Infinispan_via_RESTful_interface.adoc b/documentation/src/main/asciidoc/user_guide/chapter-40-Accessing_data_in_Infinispan_via_RESTful_interface.adoc
index 0c3000b..3c93a58 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-40-Accessing_data_in_Infinispan_via_RESTful_interface.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-40-Accessing_data_in_Infinispan_via_RESTful_interface.adoc
@@ -1,4 +1,4 @@
-[[sid-65274029]]
+[[sid-68355085]]
 
 ==  Accessing data in Infinispan via RESTful interface
 
@@ -6,30 +6,30 @@
 .TODO Gliffy image title empty
 image::[]
 
- _Standards_ Red Hat is working towards standardization of the REST API as a part of the link:$$http://www.rest-star.org$$[REST-*] effort.  To participate in this standard, please visit link:$$http://groups.google.com/group/reststar-caching$$[this Google Group] 
+ _Standards_ Red Hat is working towards standardization of the REST API as a part of the link:$$http://www.rest-star.org$$[REST-*] effort.  To participate in this standard, please visit link:$$http://groups.google.com/group/reststar-caching$$[this Google Group] 
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-Puttingdatain]]
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-Puttingdatain]]
 
 
 === Putting data in
 
  HTTP PUT and POST methods are used to place data in the cache - the data being the body of the request (the data can be anything you like). It is important that a Content-Type header is set. 
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-PUT%2F%5C%2F%5C]]
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-PUT%2F%5C%2F%5C]]
 
 
 ==== PUT /{cacheName}/{cacheKey}
 
  A PUT request of the above URL form will place the payload (body) in the given cache, with the given key (the named cache must exist on the server). For example link:$$http://someserver/hr/payRoll/3$$[] (in which case "hr" is the cache name, and "payRoll/3" is the key). Any existing data will be replaced, and Time-To-Live and Last-Modified values etc will updated (if applicable). 
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-POST%2F%5C%2F%5C]]
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-POST%2F%5C%2F%5C]]
 
 
 ==== POST /{cacheName}/{cacheKey}
 
  Exactly the same as PUT, only if a value in a cache/key already exists, it will return a Http CONFLICT status (and the content will not be updated). 
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-Headers%3A]]
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-Headers%3A]]
 
 
 ==== Headers:
@@ -79,21 +79,41 @@ image::[]
 ==== 
 
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-Gettingdatabackout]]
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-Gettingdatabackout]]
 
 
 === Getting data back out
 
  HTTP GET and HEAD are used to retrieve data from entries. 
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-GET%2F%5C%2F%5C]]
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-GET%2F%5C%2F%5C]]
 
 
 ==== GET /{cacheName}/{cacheKey}
 
- This will return the data found in the given cacheName, under the given key - as the body of the response. A Content-Type header will be supplied which matches what the data was inserted as (other then if it is a Java object, see below). Browsers can use the cache directly of course (eg as a CDN). An link:$$http://en.wikipedia.org/wiki/HTTP_ETag$$[ETag] will be returned unique for each entry, as will the Last-Modified header field indicating the state of the data at the given URL. ETags allow browsers (and other clients) to ask for data only in the case where it has changed (to save on bandwidth) - this is standard HTTP and is honoured by Infinispan. 
+ This will return the data found in the given cacheName, under the given key - as the body of the response. A Content-Type header will be supplied which matches what the data was inserted as (other then if it is a Java object, see below). Browsers can use the cache directly of course (eg as a CDN). An link:$$http://en.wikipedia.org/wiki/HTTP_ETag$$[ETag] will be returned unique for each entry, as will the Last-Modified and Expires headers field indicating the state of the data at the given URL. ETags allow browsers (and other clients) to ask for data only in the case where it has changed (to save on bandwidth) - this is standard HTTP and is honoured by Infinispan. 
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-HEAD%2F%5C%2F%5C]]
+Since Infinispan 5.3 it is possible to obtain additional information by appending the "extended" parameter on the query string, as follows:
+
+
+----
+
+GET /cacheName/cacheKey?extended
+
+----
+
+This will return the following custom headers:
+
+
+* Cluster-Primary-Owner: the node name of the primary owner for this key
+
+
+* Cluster-Node-Name: the JGroups node name of the server that has handled the request
+
+
+* Cluster-Physical-Address: the physical JGroups address of the server that has handled the request.
+
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-HEAD%2F%5C%2F%5C]]
 
 
 ==== HEAD /{cacheName}/{cacheKey}
@@ -104,7 +124,7 @@ The same as GET, only no content is returned (only the header fields). You will
 [WARNING]
 .Prior to Infinispan 4.2
 ==== 
- The behaivour was as follows: If the data in the grid is a Java object - there are a few options in how it can be returned, which use the HTTP Accept header: 
+ The behaviour was as follows: If the data in the grid is a Java object - there are a few options in how it can be returned, which use the HTTP Accept header: 
 
 
 *  application/xml - the object will be serialized via XStream to XML representation 
@@ -119,21 +139,51 @@ The same as GET, only no content is returned (only the header fields). You will
 ==== 
 
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-Removingdata]]
+Similarly to the GET method, the HEAD method also supports returning extended information via headers. See above.
+
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-GET%2F%5C]]
+
+
+==== GET /{cacheName}
+
+This will return a list of keys present in the given cacheName as the body of the response. The format of the response can be controlled via the Accept header as follows:
+
+
+* application/xml - the list of keys will be returned in XML format.
+
+
+* application/json - the list of keys will be return in JSON format.
+
+
+* text/html - the list of keys will be returned in HTML format.
+
+
+* text/plain - the list of keys will be returned in plain text format, one key per line
+
+If the cache identified by cacheName is distributed, only the keys owned by the node handling the request will be returned. To return all keys, append the "global" parameter to the query, as follows:
+
+
+----
+
+GET /cacheName?global
+
+----
+
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-Removingdata]]
 
 
 === Removing data
 
 Data can be removed at the cache key/element level, or via a whole cache name using the HTTP delete method.
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-DELETE%2F%5C%2F%5C]]
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-DELETE%2F%5C%2F%5C]]
 
 
 ==== DELETE /{cacheName}/{cacheKey}
 
 Removes the given key name from the cache.
 
-[[sid-65274029_AccessingdatainInfinispanviaRESTfulinterface-DELETE%2F%5C]]
+[[sid-68355085_AccessingdatainInfinispanviaRESTfulinterface-DELETE%2F%5C]]
 
 
 ==== DELETE /{cacheName}
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-41-Infinispan_Distributed_Execution_Framework.adoc b/documentation/src/main/asciidoc/user_guide/chapter-41-Infinispan_Distributed_Execution_Framework.adoc
index 4f7d38c..81cdaa6 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-41-Infinispan_Distributed_Execution_Framework.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-41-Infinispan_Distributed_Execution_Framework.adoc
@@ -1,8 +1,8 @@
-[[sid-65274030]]
+[[sid-68355086]]
 
 ==  Infinispan Distributed Execution Framework
 
-[[sid-65274030_InfinispanDistributedExecutionFramework-Introduction]]
+[[sid-68355086_InfinispanDistributedExecutionFramework-Introduction]]
 
 
 === Introduction
@@ -13,7 +13,7 @@ Infinispan's distributed task executors use data from Infinispan cache nodes as
 
 Our distributed execution framework capitalizes on the fact input data in Infinispan data grid is already load balanced (in case of DIST mode). Since input data is already balanced execution tasks will be automatically balanced as well; users do not have to explicitly assign work tasks to specific Infinispan nodes. However, our framework accommodates users to specify arbitrary subset of cache keys as input for distributed execution tasks.
 
-[[sid-65274030_InfinispanDistributedExecutionFramework-DistributedCallableAPI]]
+[[sid-68355086_InfinispanDistributedExecutionFramework-DistributedCallableAPI]]
 
 
 === DistributedCallable API
@@ -42,7 +42,7 @@ public interface DistributedCallable<K, V, T> extends Callable<T> {
 
 ----
 
-[[sid-65274030_InfinispanDistributedExecutionFramework-CallableandCDI]]
+[[sid-68355086_InfinispanDistributedExecutionFramework-CallableandCDI]]
 
 
 === Callable and CDI
@@ -67,7 +67,7 @@ public interface DistributedCallable<K, V, T> extends Callable<T> {
 }
 ----
 
-[[sid-65274030_InfinispanDistributedExecutionFramework-DistributedExecutorService%2CDistributedTaskBuilderandDistributedTaskAPI]]
+[[sid-68355086_InfinispanDistributedExecutionFramework-DistributedExecutorService%2CDistributedTaskBuilderandDistributedTaskAPI]]
 
 
 === DistributedExecutorService, DistributedTaskBuilder and DistributedTask API
@@ -102,7 +102,7 @@ Boolean r = future.get();
 
 ----
 
-[[sid-65274030_InfinispanDistributedExecutionFramework-Distributedtaskfailover]]
+[[sid-68355086_InfinispanDistributedExecutionFramework-Distributedtaskfailover]]
 
 
 === Distributed task failover
@@ -159,7 +159,7 @@ Boolean r = future.get();
 
 ----
 
-[[sid-65274030_InfinispanDistributedExecutionFramework-Distributedtaskexecutionpolicy]]
+[[sid-68355086_InfinispanDistributedExecutionFramework-Distributedtaskexecutionpolicy]]
 
 
 === Distributed task execution policy
@@ -176,7 +176,7 @@ Future<Boolean> future = des.submit(distributedTask);
 Boolean r = future.get();
 ----
 
-[[sid-65274030_InfinispanDistributedExecutionFramework-Examples]]
+[[sid-68355086_InfinispanDistributedExecutionFramework-Examples]]
 
 
 === Examples
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-42-Listeners_and_Notifications.adoc b/documentation/src/main/asciidoc/user_guide/chapter-42-Listeners_and_Notifications.adoc
index 172593b..b0b40b6 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-42-Listeners_and_Notifications.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-42-Listeners_and_Notifications.adoc
@@ -1,4 +1,4 @@
-[[sid-65274031]]
+[[sid-68355087]]
 
 ==  Listeners and Notifications
 
@@ -30,7 +30,7 @@ public class PrintWhenAdded {
 
  For more comprehensive examples, please see the link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/notifications/Listener.html$$[Javadocs for @Listener] . 
 
-[[sid-65274031_ListenersandNotifications-Cachelevelnotifications]]
+[[sid-68355087_ListenersandNotifications-Cachelevelnotifications]]
 
 
 === Cache-level notifications
@@ -45,7 +45,7 @@ NOTE: In Infinispan 5.0, additional events were added.  Please refer to the <a
 
 ----
 
-[[sid-65274031_ListenersandNotifications-Cachemanagerlevelnotifications]]
+[[sid-68355087_ListenersandNotifications-Cachemanagerlevelnotifications]]
 
 
 === Cache manager-level notifications
@@ -54,7 +54,7 @@ Cache manager-level events occur on a cache manager.  These too are global and
 
  Please see the link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/notifications/cachemanagerlistener/annotation/package-summary.html$$[Javadocs  on the org.infinispan.notifications.cachemanagerlistener.annotation package] for a comprehensive list of all cache manager-level notifications,  and their respective method-level annotations. 
 
-[[sid-65274031_ListenersandNotifications-Synchronicity]]
+[[sid-68355087_ListenersandNotifications-Synchronicity]]
 
 
 === Synchronicity
@@ -68,14 +68,14 @@ public class MyAsyncListener { .... }
 
 ----
 
-[[sid-65274031_ListenersandNotifications-Asynchronousthreadpool]]
+[[sid-68355087_ListenersandNotifications-Asynchronousthreadpool]]
 
 
 ==== Asynchronous thread pool
 
  To tune the thread pool used to dispatch such asynchronous notifications, use the link:$$http://docs.jboss.org/infinispan/4.0/apidocs/config.html#ce_global_asyncListenerExecutor$$[&lt;asyncListenerExecutor /&gt;] XML element in your configuration file. 
 
-[[sid-65274031_ListenersandNotifications-ListenersonRemoteCacheManager]]
+[[sid-68355087_ListenersandNotifications-ListenersonRemoteCacheManager]]
 
 
 === Listeners on RemoteCacheManager
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-43-Eviction.adoc b/documentation/src/main/asciidoc/user_guide/chapter-43-Eviction.adoc
index e616938..70d255d 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-43-Eviction.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-43-Eviction.adoc
@@ -1,4 +1,4 @@
-[[sid-65274032]]
+[[sid-68355088]]
 
 ==  Eviction
 
@@ -15,7 +15,7 @@ Passivation is also a popular option when using eviction, so that only a single
 
  Note that eviction occurs on a _local_ basis, and is not cluster-wide.  Each node runs an eviction thread to analyse the contents of its in-memory container and decide what to evict. Eviction does not take into account the amount of free memory in the JVM as threshold to  starts evicting entries. You have to set maxEntries attribute of the eviction element to be greater than zero in order for eviction to be turned on. If maxEntries is too large you can run out of memory. maxEntries attribute will probably take some tuning in each use case. 
 
-[[sid-65274032_Eviction-Evictionin5.2]]
+[[sid-68355088_Eviction-Evictionin5.2]]
 
 
 === Eviction in 5.2
@@ -24,35 +24,35 @@ Passivation is also a popular option when using eviction, so that only a single
 
 All cache entry are evicted by piggybacking   on user threads that are hitting the cache. Periodic pruning   of expired cache entries from cache is done on a dedicated thread which is turned on   by enabling reaper in expiration configuration element/API.
 
-[[sid-65274032_Eviction-NONE]]
+[[sid-68355088_Eviction-NONE]]
 
 
 ==== NONE
 
 This eviction strategy effectively disables the eviction thread.
 
-[[sid-65274032_Eviction-UNORDERED]]
+[[sid-68355088_Eviction-UNORDERED]]
 
 
 ==== UNORDERED
 
 UNORDERED eviction strategy is a legacy eviction strategy that has been deprecated. If UNORDERED strategy is specified LRU eviction algorithm will be used.
 
-[[sid-65274032_Eviction-LRU]]
+[[sid-68355088_Eviction-LRU]]
 
 
 ==== LRU
 
 If LRU eviction is used cache entries are selected for eviction using a well known least-recently-used pattern.
 
-[[sid-65274032_Eviction-LIRS]]
+[[sid-68355088_Eviction-LIRS]]
 
 
 ==== LIRS
 
 LRU eviction algorithm, although simple and easy to understand, under performs in cases of weak access locality (one time access entries are not timely replaced, entries to be accessed soonest are unfortunately replaced, and so on). Recently, a new eviction algorithm - LIRS has gathered a lot of attention because it addresses weak access locality shortcomings of LRU yet it retains LRU's simplicity. Eviction in LIRS algorithm relies on history information of cache entries accesses using so called Inter-Reference Recency (a.k.a IRR) and the Recency. The IRR of a cache entry A refers to number of other distinct entries accessed between the last two consecutive accesses to cache entry A, while recency refers to the number of other entries accessed from last reference to A up to current time point. If we relied only on cache recency we would essentially have LRU functionality. However, in addition to recency LIRS tracks elements that are in low IRR and high IRR, aptly named LIR and HIR cache entry blocks respectively. LIRS eviction algorithm essentially keeps entries with a low IRR in the cache as much as possible while evicting high IRR entries if eviction is required. If recency of a LIR cache entry increases to a certain point and entry  in HIR gets accessed at a smaller recency than that of the LIR entry, the LIR/HIR statuses of the two blocks are switched. Entries in HIR may be evicted regardless of its recency, even if element was recently accessed.
 
-[[sid-65274032_Eviction-Configurationanddefaultsin5.2.x]]
+[[sid-68355088_Eviction-Configurationanddefaultsin5.2.x]]
 
 
 === Configuration and defaults in 5.2.x
@@ -78,14 +78,14 @@ In case there is an eviction element, this table describes behaviour of eviction
 |===============
 
 
-[[sid-65274032_Eviction-AdvancedEvictionInternals]]
+[[sid-68355088_Eviction-AdvancedEvictionInternals]]
 
 
 === Advanced Eviction Internals
 
  Implementing eviction in a scalable, low lock contention  approach while  at the same time doing meaningful selection of entries for eviction is  not an easy feat. Data container needs to be locked until appropriate  eviction entries are selected. Having  such a lock protected data  container in turn causes high lock contention  offsetting any eviction  precision gained by sophisticated eviction  algorithms. In order to get  superior throughput while retaining high  eviction precision both low  lock contention data container and  high precision eviction algorithm  implementation are needed. Infinispan evicts entries from cache on a  segment level (segments  similar to ConcurrentHashMap), once segment is  full entries are evicted  according to eviction algorithm. However,  there are two drawbacks with this approach. Entries might get evicted  from cache even though maxEntries has not been reached yet and  maxEntries is a theoretical  limit for cache size but in practical   terms it will be slightly less  than maxEntries. For more details refer to link:$$http://infinispan.blogspot.com/2010/03/infinispan-eviction-batching-updates.html$$[Infinispan eviction design] . 
 
-[[sid-65274032_Eviction-Expiration]]
+[[sid-68355088_Eviction-Expiration]]
 
 
 === Expiration
@@ -103,7 +103,7 @@ Unlike eviction, expired entries are removed globally - from memory, cache store
 
  By default entries created are immortal and do not have a lifespan or maximum idle time.  Using the cache API, mortal entries can be created with lfiespans and/or maximum idle times.  Further, default lifespans and/or maximum idle times can be configured by adding the link:$$http://docs.jboss.org/infinispan/5.1/configdocs/urn_infinispan_config_5.1/complexType/configuration.expiration.html$$[&lt;expiration /&gt;] element to your &lt;default /&gt; or &lt;namedCache /&gt; configuration sections. 
 
-[[sid-65274032_Eviction-DifferencebetweenEvictionandExpiration]]
+[[sid-68355088_Eviction-DifferencebetweenEvictionandExpiration]]
 
 
 === Difference between Eviction and Expiration
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-44-ServerHinting.adoc b/documentation/src/main/asciidoc/user_guide/chapter-44-ServerHinting.adoc
index f227b7c..64b1a66 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-44-ServerHinting.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-44-ServerHinting.adoc
@@ -1,22 +1,22 @@
-[[sid-65274033]]
+[[sid-68355089]]
 
 ==  ServerHinting
 
-[[sid-65274033_ServerHinting-Whatisserverhinting%3F]]
+[[sid-68355089_ServerHinting-Whatisserverhinting%3F]]
 
 
 === What is server hinting?
 
 The motivations behind this feature is to ensure when using distribution, backups are not picked to reside on the same physical server, rack or data centre. For obvious reasons it doesn't work with total replication.
 
-[[sid-65274033_ServerHinting-Version]]
+[[sid-68355089_ServerHinting-Version]]
 
 
 === Version
 
 Server hinting was added in Infinspan 4.2.0 "Ursus". You'll need this release or later in order to use it.
 
-[[sid-65274033_ServerHinting-Configuration]]
+[[sid-68355089_ServerHinting-Configuration]]
 
 
 === Configuration
@@ -43,7 +43,7 @@ Following topology hints can be specified:
 
 * siteId - to differentiate between nodes in different data centres replicating to each other.    All of the above are optional, and if not provided, the distribution algorithms provide no guarantees that backups will not be stored in instances on the same host/rack/site.
 
-[[sid-65274033_ServerHinting-Algorithm]]
+[[sid-68355089_ServerHinting-Algorithm]]
 
 
 === Algorithm
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-45-Java_Hot_Rod_client.adoc b/documentation/src/main/asciidoc/user_guide/chapter-45-Java_Hot_Rod_client.adoc
index cc82cbb..443f437 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-45-Java_Hot_Rod_client.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-45-Java_Hot_Rod_client.adoc
@@ -1,15 +1,15 @@
-[[sid-65274035]]
+[[sid-68355091]]
 
 ==  Java Hot Rod client
 
-[[sid-65274035_JavaHotRodclient-Introduction]]
+[[sid-68355091_JavaHotRodclient-Introduction]]
 
 
 === Introduction
 
 Hot Rod is a binary, language neutral protocol. This article explains how a Java client can interact with a server via the Hot Rod protocol. A reference implementation of the protocol written in Java can be found in all Infinispan distributions since 4.1, and this article focuses on the capabilities of this java client.
 
-[[sid-65274035_JavaHotRodclient-BasicAPI]]
+[[sid-68355091_JavaHotRodclient-BasicAPI]]
 
 
 === Basic API
@@ -44,7 +44,7 @@ Set keys = remoteCache.keySet();
 
 ----
 
-[[sid-65274035_JavaHotRodclient-VersionedAPI]]
+[[sid-68355091_JavaHotRodclient-VersionedAPI]]
 
 
 === Versioned API
@@ -81,14 +81,14 @@ assert remoteCache.replace("car", "lamborghini", valueBinary.getVersion());
 
  For more details on versioned operations refer to link:$$http://docs.jboss.org/infinispan/5.2/apidocs/org/infinispan/client/hotrod/RemoteCache.html$$[RemoteCache] 's javadoc. 
 
-[[sid-65274035_JavaHotRodclient-AsyncAPI]]
+[[sid-68355091_JavaHotRodclient-AsyncAPI]]
 
 
 === Async API
 
  This cool feature is "borrowed" from the Infinispan core and it is largely discussed link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737045$$[here] . 
 
-[[sid-65274035_JavaHotRodclient-Unsupportedmethods]]
+[[sid-68355091_JavaHotRodclient-Unsupportedmethods]]
 
 
 === Unsupported methods
@@ -107,7 +107,7 @@ boolean replace(Object key, Object oldValue, Object value);
 
  Each one of these unsupported operation is documented in the link:$$http://docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/client/hotrod/RemoteCache.html$$[RemoteCache] javadoc. 
 
-[[sid-65274035_JavaHotRodclient-Returnvalues]]
+[[sid-68355091_JavaHotRodclient-Returnvalues]]
 
 
 === Return values
@@ -133,7 +133,7 @@ assert "aValue".equals(cache.withFlags(Flag.FORCE_RETURN_VALUE).put("aKey",
 
 This default behaviour can can be changed through force-return-value=true configuration parameter (see configuration section bellow).
 
-[[sid-65274035_JavaHotRodclient-Intelligence]]
+[[sid-68355091_JavaHotRodclient-Intelligence]]
 
 
 === Intelligence
@@ -153,14 +153,14 @@ The java client supports all 3 levels of intelligence. It is transparently notif
 
 Hash-distribution-aware client is discussed in the next section.
 
-[[sid-65274035_JavaHotRodclient-Hashdistributionawareclient]]
+[[sid-68355091_JavaHotRodclient-Hashdistributionawareclient]]
 
 
 === distribution-aware client
 
 Another aspect of the 3rd level of intelligence is the fact that it is hash-distribution-aware. This means that, for each operation, the client chooses the most appropriate remote server to go to: the data owner. As an example, for a put(k,v) operation, the client calculates k's hash value and knows exactly on which server the data resides on. Then it picks up a tcp connection to that particular server and dispatches the operation to it. This means less burden on the server side which would otherwise need to lookup the value based on the key's hash. It also results in a quicker response from the server, as an additional network roundtrip is skipped. This hash-distribution-aware aspect is only relevant to the distributed HotRod clusters and makes no difference for replicated server deployments.
 
-[[sid-65274035_JavaHotRodclient-RequestBalancing]]
+[[sid-68355091_JavaHotRodclient-RequestBalancing]]
 
 
 === Request Balancing
@@ -184,7 +184,7 @@ cache.remove("key2"); //this is dispatched to s1 again, and so on...
 
  Custom types of balancing policies can defined by implementing the link:$$http://docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/client/hotrod/impl/transport/tcp/RequestBalancingStrategy.html$$[RequestBalancingStrategy] and by specifying it through the infinispan.client.hotrod.request-balancing-strategy configuration property. Please refer to configuration section for more details on this. 
 
-[[sid-65274035_JavaHotRodclient-Persistentconnections]]
+[[sid-68355091_JavaHotRodclient-Persistentconnections]]
 
 
 === Persistent connections
@@ -193,7 +193,7 @@ In order to avoid creating a TCP connection on each request (which is a costly o
 
  The number of connections per server, total number of connections, how long should a connection be kept idle in the pool before being closed - all these (and more) can be configured. Please refer to the javadoc of link:$$http://docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/client/hotrod/RemoteCacheManager.html$$[RemoteCacheManager] for a list of all possible configuration elements. 
 
-[[sid-65274035_JavaHotRodclient-Marshallingdata]]
+[[sid-68355091_JavaHotRodclient-Marshallingdata]]
 
 
 === Marshalling data
@@ -202,30 +202,30 @@ The Hot Rod client allows one to plug in a custom marshaller for transforming us
 
  The marshaller can be plugged through the "marshaller" configuration element (see Configuration section): the value should be the fully qualified name of a class implementing the link:$$http://docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/marshall/Marshaller.html$$[Marshaller] interface. This is a optional parameter, if not specified it defaults to the link:$$http://docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/marshall/jboss/GenericJBossMarshaller.html$$[GenericJBossMarshaller] - a highly optimized implementation based on the link:$$http://www.jboss.org/jbossmarshalling$$[JBoss Marshalling] library. 
 
- Since version 5.0, there's a new marshaller available to Java Hot Rod clients based on Apache Avro which generates portable payloads. You can find more information about it <<sid-65274007,here>> 
+ Since version 5.0, there's a new marshaller available to Java Hot Rod clients based on Apache Avro which generates portable payloads. You can find more information about it <<sid-68355061,here>> 
 
-[[sid-65274035_JavaHotRodclient-Statistics]]
+[[sid-68355091_JavaHotRodclient-Statistics]]
 
 
 === Statistics
 
  Various server usage statistics can be obtained through the link:$$http://docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/client/hotrod/RemoteCache.html$$[RemoteCache] .stats() method. This returns an link:$$http://docs.jboss.org/infinispan/4.1/apidocs/org/infinispan/client/hotrod/ServerStatistics.html$$[ServerStatistics] object - please refer to javadoc for details on the available statistics. 
 
-[[sid-65274035_JavaHotRodclient-Configuration]]
+[[sid-68355091_JavaHotRodclient-Configuration]]
 
 
 === Configuration
 
  All the configurations are passed to the RemoteCacheManager's constructor as key-value pairs, through an instance of link:$$http://download.oracle.com/javase/6/docs/api/java/util/Properties.html$$[java.util.Properties] or reference to a .properties file. Please refer to the javadoc of RemoteCacheManager for a exhaustive list of the possible configuration elements. 
 
-[[sid-65274035_JavaHotRodclient-MultiGetOperations]]
+[[sid-68355091_JavaHotRodclient-MultiGetOperations]]
 
 
 === Multi-Get Operations
 
  The Java Hot Rod client does not provide multi-get functionality out of the box but clients can build it themselves with the given APIs. More information on this topic can be found in the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=9470083$$[Hot Rod protocol article] . 
 
-[[sid-65274035_JavaHotRodclient-Moreinfo]]
+[[sid-68355091_JavaHotRodclient-Moreinfo]]
 
 
 === More info
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-46-Configuring_cache.adoc b/documentation/src/main/asciidoc/user_guide/chapter-46-Configuring_cache.adoc
index 25a9ee4..c85e11b 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-46-Configuring_cache.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-46-Configuring_cache.adoc
@@ -1,4 +1,4 @@
-[[sid-65274036]]
+[[sid-68355092]]
 
 ==  Configuring cache
 
@@ -28,17 +28,17 @@ For more details, refer to the following documents:
 
 *  link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737098$$[Configuration Migration Tools] 
 
-[[sid-65274037]]
+[[sid-68355093]]
 
 
 === Dynamically Start and Stop Clustered Cache
 
-[[sid-65274037_DynamicallyStartandStopClusteredCache-LibraryMode]]
+[[sid-68355093_DynamicallyStartandStopClusteredCache-LibraryMode]]
 
 
 ==== Library Mode
 
-[[sid-65274037_DynamicallyStartandStopClusteredCache-NonClustered]]
+[[sid-68355093_DynamicallyStartandStopClusteredCache-NonClustered]]
 
 
 ===== Clustered
@@ -49,7 +49,7 @@ For more details, refer to the following documents:
 
  To stop a cache, call _EmbeddedCacheManager.remove(cacheName)_ ; 
 
-[[sid-65274037_DynamicallyStartandStopClusteredCache-Clustered]]
+[[sid-68355093_DynamicallyStartandStopClusteredCache-Clustered]]
 
 
 ===== Clustered
@@ -105,7 +105,7 @@ for (Future<Void> future : list) {
 
 ----
 
-[[sid-65274037_DynamicallyStartandStopClusteredCache-ServerMode]]
+[[sid-68355093_DynamicallyStartandStopClusteredCache-ServerMode]]
 
 
 ==== Server Mode
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-47-Write_Through_And_Write_Behind_Caching.adoc b/documentation/src/main/asciidoc/user_guide/chapter-47-Write_Through_And_Write_Behind_Caching.adoc
index 0740017..f90f41f 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-47-Write_Through_And_Write_Behind_Caching.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-47-Write_Through_And_Write_Behind_Caching.adoc
@@ -1,8 +1,8 @@
-[[sid-65274038]]
+[[sid-68355094]]
 
 ==  Write-Through And Write-Behind Caching
 
-[[sid-65274038_Write-ThroughAndWrite-BehindCaching-Introduction]]
+[[sid-68355094_Write-ThroughAndWrite-BehindCaching-Introduction]]
 
 
 === Introduction
@@ -15,7 +15,7 @@ Infinispan can optionally be configured with one or several cache stores allowin
 
 * Write-Behind (Asynchronous)
 
-[[sid-65274038_Write-ThroughAndWrite-BehindCaching-WriteThrough%28Synchronous%29]]
+[[sid-68355094_Write-ThroughAndWrite-BehindCaching-WriteThrough%28Synchronous%29]]
 
 
 === Write-Through (Synchronous)
@@ -49,7 +49,7 @@ Configuring a write-through or synchronous cache store does not require any part
 
 ----
 
-[[sid-65274038_Write-ThroughAndWrite-BehindCaching-WriteBehind%28Asynchronous%29]]
+[[sid-68355094_Write-ThroughAndWrite-BehindCaching-WriteBehind%28Asynchronous%29]]
 
 
 === Write-Behind (Asynchronous)
@@ -58,7 +58,7 @@ In this mode, updates to the cache are asynchronously written to the cache store
 
 One of the major advantages of this mode is that the performance of a cache operation does not get affected by the update of the underlying store. On the other hand, since the update happens asynchronously, there's a time window during the which the cache store can contain stale data compared to the cache. Even within write-behind, there are different strategies that can be used to store data:
 
-[[sid-65274038_Write-ThroughAndWrite-BehindCaching-UnscheduledWriteBehindStrategy]]
+[[sid-68355094_Write-ThroughAndWrite-BehindCaching-UnscheduledWriteBehindStrategy]]
 
 
 === Unscheduled Write-Behind Strategy
@@ -93,7 +93,7 @@ This strategy is suited for cache stores with low latency and cheap operation co
 
 ----
 
-[[sid-65274038_Write-ThroughAndWrite-BehindCaching-ScheduledWriteBehindStrategy]]
+[[sid-68355094_Write-ThroughAndWrite-BehindCaching-ScheduledWriteBehindStrategy]]
 
 
 === Scheduled Write-Behind Strategy
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-48-Using_Hot_Rod_Server.adoc b/documentation/src/main/asciidoc/user_guide/chapter-48-Using_Hot_Rod_Server.adoc
index 5633ad9..eb23832 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-48-Using_Hot_Rod_Server.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-48-Using_Hot_Rod_Server.adoc
@@ -1,15 +1,15 @@
-[[sid-65274039]]
+[[sid-68355095]]
 
 ==  Using Hot Rod Server
 
-[[sid-65274039_UsingHotRodServer-Introduction]]
+[[sid-68355095_UsingHotRodServer-Introduction]]
 
 
 === Introduction
 
  Starting with version 4.1, Infinispan distribution contains a server module that implements link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=9470083$$[Infinispan's custom binary protocol called Hot Rod] . The protocol was designed to enable faster client/server interactions compared to other existing text based protocols and to allow clients to make more intelligent decisions with regards to load balancing, failover and even data location operations. 
 
-[[sid-65274039_UsingHotRodServer-StartinganInfinispanHotRodserver]]
+[[sid-68355095_UsingHotRodServer-StartinganInfinispanHotRodserver]]
 
 
 === Starting an Infinispan Hot Rod server
@@ -23,7 +23,7 @@ The simplest way to start up  Hot Rod  server is to simply unzip the all distr
 
  When the script is called without any further parameters, the started Hot Rod server bounds to port 11222 (Infinispan 4.2.0.BETA1 or earlier listened on port 11311 by default) on localhost (127.0.0.1). If no further parameters is given at startup, this means that any cache instance queried will be based on the default cache instance which will be a local (unclustered) Infinispan cache instance configured with default values. Please visit the link:$$http://docs.jboss.org/infinispan/4.1/apidocs/config.html$$[Configuration Reference Guide] for more information on these values. If you want to use non-default values, please check the next section on command line options. 
 
-[[sid-65274039_UsingHotRodServer-CommandLineOptions]]
+[[sid-68355095_UsingHotRodServer-CommandLineOptions]]
 
 
 ==== Command Line Options
@@ -32,7 +32,7 @@ The simplest way to start up  Hot Rod  server is to simply unzip the all distr
 
 So, following the discussion earlier on configuring a Hot Rod server with a custom Infinispan configuration, you'd use -c parameter to pass the corresponding file. Hot Rod clients could then send requests to specific cache instances whose name match one of the names in the custom configuration file.
 
-[[sid-65274039_UsingHotRodServer-PredefiningHotRodCaches]]
+[[sid-68355095_UsingHotRodServer-PredefiningHotRodCaches]]
 
 
 ==== Predefining Hot Rod Caches
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-49-Cassandra_CacheStore.adoc b/documentation/src/main/asciidoc/user_guide/chapter-49-Cassandra_CacheStore.adoc
index 509923a..fdbcd9f 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-49-Cassandra_CacheStore.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-49-Cassandra_CacheStore.adoc
@@ -1,17 +1,17 @@
-[[sid-65274040]]
+[[sid-68355096]]
 
 ==  Cassandra CacheStore
 
  Infinispan's CassandraCacheStore leverages link:$$http://cassandra.apache.org/$$[Apache Cassandra] 's distributed database architecture to provide a virtually unlimited, horizontally scalable persistent store for Infinispan's caches. 
 
-[[sid-65274040_CassandraCacheStore-Version]]
+[[sid-68355096_CassandraCacheStore-Version]]
 
 
 === Version
 
 The Cassandra CacheStore was added in Infinspan 4.2.0 "Ursus". You'll need this release or later in order to use it.
 
-[[sid-65274040_CassandraCacheStore-]]
+[[sid-68355096_CassandraCacheStore-]]
 
 
 === 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-5-Integration_with_other_frameworks.adoc b/documentation/src/main/asciidoc/user_guide/chapter-5-Integration_with_other_frameworks.adoc
index 28d4384..7241746 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-5-Integration_with_other_frameworks.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-5-Integration_with_other_frameworks.adoc
@@ -1,4 +1,4 @@
-[[sid-65273977_UserGuide-Integrationwithotherframeworks]]
+[[sid-68355028_UserGuide-Integrationwithotherframeworks]]
 
 ==  Integration with other frameworks
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-50-Infinispan_Custom_Interceptors.adoc b/documentation/src/main/asciidoc/user_guide/chapter-50-Infinispan_Custom_Interceptors.adoc
index bf14966..d4c3b31 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-50-Infinispan_Custom_Interceptors.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-50-Infinispan_Custom_Interceptors.adoc
@@ -1,15 +1,15 @@
-[[sid-65274041]]
+[[sid-68355097]]
 
 ==  Infinispan Custom Interceptors
 
-[[sid-65274041_InfinispanCustomInterceptors-Introduction]]
+[[sid-68355097_InfinispanCustomInterceptors-Introduction]]
 
 
 === Introduction
 
  It is possible to add custom interceptors to Infinispan, both declaratively and programatically. Custom interceptors are an way of extending Infinispan by being able to influence or respond to any modifications to cache. Example of such modifications are: elements are added/removed/updated or transactions are committed. For a detailed list refer to link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/interceptors/base/CommandInterceptor.html$$[CommandInterceptor] API. 
 
-[[sid-65274041_InfinispanCustomInterceptors-Addingcustominterceptorsdeclaratively]]
+[[sid-68355097_InfinispanCustomInterceptors-Addingcustominterceptorsdeclaratively]]
 
 
 === Adding custom interceptors declaratively
@@ -53,7 +53,7 @@ AdvancedCache advCache = aCache.getAdvancedCache();
 
  Then one of the _addInterceptor()_ methods should be used to add the actual interceptor. For further documentation refer to link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/AdvancedCache.html$$[AdvancedCache] javadoc. 
 
-[[sid-65274041_InfinispanCustomInterceptors-Custominterceptordesign]]
+[[sid-68355097_InfinispanCustomInterceptors-Custominterceptordesign]]
 
 
 === Custom interceptor design
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-51-Talking_To_Infinispan_Memcached_Servers_From_Non_Java_Clients.adoc b/documentation/src/main/asciidoc/user_guide/chapter-51-Talking_To_Infinispan_Memcached_Servers_From_Non_Java_Clients.adoc
index b479ad3..708857f 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-51-Talking_To_Infinispan_Memcached_Servers_From_Non_Java_Clients.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-51-Talking_To_Infinispan_Memcached_Servers_From_Non_Java_Clients.adoc
@@ -1,10 +1,10 @@
-[[sid-65274042]]
+[[sid-68355098]]
 
 ==  Talking To Infinispan Memcached Servers From Non-Java Clients
 
 This wiki shows how to talk to Infinispan memcached server via non-java client, such as a python script.
 
-[[sid-65274042_TalkingToInfinispanMemcachedServersFromNon-JavaClients-MultiClusteredServerTutorial]]
+[[sid-68355098_TalkingToInfinispanMemcachedServersFromNon-JavaClients-MultiClusteredServerTutorial]]
 
 
 === Multi Clustered Server Tutorial
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-52-Plugging_Infinispan_With_User_Defined_Externalizers.adoc b/documentation/src/main/asciidoc/user_guide/chapter-52-Plugging_Infinispan_With_User_Defined_Externalizers.adoc
index 25d7072..2ccad87 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-52-Plugging_Infinispan_With_User_Defined_Externalizers.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-52-Plugging_Infinispan_With_User_Defined_Externalizers.adoc
@@ -1,8 +1,8 @@
-[[sid-65274043]]
+[[sid-68355099]]
 
 ==  Plugging Infinispan With User Defined Externalizers
 
-[[sid-65274043_PluggingInfinispanWithUserDefinedExternalizers-Introduction]]
+[[sid-68355099_PluggingInfinispanWithUserDefinedExternalizers-Introduction]]
 
 
 === Introduction
@@ -13,7 +13,7 @@ One of the key aspects of Infinispan is that it often needs to marshall/unmarsha
 
 Starting with 5.0, users of Infinispan can now benefit from this marshalling framework as well, and they can provide their own externalizer implementations, but before finding out how to provide externalizers, let's look at the benefits they bring.
 
-[[sid-65274043_PluggingInfinispanWithUserDefinedExternalizers-BenefitsofExternalizers]]
+[[sid-68355099_PluggingInfinispanWithUserDefinedExternalizers-BenefitsofExternalizers]]
 
 
 === Benefits of Externalizers
@@ -24,7 +24,7 @@ Starting with 5.0, users of Infinispan can now benefit from this marshalling fra
 
 It's quite common, and in general recommended, that Externalizer implementations are stored as inner static public classes within classes that they externalize. The advantages of doing this is that related code stays together, making it easier to maintain. In Infinispan, there are two ways in which Infinispan can be plugged with user defined externalizers:
 
-[[sid-65274043_PluggingInfinispanWithUserDefinedExternalizers-UserFriendlyExternalizers]]
+[[sid-68355099_PluggingInfinispanWithUserDefinedExternalizers-UserFriendlyExternalizers]]
 
 
 ==== User Friendly Externalizers
@@ -80,7 +80,7 @@ Even though this way of defining externalizers is very user friendly, it has som
 
 If you're affected by any of these disadvantages, an alternative method to provide externalizers is available via more advanced externalizers:
 
-[[sid-65274043_PluggingInfinispanWithUserDefinedExternalizers-AdvancedExternalizers]]
+[[sid-68355099_PluggingInfinispanWithUserDefinedExternalizers-AdvancedExternalizers]]
 
 
 ==== Advanced Externalizers
@@ -131,7 +131,7 @@ public class Person {
 
  The first noticeable difference is that this method does not require user classes to be annotated in anyway, so it can be used with classes for which source code is not available or that cannot be modified. The bound between the externalizer and the classes that are marshalled/unmarshalled is set by providing an implementation for link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/marshall/AdvancedExternalizer.html#getTypeClasses()$$[getTypeClasses()] which should return the list of classes that this externalizer can marshall: 
 
-[[sid-65274043_PluggingInfinispanWithUserDefinedExternalizers-LinkingExternalizerswithMarshallerClasses]]
+[[sid-68355099_PluggingInfinispanWithUserDefinedExternalizers-LinkingExternalizerswithMarshallerClasses]]
 
 
 ===== Linking Externalizers with Marshaller Classes
@@ -171,7 +171,7 @@ public Set<Class<? extends List>> getTypeClasses() {
 
 ----
 
-[[sid-65274043_PluggingInfinispanWithUserDefinedExternalizers-ExternalizerIdentifier]]
+[[sid-68355099_PluggingInfinispanWithUserDefinedExternalizers-ExternalizerIdentifier]]
 
 
 ===== Externalizer Identifier
@@ -184,7 +184,7 @@ Regardless of the source of the the id, using a positive integer allows for very
 
 When it comes to maintaining which ids are in use, it's highly recommended that this is done in a centralized way. For example, getId() implementations could reference a set of statically defined identifiers in a separate class or interface. Such class/interface would give a global view of the identifiers in use and so can make it easier to assign new ids.
 
-[[sid-65274043_PluggingInfinispanWithUserDefinedExternalizers-RegisteringAdvancedExternalizers]]
+[[sid-68355099_PluggingInfinispanWithUserDefinedExternalizers-RegisteringAdvancedExternalizers]]
 
 
 ===== Registering Advanced Externalizers
@@ -256,7 +256,7 @@ builder.serialization()
 
 ----
 
-[[sid-65274043_PluggingInfinispanWithUserDefinedExternalizers-PreassignedExternalizerIdRanges]]
+[[sid-68355099_PluggingInfinispanWithUserDefinedExternalizers-PreassignedExternalizerIdRanges]]
 
 
 ===== Preassigned Externalizer Id Ranges
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-53-Using_the_Cache_API.adoc b/documentation/src/main/asciidoc/user_guide/chapter-53-Using_the_Cache_API.adoc
index 85a2266..9e27b09 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-53-Using_the_Cache_API.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-53-Using_the_Cache_API.adoc
@@ -1,8 +1,8 @@
-[[sid-65274044]]
+[[sid-68355100]]
 
 ==  Using the Cache API
 
-[[sid-65274044_UsingtheCacheAPI-TheCacheinterface]]
+[[sid-68355100_UsingtheCacheAPI-TheCacheinterface]]
 
 
 === The Cache interface
@@ -15,7 +15,7 @@ image::[]
 
  
 
-The Cache interface exposes simple methods for adding, retrieving and removing entries, including atomic mechanisms exposed by the JDK's ConcurrentMap interface.  Based on the cache mode used, invoking these methods will trigger a number of things to happen, potentially even including replicating an entry to a remote node or looking up an entry from a remote node, or potentially a cache store.
+The Cache interface exposes simple methods for adding, retrieving and removing entries, including atomic mechanisms exposed by the JDK's ConcurrentMap interface.  Based on the cache mode used, invoking these methods will trigger a number of things to happen, potentially even including replicating an entry to a remote node or looking up an entry from a remote node, or potentially a cache store.
 
 
 ----
@@ -23,32 +23,32 @@ Note: For simple usage, using the Cache API should be no different from using th
 
 ----
 
-[[sid-65274044_UsingtheCacheAPI-LimitationsofCertainMapMethods]]
+[[sid-68355100_UsingtheCacheAPI-LimitationsofCertainMapMethods]]
 
 
 ==== Limitations of Certain Map Methods
 
- Certain methods exposed in Map have certain limitations when used with Infinispan, such as link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#size%28%29$$[size()] , link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#values%28%29$$[values()] , link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#keySet%28%29$$[keySet()] and link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#entrySet%28%29$$[entrySet()] .  Specifically, these methods are _unreliable_ and only provide a best-effort guess.  They do not acquire locks, either local or global, and concurrent modifications, additions and removals will not be considered in the result of any of these calls.  Further, they only operate on the local data container, and as such, do not give you a global view of state. 
+ Certain methods exposed in Map have certain limitations when used with Infinispan, such as link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#size%28%29$$[size()] , link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#values%28%29$$[values()] , link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#keySet%28%29$$[keySet()] and link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#entrySet%28%29$$[entrySet()] .  Specifically, these methods are _unreliable_ and only provide a best-effort guess.  They do not acquire locks, either local or global, and concurrent modifications, additions and removals will not be considered in the result of any of these calls.  Further, they only operate on the local node, and as such, do not give you a global(cluster) view of the state. 
 
-Attempting to perform these operations globally would have large performance impact as well as become a scalability bottleneck.  As such, these methods should only be used for informational or debugging purposes only.
+Attempting to perform these operations globally would have large performance impact as well as become a scalability bottleneck.  As such, these methods should only be used for informational or debugging purposes only.
 
-[[sid-65274044_UsingtheCacheAPI-MortalandImmortalData]]
+[[sid-68355100_UsingtheCacheAPI-MortalandImmortalData]]
 
 
 ==== Mortal and Immortal Data
 
- Further to simply storing entries, Infinispan's cache API allows you to attach mortality information to data.  For example, simply using link:$$http://java.sun.com/javase/6/docs/api/java/util/Map.html#put%28K,%20V%29$$[put(key, value)] would create an _immortal_ entry, i.e., an entry that lives in the cache forever, until it is removed (or evicted from memory to prevent running out of memory).  If, however, you put data in the cache using link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#put%28K,%20V,%20long,%20java.util.concurrent.TimeUnit%29$$[put(key, value, lifespan, timeunit)] , this creates a _mortal_ entry, i.e., an entry that has a fixed lifespan and expires after that lifespan. 
+ Further to simply storing entries, Infinispan's cache API allows you to attach mortality information to data.  For example, simply using link:$$http://java.sun.com/javase/6/docs/api/java/util/Map.html#put%28K,%20V%29$$[put(key, value)] would create an _immortal_ entry, i.e., an entry that lives in the cache forever, until it is removed (or evicted from memory to prevent running out of memory).  If, however, you put data in the cache using link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/Cache.html#put%28K,%20V,%20long,%20java.util.concurrent.TimeUnit%29$$[put(key, value, lifespan, timeunit)] , this creates a _mortal_ entry, i.e., an entry that has a fixed lifespan and expires after that lifespan. 
 
- In addition to _lifespan_ , Infinispan also supports _maxIdle_ as an additional metric with which to determine expiration.  Any combination of lifespans or maxIdles can be used. 
+ In addition to _lifespan_ , Infinispan also supports _maxIdle_ as an additional metric with which to determine expiration.  Any combination of lifespans or maxIdles can be used. 
 
-[[sid-65274044_UsingtheCacheAPI-ExampleofUsingExpiryandMortalData]]
+[[sid-68355100_UsingtheCacheAPI-ExampleofUsingExpiryandMortalData]]
 
 
 ==== Example of Using Expiry and Mortal Data
 
  See link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737114$$[this page] for an example of using mortal data with Infinispan 
 
-[[sid-65274044_UsingtheCacheAPI-%7B%7BputForExternalRead%7D%7Doperation]]
+[[sid-68355100_UsingtheCacheAPI-%7B%7BputForExternalRead%7D%7Doperation]]
 
 
 ==== putForExternalRead operation
@@ -88,12 +88,12 @@ if (cachedPerson == null) {
 
  Please note that link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/Cache.html#putForExternalRead(K, V)$$[putForExternalRead] should never be used as a mechanism to update the cache with a new Person instance originating from application execution (i.e. from a transaction that modifies a Person's address). When updating cached values, please use the standard link:$$http://java.sun.com/javase/6/docs/api/java/util/Map.html?is-external=true#put(K, V)$$[put] operation, otherwise the possibility of caching corrupt data is likely. 
 
-[[sid-65274044_UsingtheCacheAPI-TheAdvancedCacheinterface]]
+[[sid-68355100_UsingtheCacheAPI-TheAdvancedCacheinterface]]
 
 
 === The AdvancedCache interface
 
- In addition to the simple Cache interface, Infinispan offers an link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/AdvancedCache.html$$[AdvancedCache] interface, geared towards extension authors.  The AdvancedCache offers the ability to inject custom interceptors, access certain internal components and to apply flags to alter the default behavior of certain cache methods.  The following code snippet depicts how an AdvancedCache can be obtained: 
+ In addition to the simple Cache interface, Infinispan offers an link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/AdvancedCache.html$$[AdvancedCache] interface, geared towards extension authors.  The AdvancedCache offers the ability to inject custom interceptors, access certain internal components and to apply flags to alter the default behavior of certain cache methods.  The following code snippet depicts how an AdvancedCache can be obtained: 
 
 
 ----
@@ -101,12 +101,12 @@ AdvancedCache advancedCache = cache.getAdvancedCache();
 
 ----
 
-[[sid-65274044_UsingtheCacheAPI-Flags]]
+[[sid-68355100_UsingtheCacheAPI-Flags]]
 
 
 ==== Flags
 
- Flags are applied to regular cache methods to alter the behavior of certain methods.  For a list of all available flags, and their effects, see the link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/context/Flag.html$$[Flag] enumeration.  Flags are applied using link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/AdvancedCache.html#withFlags%28org.infinispan.context.Flag...%29$$[AdvancedCache.withFlags()] .  This builder method can be used to apply any number of flags to a cache invocation, for example: 
+ Flags are applied to regular cache methods to alter the behavior of certain methods.  For a list of all available flags, and their effects, see the link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/context/Flag.html$$[Flag] enumeration.  Flags are applied using link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/AdvancedCache.html#withFlags%28org.infinispan.context.Flag...%29$$[AdvancedCache.withFlags()] .  This builder method can be used to apply any number of flags to a cache invocation, for example: 
 
 
 ----
@@ -117,12 +117,12 @@ advancedCache.withFlags(Flag.CACHE_MODE_LOCAL, Flag.SKIP_LOCKING)
 
 ----
 
-[[sid-65274044_UsingtheCacheAPI-CustomInterceptors]]
+[[sid-68355100_UsingtheCacheAPI-CustomInterceptors]]
 
 
 ==== Custom Interceptors
 
-The AdvancedCache interface also offers advanced developers a mechanism with which to attach custom interceptors.  Custom interceptors allow developers to alter the behavior of the cache API methods, and the AdvancedCache interface allows developers to attach these interceptors programmatically, at run-time.  See the AdvancedCache Javadocs for more details.
+The AdvancedCache interface also offers advanced developers a mechanism with which to attach custom interceptors.  Custom interceptors allow developers to alter the behavior of the cache API methods, and the AdvancedCache interface allows developers to attach these interceptors programmatically, at run-time.  See the AdvancedCache Javadocs for more details.
 
  For more information on writing custom interceptors, see link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737149$$[/javascript:;] 
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-54-Local_mode_cache.adoc b/documentation/src/main/asciidoc/user_guide/chapter-54-Local_mode_cache.adoc
index 4d90896..110b779 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-54-Local_mode_cache.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-54-Local_mode_cache.adoc
@@ -1,4 +1,4 @@
-[[sid-65274045]]
+[[sid-68355101]]
 
 ==  Local mode cache
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-55-Infinispan_Command_line_Console.adoc b/documentation/src/main/asciidoc/user_guide/chapter-55-Infinispan_Command_line_Console.adoc
index b08353f..6ebfe0a 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-55-Infinispan_Command_line_Console.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-55-Infinispan_Command_line_Console.adoc
@@ -1,10 +1,10 @@
-[[sid-65274046]]
+[[sid-68355102]]
 
 ==  Infinispan Command-line Console
 
 Documentation for ispncon version 0.8.1
 
-[[sid-65274046_InfinispanCommand-lineConsole-Whatisispncon%3F]]
+[[sid-68355102_InfinispanCommand-lineConsole-Whatisispncon%3F]]
 
 
 === What is ispncon ?
@@ -37,7 +37,7 @@ Behind the scenes the console tool uses existing python clients to handle the co
 
  The source code and issue reporting for ispncon can be found here: link:$$https://github.com/infinispan/ispncon$$[] 
 
-[[sid-65274046_InfinispanCommand-lineConsole-Installation]]
+[[sid-68355102_InfinispanCommand-lineConsole-Installation]]
 
 
 === Installation
@@ -69,7 +69,7 @@ export PATH=$ISPNCON_HOME/bin:$PATH
 
 ----
 
-[[sid-65274046_InfinispanCommand-lineConsole-Basicusage]]
+[[sid-68355102_InfinispanCommand-lineConsole-Basicusage]]
 
 
 === Basic usage
@@ -100,7 +100,7 @@ ispncon [options] <operation> [operation_options] <op_arguments>
 
  The possible Operations are _put, get, delete, clear, exists, help, config, include_ and each one is described in the sections _Cache operations_ and _Other commands_ . 
 
-[[sid-65274046_InfinispanCommand-lineConsole-Configuration]]
+[[sid-68355102_InfinispanCommand-lineConsole-Configuration]]
 
 
 === Configuration
@@ -139,12 +139,12 @@ use_river_string_keys = True
 |===============
 
 
-[[sid-65274046_InfinispanCommand-lineConsole-Cacheoperations]]
+[[sid-68355102_InfinispanCommand-lineConsole-Cacheoperations]]
 
 
 === Cache operations
 
-[[sid-65274046_InfinispanCommand-lineConsole-put]]
+[[sid-68355102_InfinispanCommand-lineConsole-put]]
 
 
 ==== put
@@ -198,7 +198,7 @@ for discussion.
 
 In later ispncon versions python-memcached client might get replaced by a customized version.
 
-[[sid-65274046_InfinispanCommand-lineConsole-get]]
+[[sid-68355102_InfinispanCommand-lineConsole-get]]
 
 
 ==== get
@@ -236,7 +236,7 @@ get [options] <key>
 |===============
 
 
-[[sid-65274046_InfinispanCommand-lineConsole-delete]]
+[[sid-68355102_InfinispanCommand-lineConsole-delete]]
 
 
 ==== delete
@@ -273,7 +273,7 @@ delete [options] <key>
 |===============
 
 
-[[sid-65274046_InfinispanCommand-lineConsole-clear]]
+[[sid-68355102_InfinispanCommand-lineConsole-clear]]
 
 
 ==== clear
@@ -299,7 +299,7 @@ clear
 |===============
 
 
-[[sid-65274046_InfinispanCommand-lineConsole-exists]]
+[[sid-68355102_InfinispanCommand-lineConsole-exists]]
 
 
 ==== exists
@@ -328,7 +328,7 @@ exists <key>
 
 NOTE: memcached protocol doesn't support querying for existence of an entry in the cache so exists operation is implemented (inefficiently) by get opeartion, that gets the whole entry with all the data from the server.
 
-[[sid-65274046_InfinispanCommand-lineConsole-version]]
+[[sid-68355102_InfinispanCommand-lineConsole-version]]
 
 
 ==== version
@@ -365,12 +365,12 @@ version <key>
 |===============
 
 
-[[sid-65274046_InfinispanCommand-lineConsole-Othercommands]]
+[[sid-68355102_InfinispanCommand-lineConsole-Othercommands]]
 
 
 === Other commands
 
-[[sid-65274046_InfinispanCommand-lineConsole-help]]
+[[sid-68355102_InfinispanCommand-lineConsole-help]]
 
 
 ==== help
@@ -387,7 +387,7 @@ help <operation>
 
 NOTE: if no operation is supplied, prints list of supported operations
 
-[[sid-65274046_InfinispanCommand-lineConsole-config]]
+[[sid-68355102_InfinispanCommand-lineConsole-config]]
 
 
 ==== config
@@ -451,7 +451,7 @@ If no section is given, "ispncon" is implied.
 |===============
 
 
-[[sid-65274046_InfinispanCommand-lineConsole-include]]
+[[sid-68355102_InfinispanCommand-lineConsole-include]]
 
 
 ==== include
@@ -478,19 +478,19 @@ include <filename>
 
 NOTE: The name of this command and it's behaviour is going to change in the next version.
 
-[[sid-65274046_InfinispanCommand-lineConsole-Interoperabilitywithjavaclients]]
+[[sid-68355102_InfinispanCommand-lineConsole-Interoperabilitywithjavaclients]]
 
 
 === Interoperability with java clients
 
-[[sid-65274046_InfinispanCommand-lineConsole-HTTPclients]]
+[[sid-68355102_InfinispanCommand-lineConsole-HTTPclients]]
 
 
 ==== HTTP clients
 
 when exchanging data via REST interface, the values are interpreted by any client as sequence of bytes. The meaning is given to this byte-sequence by using MIME type specified via "Content-Type" HTTP header. No special interoperability measures are needed here.
 
-[[sid-65274046_InfinispanCommand-lineConsole-HotRodJavaClient]]
+[[sid-68355102_InfinispanCommand-lineConsole-HotRodJavaClient]]
 
 
 ==== Hot Rod Java Client
@@ -505,7 +505,7 @@ when exchanging data via REST interface, the values are interpreted by any clien
 
  Codecs can be used either by specifying a _$$default_codec$$_ option in the ~/.ispncon config file (in section ispncon) or by specifying a codec on each put resp get using _-e (--encode)_ resp _-d (--decode) options_ . 
 
-[[sid-65274046_InfinispanCommand-lineConsole-SpyMemcachedJavaClient]]
+[[sid-68355102_InfinispanCommand-lineConsole-SpyMemcachedJavaClient]]
 
 
 ==== SpyMemcached Java Client
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-56-Server_Command_Line_Options.adoc b/documentation/src/main/asciidoc/user_guide/chapter-56-Server_Command_Line_Options.adoc
index 0a6b6d3..925fbaf 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-56-Server_Command_Line_Options.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-56-Server_Command_Line_Options.adoc
@@ -1,4 +1,4 @@
-[[sid-65274047]]
+[[sid-68355103]]
 
 ==  Server Command Line Options
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-57-Interacting_With_Hot_Rod_Server_From_Within_Same_JVM.adoc b/documentation/src/main/asciidoc/user_guide/chapter-57-Interacting_With_Hot_Rod_Server_From_Within_Same_JVM.adoc
index 48b6b1c..72891c2 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-57-Interacting_With_Hot_Rod_Server_From_Within_Same_JVM.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-57-Interacting_With_Hot_Rod_Server_From_Within_Same_JVM.adoc
@@ -1,8 +1,8 @@
-[[sid-65274048]]
+[[sid-68355104]]
 
 ==  Interacting With Hot Rod Server From Within Same JVM
 
-[[sid-65274048_InteractingWithHotRodServerFromWithinSameJVM-Introduction]]
+[[sid-68355104_InteractingWithHotRodServerFromWithinSameJVM-Introduction]]
 
 
 === Introduction
@@ -11,11 +11,11 @@
 
  In this situations, we have to remember that link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=9470083$$[the Hot Rod protocol] specifies that keys and values are stored as byte arrays. This means that if the client code, using an existing Hot Rod client, stored Strings or Integers, or any other complex serializable or externalizable object, you won't be able to retrieve these objects straight from the cache that the Hot Rod server uses. 
 
- To actually get the fully constructed objects that you're after, you're gonna need to take the byte arrays stored within the Hot Rod server and unmarshall them into something that you can use. In the future, this is something that might be done for you, as suggested in link:$$https://jira.jboss.org/browse/ISPN-706$$[ISPN-706] , but for the time being, clients wanting to access Hot Rod server data will have to do it themselves. 
+ To actually get the fully constructed objects that you're after, you're gonna need to take the byte arrays stored within the Hot Rod server and unmarshall them into something that you can use. In the future, this is something that might be done for you, as suggested in link:$$https://jira.jboss.org/browse/ISPN-706$$[ISPN-706] (superseded by link:$$https://issues.jboss.org/browse/ISPN-2281$$[ISPN-2281] ), but for the time being, clients wanting to access Hot Rod server data will have to do it themselves. 
 
 Two different use cases need to be differentiated at this stage and to explain how to transform the Hot Rod server data into something usable, we'll assume that the clients are java clients:
 
-[[sid-65274048_InteractingWithHotRodServerFromWithinSameJVM-DataStoredDirectlyViaAHotRodClient]]
+[[sid-68355104_InteractingWithHotRodServerFromWithinSameJVM-DataStoredDirectlyViaAHotRodClient]]
 
 
 === Data Stored Directly Via A Hot Rod Client
@@ -59,7 +59,7 @@ GenericJBossMarshaller marshaller = new GenericJBossMarshaller();
 Object key = ...
 Object value = ...
 
-// Take the cache key and convert into a byte array, 
+// Take the cache key and convert into a byte array,
 // and wrap it with an instance of ByteArrayKey
 ByteArrayKey bytesKey = new ByteArrayKey(marshaller.objectToByteBuffer(key));
 
@@ -75,7 +75,7 @@ cache.put(bytesKey, cacheValue);
 
 ----
 
-[[sid-65274048_InteractingWithHotRodServerFromWithinSameJVM-DataStoredViaRemoteCacheStore]]
+[[sid-68355104_InteractingWithHotRodServerFromWithinSameJVM-DataStoredViaRemoteCacheStore]]
 
 
 === Data Stored Via Remote Cache Store
@@ -102,10 +102,10 @@ ByteArrayKey bytesKey = new ByteArrayKey(marshaller.objectToByteBuffer(key));
 CacheValue cacheValue = (CacheValue) cache.get(bytesKey);
 
 // However, in this case the data part of CacheValue does not contain directly
-// the value Instead, it contains an instance of CacheEntry, so we need to 
+// the value Instead, it contains an instance of CacheEntry, so we need to
 // unmarshall that and then get the actual value
-CacheEntry cacheEntry = (CacheEntry) 
-   marshaller.objectFromByteBuffer(cacheValue.data()); 
+CacheEntry cacheEntry = (CacheEntry)
+   marshaller.objectFromByteBuffer(cacheValue.data());
 Object value = cacheEntry.getValue();
 
 ----
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-58-Multiple_Tiers_of_Caches.adoc b/documentation/src/main/asciidoc/user_guide/chapter-58-Multiple_Tiers_of_Caches.adoc
index 57da0b2..d97e387 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-58-Multiple_Tiers_of_Caches.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-58-Multiple_Tiers_of_Caches.adoc
@@ -1,15 +1,15 @@
-[[sid-65274049]]
+[[sid-68355105]]
 
 ==  Multiple Tiers of Caches
 
-[[sid-65274049_MultipleTiersofCaches-Introduction]]
+[[sid-68355105_MultipleTiersofCaches-Introduction]]
 
 
 === Introduction
 
  The introduction of link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=9470083$$[HotRod] protocol and link:$$http://community.jboss.org/docs/DOC-14893?uniqueTitle=false#Remote_cache_loader$$[RemoteCacheLoader] opened the way for a set of new architectures in Infinispan, where layers of caches can exists and interact. This article takes a look at such an layered architecture. 
 
-[[sid-65274049_MultipleTiersofCaches-Buildingblocks]]
+[[sid-68355105_MultipleTiersofCaches-Buildingblocks]]
 
 
 === Building blocks
@@ -18,7 +18,7 @@
 
  link:$$http://community.jboss.org/docs/DOC-14893?uniqueTitle=false#Remote_cache_loader$$[RemoteCacheLoader] is a cache loader that knows how to read/store data in a remote infinispan cluster. For that it makes use of the java hotrod client. 
 
-[[sid-65274049_MultipleTiersofCaches-Samplearchitecture%2Fnearcaching]]
+[[sid-68355105_MultipleTiersofCaches-Samplearchitecture%2Fnearcaching]]
 
 
 === Sample architecture/near caching
@@ -29,11 +29,11 @@ image::[]
 
  
 
- The diagram above shows an Infinispan server cluster running 3 hotrod servers. This cluster is accessed remotely, through HotRod, by another infinispan cluster:  client cluster (upper part of the image). All the nodes in the server cluster are configured to run HotRod servers, so requests from remote loader are being balanced between them. The client cluster is configured with invalidation as cluster mode and a <<sid-65274001,RemoteCacheLoader>> to acess data stored in the server cluster. Application data is held on the server cluster which runs in DIST mode for scalability. 
+ The diagram above shows an Infinispan server cluster running 3 hotrod servers. This cluster is accessed remotely, through HotRod, by another infinispan cluster:  client cluster (upper part of the image). All the nodes in the server cluster are configured to run HotRod servers, so requests from remote loader are being balanced between them. The client cluster is configured with invalidation as cluster mode and a <<sid-68355053,RemoteCacheLoader>> to acess data stored in the server cluster. Application data is held on the server cluster which runs in DIST mode for scalability. 
 
  In this deployment the client code, running in same address space with the client cluster,  holds all its data in the server cluster. Client cluster acts as an _near-cache_ for frequently accessed entries. 
 
-[[sid-65274049_MultipleTiersofCaches-Wanttoknowmore%3F]]
+[[sid-68355105_MultipleTiersofCaches-Wanttoknowmore%3F]]
 
 
 === Want to know more?
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-59-Infinispan_REST_Server.adoc b/documentation/src/main/asciidoc/user_guide/chapter-59-Infinispan_REST_Server.adoc
index 1776a82..85ed74d 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-59-Infinispan_REST_Server.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-59-Infinispan_REST_Server.adoc
@@ -1,15 +1,15 @@
-[[sid-65274051]]
+[[sid-68355107]]
 
 ==  Infinispan REST Server
 
-[[sid-65274051_InfinispanRESTServer-Introduction]]
+[[sid-68355107_InfinispanRESTServer-Introduction]]
 
 
 === Introduction
 
  This server provides easy to use link:$$http://en.wikipedia.org/wiki/Representational_State_Transfer$$[RESTful] HTTP access to the Infinispan data grid, build on RESTEasy.  This application is delivered (currently) as a war, which you can deploy to a servlet container (as many instances as you need). 
 
-[[sid-65274051_InfinispanRESTServer-Configuration]]
+[[sid-68355107_InfinispanRESTServer-Configuration]]
 
 
 === Configuration
@@ -56,21 +56,21 @@ Creation of new named caches on the fly is not supported.
 
 As a result, if you don't use a custom configuration file, you'll only be able to interact with the default cache. To interact with more caches, use a configuration file with the desired named caches.
 
-[[sid-65274051_InfinispanRESTServer-AccessingDataviaURLs]]
+[[sid-68355107_InfinispanRESTServer-AccessingDataviaURLs]]
 
 
 === Accessing Data - via URLs
 
  HTTP PUT and POST methods are used to place data in the cache, with URLs to address the cache name and key(s) - the data being the body of the request (the data can be anything you like). It is important that a Content-Type header is set. GET/HEAD are used to retrieve data link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737132$$[Please see here for the details] . Other headers are used to control the cache settings and behaviour (detailed in that link). 
 
-[[sid-65274051_InfinispanRESTServer-Clientsidecode]]
+[[sid-68355107_InfinispanRESTServer-Clientsidecode]]
 
 
 === Client side code
 
 Part of the point of a RESTful service is that you don't need to have tightly coupled client libraries/bindings. All you need is a HTTP client library. For Java, Apache HTTP Commons Client works just fine (and is used in the integration tests), or you can use java.net API.
 
-[[sid-65274051_InfinispanRESTServer-Rubyclientcode%3A]]
+[[sid-68355107_InfinispanRESTServer-Rubyclientcode%3A]]
 
 
 ==== Ruby client code:
@@ -112,7 +112,7 @@ http.put('/infinispan/rest/Users/data/0', data.to_json, {"Content-Type" => "appl
 
 ----
 
-[[sid-65274051_InfinispanRESTServer-Pythonclientcode%3A]]
+[[sid-68355107_InfinispanRESTServer-Pythonclientcode%3A]]
 
 
 ==== Python client code:
@@ -143,7 +143,7 @@ print response.read()
 
 ----
 
-[[sid-65274051_InfinispanRESTServer-Javaclientcode%3A]]
+[[sid-68355107_InfinispanRESTServer-Javaclientcode%3A]]
 
 
 ==== Java client code:
@@ -253,7 +253,7 @@ public class RestExample {
 
 ....
 
-[[sid-65274051_InfinispanRESTServer-Future%3A]]
+[[sid-68355107_InfinispanRESTServer-Future%3A]]
 
 
 === Future:
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-6-Querying_Infinispan.adoc b/documentation/src/main/asciidoc/user_guide/chapter-6-Querying_Infinispan.adoc
index 73a58a0..453fbc4 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-6-Querying_Infinispan.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-6-Querying_Infinispan.adoc
@@ -1,22 +1,22 @@
-[[sid-65273978]]
+[[sid-68355029]]
 
 ==  Querying Infinispan
 
-[[sid-65273978_QueryingInfinispan-Theinfinispanquerymodule]]
+[[sid-68355029_QueryingInfinispan-Theinfinispanquerymodule]]
 
 
 === The infinispan-query module
 
  This module adds querying capabilities to Infinispan. It uses link:$$http://hibernate.org/subprojects/search$$[Hibernate Search] and link:$$http://lucene.apache.org/$$[Apache Lucene] to index and search objects in the cache. It allows users to obtain objects within the cache without needing to know the keys to each object that they want to obtain, so you can search your objects basing on some of it's properties, for example to retrieve all red cars (exact metadata match), or all books about a specific topic (full text search and relevance scoring). 
 
-[[sid-65273978_QueryingInfinispan-Configuration]]
+[[sid-68355029_QueryingInfinispan-Configuration]]
 
 
 ==== Configuration
 
- Indexing must be enabled in the configuration (as explained in <<sid-65273978,XML Configuration>> or <<sid-65273978,Programmatic configuration>> ). This will trigger automatic indexing of objects stored in the cache; there are several different ways to specify how these objects need to be indexed explained in the following paragraphs. To run queries you use the _SearchManager_ which exposes all necessary methods to get started. 
+ Indexing must be enabled in the configuration (as explained in <<sid-68355029,XML Configuration>> or <<sid-68355029,Programmatic configuration>> ). This will trigger automatic indexing of objects stored in the cache; there are several different ways to specify how these objects need to be indexed explained in the following paragraphs. To run queries you use the _SearchManager_ which exposes all necessary methods to get started. 
 
-[[sid-65273978_QueryingInfinispan-Simpleexample]]
+[[sid-68355029_QueryingInfinispan-Simpleexample]]
 
 
 === Simple example
@@ -100,21 +100,21 @@ for (Object book : objectList) {
 
  This barely scratches the surface of all what is possible to do: see the link:$$http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single$$[Hibernate Search reference documentation] to learn about sorting, numeric fields, declarative filters, caching filters, complex object graph indexing, custom types and the powerful faceting search API. 
 
-[[sid-65273978_QueryingInfinispan-NotabledifferenceswithHibernateSearch]]
+[[sid-68355029_QueryingInfinispan-NotabledifferenceswithHibernateSearch]]
 
 
 ==== Notable differences with Hibernate Search
 
  Using _@DocumentId_ to mark a field as identifier does not apply to Infinispan values; in Infinispan Query the identifier for all _@Indexed_ objects is the key used to store the value. You can still customize how the key is indexed using a combination of _@Transformable_ , _@ProvidedId_ , custom types and custom _FieldBridge_ implementations. 
 
-[[sid-65273978_QueryingInfinispan-RequirementsfortheKey%3A@Transformableand@ProvidedId]]
+[[sid-68355029_QueryingInfinispan-RequirementsfortheKey%3A@Transformableand@ProvidedId]]
 
 
 ==== Requirements for the Key: @Transformable and @ProvidedId
 
  The key for each value needs to be indexed as well, and the key instance must be transformed in a String. Infinispan includes some default transformation routines to encode common primitivies, but to use a custom key you must provide an implementation of _org.infinispan.query.Transformer_ . 
 
-[[sid-65273978_QueryingInfinispan-RegisteringaTransformerviaannotations]]
+[[sid-68355029_QueryingInfinispan-RegisteringaTransformerviaannotations]]
 
 
 ===== Registering a Transformer via annotations
@@ -145,7 +145,7 @@ public class CustomTransformer implements Transformer {
 
 ----
 
-[[sid-65273978_QueryingInfinispan-RegisteringaTransformerprogrammatically]]
+[[sid-68355029_QueryingInfinispan-RegisteringaTransformerprogrammatically]]
 
 
 ===== Registering a Transformer programmatically
@@ -157,19 +157,19 @@ Using this technique, you don't have to annotated your custom key type:
 org.infinispan.query.SearchManager.registerKeyTransformer(Class<?>, Class<? extends Transformer>)
 ----
 
-[[sid-65273978_QueryingInfinispan-@ProvidedId]]
+[[sid-68355029_QueryingInfinispan-@ProvidedId]]
 
 
 ===== @ProvidedId
 
  The _org.hibernate.search.annotations.ProvidedId_ annotation lets you apply advanced indexing options to the key field: the field name to be used, and/or specify a custom _FieldBridge_ . 
 
-[[sid-65273978_QueryingInfinispan-Configurationx]]
+[[sid-68355029_QueryingInfinispan-Configurationx]]
 
 
 === Configuration
 
-[[sid-65273978_QueryingInfinispan-ConfigurationviaXML]]
+[[sid-68355029_QueryingInfinispan-ConfigurationviaXML]]
 
 
 ==== Configuration via XML
@@ -196,7 +196,7 @@ org.infinispan.query.SearchManager.registerKeyTransformer(Class<?>, Class<? exte
 
  In this example the index is stored in memory, so when this nodes is shutdown the index is lost: good for a quick demo, but in real world cases you'll want to use the default (store on filesystem) or store the index in Infinispan as well. For the complete reference of properties to define, refer to the link:$$http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#search-configuration$$[Hibernate Search documentation] . 
 
-[[sid-65273978_QueryingInfinispan-LuceneDirectory]]
+[[sid-68355029_QueryingInfinispan-LuceneDirectory]]
 
 
 ==== Lucene Directory
@@ -212,11 +212,11 @@ org.infinispan.query.SearchManager.registerKeyTransformer(Class<?>, Class<? exte
 * Filesystem - stores the index in a locally mounted filesystem. This could be a network shared FS, but sharing this way is generally not recommended.
 
 
-*  Infinispan - stores the index in a different dedicated Infinispan cache. This cache can be configured as replicated or distributed, to share the index among nodes. See also <<sid-65273988>> . 
+*  Infinispan - stores the index in a different dedicated Infinispan cache. This cache can be configured as replicated or distributed, to share the index among nodes. See also <<sid-68355039>> . 
 
 Of course having a shared index vs. an independent index on each node directly affects behaviour of the Query module; some combinations might not make much sense.
 
-[[sid-65273978_QueryingInfinispan-Usingprogrammaticconfigurationandindexmapping]]
+[[sid-68355029_QueryingInfinispan-Usingprogrammaticconfigurationandindexmapping]]
 
 
 ==== Using programmatic configuration and index mapping
@@ -257,7 +257,7 @@ Assert.assertEquals(cq.getResultSize(), 1);
 
 ----
 
-[[sid-65273978_QueryingInfinispan-Cachemodesandmanagingindexes]]
+[[sid-68355029_QueryingInfinispan-Cachemodesandmanagingindexes]]
 
 
 === Cache modes and managing indexes
@@ -266,14 +266,14 @@ Assert.assertEquals(cq.getResultSize(), 1);
 
  Regarding actually configuring a Lucene directory, refer to the link:$$http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#search-configuration$$[Hibernate Search documentation] on how to pass in the appropriate Lucene configuration via the Properties object passed to QueryHelper. 
 
-[[sid-65273978_QueryingInfinispan-LOCAL]]
+[[sid-68355029_QueryingInfinispan-LOCAL]]
 
 
 ==== LOCAL
 
  In local mode, you may use any Lucene Directory implementation. Also the option _indexLocalOnly_ isn't meaningful. 
 
-[[sid-65273978_QueryingInfinispan-REPLICATION]]
+[[sid-68355029_QueryingInfinispan-REPLICATION]]
 
 
 ==== REPLICATION
@@ -290,7 +290,7 @@ image::[]
 
  
 
-[[sid-65273978_QueryingInfinispan-DISTRIBUTION]]
+[[sid-68355029_QueryingInfinispan-DISTRIBUTION]]
 
 
 ==== DISTRIBUTION
@@ -305,32 +305,32 @@ image::[]
 
  
 
-[[sid-65273978_QueryingInfinispan-INVALIDATION]]
+[[sid-68355029_QueryingInfinispan-INVALIDATION]]
 
 
 ==== INVALIDATION
 
 Indexing or searching of elements under INVALIDATION mode is not supported.
 
-[[sid-65273978_QueryingInfinispan-SharingtheIndex]]
+[[sid-68355029_QueryingInfinispan-SharingtheIndex]]
 
 
 === Sharing the Index
 
  The most simple way to share an index is to use some form of shared storage for the indexes, like an _FSDirectory_ on a shared disk; however this form is problematic as the _FSDirectory_ relies on specific locking semantics which are often incompletely implemented on network filesystems, or not reliable enough; if you go for this approach make sure to search for potential problems on the Lucene mailing lists for other experiences and workarounds. Good luck, test well. 
 
- There are many alternative Directory implementations you can find, one of the most suited approaches when working with Infinispan is of course to store the index in an Infinispan cache: have a look at the <<sid-65273988,InfinispanDirectoryProvider>> , as all Infinispan based layers it can be combined with persistent CacheLoaders to keep the index on a shared filesystem without the locking issues, or alternatively in a database, cloud storage, or any other CacheLoader implementation; you could backup the index in the same store used to backup your values. 
+ There are many alternative Directory implementations you can find, one of the most suited approaches when working with Infinispan is of course to store the index in an Infinispan cache: have a look at the <<sid-68355039,InfinispanDirectoryProvider>> , as all Infinispan based layers it can be combined with persistent CacheLoaders to keep the index on a shared filesystem without the locking issues, or alternatively in a database, cloud storage, or any other CacheLoader implementation; you could backup the index in the same store used to backup your values. 
 
  For full documentation on clustering the Lucene engine, refer to the link:$$http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#search-configuration$$[Hibernate Search documentation] to properly configure it clustered. 
 
-[[sid-65273978_QueryingInfinispan-ClusteringtheIndexinInfinispan]]
+[[sid-68355029_QueryingInfinispan-ClusteringtheIndexinInfinispan]]
 
 
 === Clustering the Index in Infinispan
 
  Again the configuration details are in the Hibernate Search reference, in particular in the link:$$http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#infinispan-directories$$[infinispan-directories] section. This backend will by default start a secondary Infinispan CacheManager, and optionally take another Infinispan configuration file: don't reuse the same configuration or you will start grids recursively! It is currently not possible to share the same CacheManager. 
 
-[[sid-65273978_QueryingInfinispan-RebuildingtheIndex]]
+[[sid-68355029_QueryingInfinispan-RebuildingtheIndex]]
 
 
 === Rebuilding the Index
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-60-CDI_Support.adoc b/documentation/src/main/asciidoc/user_guide/chapter-60-CDI_Support.adoc
index 8f71acc..2ab3613 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-60-CDI_Support.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-60-CDI_Support.adoc
@@ -1,15 +1,15 @@
-[[sid-65274052]]
+[[sid-68355108]]
 
 ==  CDI Support
 
-[[sid-65274052_CDISupport-Introduction]]
+[[sid-68355108_CDISupport-Introduction]]
 
 
 === Introduction
 
  Infinispan includes integration with CDI in the infinispan-cdi module. Configuration and injection of the Inifispan's Cache API is provided, and it is planned to bridge Cache listeners to the CDI event system. The module also provide partial support of the JCache (JSR-107) caching annotations - for further details see link:$$https://docs.google.com/document/d/1YZ-lrH6nW871Vd9Z34Og_EqbX_kxxJi55UrSn4yL2Ak/edit?hl=en&amp;pli=1#heading=h.jdfazu3s6oly$$[Chapter 8] of the JCACHE specification. 
 
-[[sid-65274052_CDISupport-MavenDependencies]]
+[[sid-68355108_CDISupport-MavenDependencies]]
 
 
 === Maven Dependencies
@@ -37,12 +37,12 @@
 ==== 
 
 
-[[sid-65274052_CDISupport-Embeddedcacheintegration]]
+[[sid-68355108_CDISupport-Embeddedcacheintegration]]
 
 
 === Embedded cache integration
 
-[[sid-65274052_CDISupport-Injectanembeddedcache]]
+[[sid-68355108_CDISupport-Injectanembeddedcache]]
 
 
 ==== Inject an embedded cache
@@ -131,7 +131,7 @@ public class Config {
 
  To use this cache in the GreetingService add the @GeetingCache qualifier on your cache injection point. Simple! 
 
-[[sid-65274052_CDISupport-Overridethedefaultembeddedcachemanagerandconfiguration]]
+[[sid-68355108_CDISupport-Overridethedefaultembeddedcachemanagerandconfiguration]]
 
 
 ==== Override the default embedded cache manager and configuration
@@ -187,7 +187,7 @@ public class Config {
 
 ----
 
-[[sid-65274052_CDISupport-Configurethetransportforclustereduse]]
+[[sid-68355108_CDISupport-Configurethetransportforclustereduse]]
 
 
 ==== Configure the transport for clustered use
@@ -211,12 +211,12 @@ public EmbeddedCacheManager defaultClusteredCacheManager() {
 
 ----
 
-[[sid-65274052_CDISupport-Remotecacheintegration]]
+[[sid-68355108_CDISupport-Remotecacheintegration]]
 
 
 === Remote cache integration
 
-[[sid-65274052_CDISupport-Injectaremotecache]]
+[[sid-68355108_CDISupport-Injectaremotecache]]
 
 
 ==== Inject a remote cache
@@ -273,7 +273,7 @@ public @interface RemoteGreetingCache {
 
  To use this cache in the GreetingService add the qualifier @RemoteGreetingCache qualifier on your cache injection. 
 
-[[sid-65274052_CDISupport-Overridethedefaultremotecachemanager]]
+[[sid-68355108_CDISupport-Overridethedefaultremotecachemanager]]
 
 
 ==== Override the default remote cache manager
@@ -293,7 +293,7 @@ public class Config {
 
 ----
 
-[[sid-65274052_CDISupport-Useacustomremote%2Fembeddedcachemanagerforoneormorecache]]
+[[sid-68355108_CDISupport-Useacustomremote%2Fembeddedcachemanagerforoneormorecache]]
 
 
 === Use a custom remote/embedded cache manager for one or more cache
@@ -336,7 +336,7 @@ public class Config {
 ==== 
 
 
-[[sid-65274052_CDISupport-UseaJBossAS7configuredcache]]
+[[sid-68355108_CDISupport-UseaJBossAS7configuredcache]]
 
 
 === Use a JBoss AS 7 configured cache
@@ -360,7 +360,7 @@ public class Config {
 
 ----
 
-[[sid-65274052_CDISupport-UseJCachecachingannotations]]
+[[sid-68355108_CDISupport-UseJCachecachingannotations]]
 
 
 === Use JCache caching annotations
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-61-Marshalling.adoc b/documentation/src/main/asciidoc/user_guide/chapter-61-Marshalling.adoc
index dd7c236..70ef1ff 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-61-Marshalling.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-61-Marshalling.adoc
@@ -1,8 +1,8 @@
-[[sid-65274050]]
+[[sid-68355106]]
 
 ==  Marshalling
 
-[[sid-65274050_Marshalling-Introduction]]
+[[sid-68355106_Marshalling-Introduction]]
 
 
 === Introduction
@@ -18,14 +18,14 @@ Marshalling is the process of converting Java POJOs into something that can be w
 
 * Store data in Infinispan in a wire format to provide lazy deserialization capabilities.
 
-[[sid-65274050_Marshalling-TheRoleOfJBossMarshalling]]
+[[sid-68355106_Marshalling-TheRoleOfJBossMarshalling]]
 
 
 === The Role Of JBoss Marshalling
 
 Since performance is a very important factor in this process, Infinispan uses JBoss Marshalling framework instead of standard Java Serialization in order to marshall/unmarshall Java POJOs. Amongst other things, this framework enables Infinispan to provide highly efficient ways to marshall internal Infinispan Java POJOs that are constantly used. Apart from providing more efficient ways to marshall Java POJOs, including internal Java classes, JBoss Marshalling uses highly performant java.io.ObjectOutput and java.io.ObjectInput implementations compared to standard java.io.ObjectOutputStream and java.io.ObjectInputStream.
 
-[[sid-65274050_Marshalling-SupportForNonSerializableObjects]]
+[[sid-68355106_Marshalling-SupportForNonSerializableObjects]]
 
 
 === Support For Non-Serializable Objects
@@ -45,19 +45,19 @@ From a users perspective, a very common concern is whether Infinispan supports s
 
  If you're unable to retrofit Serializable or Externalizable into the classes whose instances are stored in Infinispan, you could alternatively use something like link:$$http://xstream.codehaus.org/$$[XStream] to convert your Non-Serializable objects into an String that can be stored into Infinispan. You can find an example on how to use XStream link:$$http://anonsvn.jboss.org/repos/infinispan/trunk/core/src/test/java/org/infinispan/marshall/TestObjectStreamMarshaller.java$$[here] . The one caveat about using XStream is that it slows down the process of storing key/value objects due to the XML transformation that it needs to do. 
 
-[[sid-65274050_Marshalling-LazyDeserialization%28storeAsBinary%29]]
+[[sid-68355106_Marshalling-StoreAsBinary]]
 
 
-==== Lazy Deserialization (storeAsBinary)
+==== Store As Binary
 
-Lazy deserialization is the mechanism by which Infinispan by which serialization and deserialization of objects is deferred till the point in time in which they are used and needed. This typically means that any deserialization happens using the thread context class loader of the invocation that requires deserialization, and is an effective mechanism to provide classloader isolation. By default lazy deserialization is disabled but if you want to enable it, you can do it like this:
+Store as binary enables data to be stored in its serialized form. This can be useful to achieve lazy deserialization, which is the mechanism by which Infinispan by which serialization and deserialization of objects is deferred till the point in time in which they are used and needed. This typically means that any deserialization happens using the thread context class loader of the invocation that requires deserialization, and is an effective mechanism to provide classloader isolation. By default lazy deserialization is disabled but if you want to enable it, you can do it like this:
 
 
 * Via XML at the Cache level, either under &lt;namedCache&gt; or &lt;default&gt; elements:
 
 
 ----
-<lazyDeserialization enabled="true"/>
+<storeAsBinary enabled="true"/>
 ----
 
 
@@ -65,44 +65,62 @@ Lazy deserialization is the mechanism by which Infinispan by which serialization
 
 
 ----
-Configuration configuration = ...
-configuration.setUseLazyDeserialization(true);
+ConfigurationBuilder builder = ...
+builder.storeAsBinary().enable();
 
 ----
 
- _Note:_ Since 5.0 onwards, lazyDeserialization has been renamed to storeAsBinary to better represent its functionality: 
+[[sid-68355106_Marshalling-EqualityConsiderations]]
 
 
-----
-<storeAsBinary enabled="true"/>
-----
+===== Equality Considerations
 
-The programmatic configuration has changed as well together with a move towards more fluent configuration:
+ When using lazy deserialization/storing as binary, keys and values are wrapped as link:$$http://docs.jboss.org/infinispan/5.3/apidocs/org/infinispan/marshall/MarshalledValue$$[MarshalledValue] s.  It is this wrapper class that transparently takes care of serialization and deserialization on demand, and internally may have a reference to the object itself being wrapped, or the serialized, byte array representation of this object. 
 
+ This has a particular effect on the behavior of equality. The equals() method of this class will either compare binary representations (byte arrays) or delegate to the wrapped object instance's equals() method, depending on whether both instances being compared are in serialized or deserialized form at the time of comparison.  If one of the instances being compared is in one form and the other in another form, then one instance is either serialized or deserialized.  The preference will be to compare object representations, unless the cache is link:$$http://docs.jboss.org/infinispan/5.3/apidocs/org/infinispan/Cache.html#compact()$$[compacted] , in which case byte array comparison is favored. 
+
+This will affect the way keys stored in the cache will work, when {{storeAsBinary]} is used, since comparisons happen on the key which will be wrapped by a MarshalledValue. Implementers of equals() methods on their keys need to be aware of the behavior of equality comparison, when a key is wrapped as a MarshalledValue, as detailed above.
+
+[[sid-68355106_Marshalling-Storebyvalueviadefensivecopying]]
+
+
+===== Store-by-value via defensive copying
+
+ Starting with Infinispan 5.3.0.Final, storeAsBinary configuration offers the possibility to enable defensive copying, which allows for store-by-value like behaviour. 
+
+When defensive copying is disabled (default), Infinispan keeps object references around and stores them in a binary format lazily. So clients can still modify entries via original object references, and marshalling only happens when entries are to be replicated/distributed, or stored in a cache store. Since client references are valid, clients can make changes to entries in the cache using those references, but these modifications are only local and you still need to call one of the cache's put/replace... methods in order for changes to replicate. This is essentially store-by-reference. This is the default mode for performance reasons.
+
+When defensive copies are enabled, Infinispan marshalls objects the moment they're stored, hence changes made to object references are not stored in the cache, not even for local caches. This provides store-by-value like behaviour. Enabling defensive copying can be achieved:
+
+
+*  Via XML at the Cache level, either under &lt;namedCache&gt; or &lt;default&gt; elements: 
 
-----
-Configuration configuration = ...
-configuration.fluent().storeAsBinary();
 
 ----
+<storeAsBinary enabled="true" defensive="true"/>
+----
 
-Equality Considerations
 
- When using lazy deserialization/storing as binary, keys and values are wrapped as link:$$http://docs.jboss.org/infinispan/5.0/apidocs/?org/infinispan/marshall/MarshalledValue$$[MarshalledValue] s.  It is this wrapper class that transparently takes care of serialization and deserialization on demand, and internally may have a reference to the object itself being wrapped, or the serialized, byte array representation of this object This has a particular effect on the behavior of equality.  The equals() method of this class will either compare binary representations (byte arrays) or delegate to the wrapped object instance's equals() method, depending on whether both instances being compared are in serialized or deserialized form at the time of comparison.  If one of the instances being compared is in one form and the other in another form, then one instance is either serialized or deserialized.  The preference will be to compare object representations, unless the cache is link:$$http://docs.jboss.org/infinispan/5.0/apidocs/org/infinispan/Cache.html#compact()$$[compacted] , in which case byte array comparison is favored. 
+* Programmatically:
 
-This will affect the way keys stored in the cache will work, when storeAsBinary is used, since comparisons happen on the key which will be wrapped by a MarshalledValue.  Implementers of equals() methods on their keys need to be aware of the behavior of equality comparison, when a key is wrapped as a MarshalledValue, as detailed above.
 
-[[sid-65274050_Marshalling-AdvancedConfiguration]]
+----
+ConfigurationBuilder builder = ...
+builder.storeAsBinary().enable().defensive(true);
+
+----
+
+[[sid-68355106_Marshalling-AdvancedConfiguration]]
 
 
 === Advanced Configuration
 
  Internally, Infinispan uses an implementation of link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/marshall/Marshaller.html$$[this Marshaller interface] in order to marshall/unmarshall Java objects so that they're sent other nodes in the grid, or so that they're stored in a cache store, or even so to transform them into byte arrays for lazy deserialization. 
 
- By default, Infinispan uses the link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/marshall/VersionAwareMarshaller.html$$[VersionAwareMarshaller] which, as the name suggests, adds a version short to the start of any stream when writing, enabling similar VersionAwareMarshaller instances to read the version short and know which specific marshaller implementation to delegate the call to. Using a VersionAwareMarshaller helps achieve wire protocol compatibility between minor releases but still affords us the flexibility to tweak and improve the wire protocol between minor or micro releases. Optionally, Infinispan users to optionally provide their own marshaller, for example: 
+ By default, Infinispan uses the link:$$http://docs.jboss.org/infinispan/5.3/apidocs/org/infinispan/marshall/VersionAwareMarshaller.html$$[VersionAwareMarshaller] which, as the name suggests, adds a version short to the start of any stream when writing, enabling similar VersionAwareMarshaller instances to read the version short and know which specific marshaller implementation to delegate the call to. Using a VersionAwareMarshaller helps achieve wire protocol compatibility between minor releases but still affords us the flexibility to tweak and improve the wire protocol between minor or micro releases. Optionally, Infinispan users to optionally provide their own marshaller, for example: 
 
 
-* Via XML at the CacheManager level, under &lt;global&gt; element:
+*  Via XML at the CacheManager level, under &lt;global&gt; element: 
 
 
 ----
@@ -114,12 +132,15 @@ This will affect the way keys stored in the cache will work, when storeAsBinary
 
 
 ----
-GlobalConfiguration globalConfiguration = ...
-globalConfiguration.setMarshallerClass("com.acme.MyMarshaller")
+GlobalConfigurationBuilder builder = ...
+builder.serialization().marshaller(myMarshaller); // needs an instance of the marshaller
 
 ----
 
-Troubleshooting
+[[sid-68355106_Marshalling-Troubleshooting]]
+
+
+==== Troubleshooting
 
 Sometimes it might happen that the Infinispan marshalling layer, and in particular JBoss Marshalling, might have issues marshalling/unmarshalling some user object. In Infinispan 4.0, marshalling exceptions will contain further information on the objects that were being marshalled. Example:
 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-62-Batching.adoc b/documentation/src/main/asciidoc/user_guide/chapter-62-Batching.adoc
index f67c8da..7c77f26 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-62-Batching.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-62-Batching.adoc
@@ -1,15 +1,15 @@
-[[sid-65274028]]
+[[sid-68355084]]
 
 ==  Batching
 
-[[sid-65274028_Batching-Introduction]]
+[[sid-68355084_Batching-Introduction]]
 
 
 === Introduction
 
 Generally speaking, one should use batching API whenever the only participant in the transaction is an Infinispan cluster. On the other hand, JTA transactions (involving TransactionManager) should be used whenever the transactions involves multiple systems. E.g. considering the "Hello world!" of transactions: transferring money from one bank account to the other. If both accounts are stored within Infinispan, then batching can be used. If one account is in a database and the other is Infinispan, then distributed transactions are required.
 
-[[sid-65274028_Batching-Configuringbatching]]
+[[sid-68355084_Batching-Configuringbatching]]
 
 
 === Configuring batching
@@ -34,7 +34,7 @@ By default, invocation batching is disabled.
 
 Note that you do not have to have a transaction manager defined to use batching.
 
-[[sid-65274028_Batching-BatchingAPI]]
+[[sid-68355084_Batching-BatchingAPI]]
 
 
 === Batching API
@@ -61,7 +61,7 @@ cache.endBatch(false); // This will "discard" changes made in the batch
 
 ----
 
-[[sid-65274028_Batching-Advanced%3AbatchingandJTA]]
+[[sid-68355084_Batching-Advanced%3AbatchingandJTA]]
 
 
 === Advanced: batching and JTA
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-63-Hot_Rod_Hash_Functions.adoc b/documentation/src/main/asciidoc/user_guide/chapter-63-Hot_Rod_Hash_Functions.adoc
index 9c64f84..04ceb33 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-63-Hot_Rod_Hash_Functions.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-63-Hot_Rod_Hash_Functions.adoc
@@ -1,14 +1,14 @@
-[[sid-65274059]]
+[[sid-68355116]]
 
 ==  Hot Rod Hash Functions
 
 Infinispan makes use of a consistent hash function to place nodes on a hash wheel, and to place keys of entries on the same wheel to determine where entries live.
 
- In Infinispan 4.2 and earlier, the hash space was hardcoded to 10240, but since 5.0, the hash space is link:$$http://download.oracle.com/javase/6/docs/api/java/lang/Integer.html#MAX_VALUE$$[Integer.MAX_INT] . Please note that since Hot Rod clients should not assume a particular hash space by default, everytime a hash-topology change is detected, this value is sent back to the client via the <<sid-65274055,Hot Rod protocol>> . 
+ In Infinispan 4.2 and earlier, the hash space was hardcoded to 10240, but since 5.0, the hash space is link:$$http://download.oracle.com/javase/6/docs/api/java/lang/Integer.html#MAX_VALUE$$[Integer.MAX_INT] . Please note that since Hot Rod clients should not assume a particular hash space by default, everytime a hash-topology change is detected, this value is sent back to the client via the <<sid-68355112,Hot Rod protocol>> . 
 
 When interacting with Infinispan via the Hot Rod protocol, it is mandated that keys (and values) are byte arrays, to ensure platform neutral behavior.  As such, smart-clients which are aware of hash distribution on the backend would need to be able to calculate the hash codes of such byte array keys, again in a platform-neutral manner. To this end, the hash functions used by Infinispan are versioned and documented, so that it can be re-implemented by non-Java clients if needed.
 
- The version of the hash function in use is provided in the <<sid-65274055,Hot Rod protocol>> , as the hash function version parameter. 
+ The version of the hash function in use is provided in the <<sid-68355112,Hot Rod protocol>> , as the hash function version parameter. 
 
 
 .  Version 1 (single byte, 0x01) The initial version of the hash function in use is link:$$https://github.com/infinispan/infinispan/blob/master/core/src/main/java/org/infinispan/util/hash/MurmurHash2.java$$[Austin Appleby's MurmurHash 2.0 algorithm] , a fast, non-cryptographic hash that exhibits excellent distribution, collision resistance and avalanche behavior.  The specific version of the algorithm used is the slightly slower, endian-neutral version that allows consistent behavior across both big- and little-endian CPU architectures.  Infinispan's version also hard-codes the hash seed as -1. For details of the algorithm, please visit link:$$http://sites.google.com/site/murmurhash/$$[Austin Appleby's MurmurHash 2.0 page] .  Other implementations are detailed on link:$$http://en.wikipedia.org/wiki/MurmurHash$$[Wikipedia] . This hash function was the default one used by the Hot Rod server until Infinispan 4.2.1. 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-64-Hot_Rod_Protocol.adoc b/documentation/src/main/asciidoc/user_guide/chapter-64-Hot_Rod_Protocol.adoc
index ed3c570..4d02bc9 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-64-Hot_Rod_Protocol.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-64-Hot_Rod_Protocol.adoc
@@ -1,22 +1,22 @@
-[[sid-65274055]]
+[[sid-68355112]]
 
 ==  Hot Rod Protocol
 
 
-.  <<sid-65274056,Hot Rod protocol version 1.0>> 
+.  <<sid-68355113,Hot Rod protocol version 1.0>> 
 
 
-.  <<sid-65274057,Hot Rod protocol version 1.1>> 
+.  <<sid-68355114,Hot Rod protocol version 1.1>> 
 
 
-.  <<sid-65274058,Hot Rod protocol version 1.2>> 
+.  <<sid-68355115,Hot Rod protocol version 1.2>> 
 
-[[sid-65274056]]
+[[sid-68355113]]
 
 
 === Hot Rod Protocol - Version 1.0
 
-[[sid-65274056_HotRodProtocol-Version1.0-Introduction]]
+[[sid-68355113_HotRodProtocol-Version1.0-Introduction]]
 
 
 ==== Introduction
@@ -51,7 +51,7 @@ All key and values are sent and stored as byte arrays. Hot Rod makes no assumpti
 ==== 
 
 
-[[sid-65274056_HotRodProtocol-Version1.0-RequestHeader]]
+[[sid-68355113_HotRodProtocol-Version1.0-RequestHeader]]
 
 
 ==== Request Header
@@ -147,7 +147,7 @@ The header for a request is composed of:
 
 *  _Transaction Id_ : The byte array uniquely identifying the transaction associated to this call. It's length is determined by the transaction type. If transaction type is 0, no transaction id will be present. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-ResponseHeader]]
+[[sid-68355113_HotRodProtocol-Version1.0-ResponseHeader]]
 
 
 ==== Response Header
@@ -179,14 +179,14 @@ The header for a request is composed of:
 
 *  _Topology Change Marker_ : This is a marker byte that indicates whether the response is prepended with topology change information. When no topology change follows, the content of this byte is 0. If a topology change follows, its contents are 1. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-TopologyChangeHeaders]]
+[[sid-68355113_HotRodProtocol-Version1.0-TopologyChangeHeaders]]
 
 
 ===== Topology Change Headers
 
 The following section discusses how the response headers look for topology-aware or hash-distribution-aware clients when there's been a cluster or view formation change. Note that it's the server that makes the decision on whether it sends back the new topology based on the current topology id and the one the client sent. If they're different, it will send back the new topology.
 
-[[sid-65274056_HotRodProtocol-Version1.0-TopologyAwareClientTopologyChangeHeader]]
+[[sid-68355113_HotRodProtocol-Version1.0-TopologyAwareClientTopologyChangeHeader]]
 
 
 ===== =Topology-Aware Client Topology Change Header
@@ -215,7 +215,7 @@ This is what topology-aware clients receive as response header when a topology c
 
 *  _Port_ : Port that Hot Rod clients can use to communicat with this cluster member. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-HashDistributionAwareClientTopologyChangeHeader]]
+[[sid-68355113_HotRodProtocol-Version1.0-HashDistributionAwareClientTopologyChangeHeader]]
 
 
 ===== =Distribution-Aware Client Topology Change Header
@@ -238,7 +238,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 *  _Number key owners_ : Globally configured number of copies for each Infinispan distributed key 
 
 
-*  _Hash function version_ : Hash function version, pointing to a specific hash function in use. See <<sid-65274059,Hot Rod hash functions>> for details. 
+*  _Hash function version_ : Hash function version, pointing to a specific hash function in use. See <<sid-68355116,Hot Rod hash functions>> for details. 
 
 
 *  _Hash space size_ : Modulus used by Infinispan for for all module arithmetic related to hash code generation. Clients will likely require this information in order to apply the correct hash calculation to the keys. 
@@ -249,12 +249,12 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  _Hashcode_ : 32 bit integer representing the hashcode of a cluster member that a Hot Rod client can use indentify in which cluster member a key is located having applied the CSA to it. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-Operations]]
+[[sid-68355113_HotRodProtocol-Version1.0-Operations]]
 
 
 ==== Operations
 
-[[sid-65274056_HotRodProtocol-Version1.0-Get%2FRemove%2FContainsKey%2FGetWithVersion]]
+[[sid-68355113_HotRodProtocol-Version1.0-Get%2FRemove%2FContainsKey%2FGetWithVersion]]
 
 
 ===== Get/Remove/ContainsKey/GetWithVersion
@@ -319,7 +319,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  _Entry Version_ : Unique value of an existing entry's modification. The protocol does not mandate that entry_version values are sequential. They just need to be unique per update at the key level. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-BulkGet]]
+[[sid-68355113_HotRodProtocol-Version1.0-BulkGet]]
 
 
 ===== BulkGet
@@ -350,7 +350,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  _More_ : One byte representing whether more entries need to be read from the stream. So, when it's set to 1, it means that an entry followes, whereas when it's set to 0, it's the end of stream and no more entries are left to read. For more information on BulkGet look link:$$http://community.jboss.org/docs/DOC-15592$$[here] 
 
-[[sid-65274056_HotRodProtocol-Version1.0-Put%2FPutIfAbsent%2FReplace]]
+[[sid-68355113_HotRodProtocol-Version1.0-Put%2FPutIfAbsent%2FReplace]]
 
 
 ===== Put/PutIfAbsent/Replace
@@ -398,7 +398,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  Put/PutIfAbsent/Replace response: If ForceReturnPreviousValue has been passed, these responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-ReplaceIfUnmodified]]
+[[sid-68355113_HotRodProtocol-Version1.0-ReplaceIfUnmodified]]
 
 
 ===== ReplaceIfUnmodified
@@ -431,7 +431,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  Response: If ForceReturnPreviousValue has been passed, this responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-RemoveIfUnmodified]]
+[[sid-68355113_HotRodProtocol-Version1.0-RemoveIfUnmodified]]
 
 
 ===== RemoveIfUnmodified
@@ -461,7 +461,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  Response: If ForceReturnPreviousValue has been passed, this responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-Clear]]
+[[sid-68355113_HotRodProtocol-Version1.0-Clear]]
 
 
 ===== Clear
@@ -482,7 +482,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  0x00 status if infinispan was cleared 
 
-[[sid-65274056_HotRodProtocol-Version1.0-Stats]]
+[[sid-68355113_HotRodProtocol-Version1.0-Stats]]
 
 
 ===== Stats
@@ -530,7 +530,7 @@ Returns a summary of all available statistics. For each statistic returned, a na
 
 *  _Value_ : String containing statistic value. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-Ping]]
+[[sid-68355113_HotRodProtocol-Version1.0-Ping]]
 
 
 ===== Ping
@@ -543,7 +543,7 @@ Application level request to see if the server is available.
 
 *  0x00 - if no errors 
 
-[[sid-65274056_HotRodProtocol-Version1.0-ErrorHandling]]
+[[sid-68355113_HotRodProtocol-Version1.0-ErrorHandling]]
 
 
 ==== Error Handling
@@ -563,14 +563,14 @@ Response header contains error op code response and corresponding error status n
 
 *  _Error message_ : Error message. In the case of 0x84 , this error field contains the latest version supported by the hot rod server. Length is defined by total body length. 
 
-[[sid-65274056_HotRodProtocol-Version1.0-MultiGetOperations]]
+[[sid-68355113_HotRodProtocol-Version1.0-MultiGetOperations]]
 
 
 ==== Multi-Get Operations
 
 A multi-get operation is a form of get operation that instead of requesting a single key, requests a set of keys. The Hot Rod protocol does not include such operation but remote Hot Rod clients could easily implement this type of operations by either parallelizing/pipelining individual get requests. Another possibility would be for remote clients to use async or non-blocking get requests. For example, if a client wants N keys, it could send send N async get requests and then wait for all the replies. Finally, multi-get is not to be confused with bulk-get operations. In bulk-gets, either all or a number of keys are retrieved, but the client does not know which keys to retrieve, whereas in multi-get, the client defines which keys to retrieve.
 
-[[sid-65274056_HotRodProtocol-Version1.0-ExamplePutrequest]]
+[[sid-68355113_HotRodProtocol-Version1.0-ExamplePutrequest]]
 
 
 ==== Example - Put request
@@ -632,12 +632,12 @@ A multi-get operation is a form of get operation that instead of requesting a si
 |===============
 
 
-[[sid-65274057]]
+[[sid-68355114]]
 
 
 === Hot Rod Protocol - Version 1.1
 
-[[sid-65274057_HotRodProtocol-Version1.1-Introduction]]
+[[sid-68355114_HotRodProtocol-Version1.1-Introduction]]
 
 
 ==== Introduction
@@ -672,7 +672,7 @@ All key and values are sent and stored as byte arrays. Hot Rod makes no assumpti
 ==== 
 
 
-[[sid-65274057_HotRodProtocol-Version1.1-RequestHeader]]
+[[sid-68355114_HotRodProtocol-Version1.1-RequestHeader]]
 
 
 ==== Request Header
@@ -778,7 +778,7 @@ The header for a request is composed of:
 
 *  _Transaction Id_ : The byte array uniquely identifying the transaction associated to this call. It's length is determined by the transaction type. If transaction type is 0, no transaction id will be present. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-ResponseHeader]]
+[[sid-68355114_HotRodProtocol-Version1.1-ResponseHeader]]
 
 
 ==== Response Header
@@ -810,14 +810,14 @@ The header for a request is composed of:
 
 *  _Topology Change Marker_ : This is a marker byte that indicates whether the response is prepended with topology change information. When no topology change follows, the content of this byte is 0. If a topology change follows, its contents are 1. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-TopologyChangeHeaders]]
+[[sid-68355114_HotRodProtocol-Version1.1-TopologyChangeHeaders]]
 
 
 ===== Topology Change Headers
 
 The following section discusses how the response headers look for topology-aware or hash-distribution-aware clients when there's been a cluster or view formation change. Note that it's the server that makes the decision on whether it sends back the new topology based on the current topology id and the one the client sent. If they're different, it will send back the new topology.
 
-[[sid-65274057_HotRodProtocol-Version1.1-TopologyAwareClientTopologyChangeHeader]]
+[[sid-68355114_HotRodProtocol-Version1.1-TopologyAwareClientTopologyChangeHeader]]
 
 
 ===== =Topology-Aware Client Topology Change Header
@@ -846,7 +846,7 @@ This is what topology-aware clients receive as response header when a topology c
 
 *  _Port_ : Port that Hot Rod clients can use to communicat with this cluster member. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-HashDistributionAwareClientTopologyChangeHeader]]
+[[sid-68355114_HotRodProtocol-Version1.1-HashDistributionAwareClientTopologyChangeHeader]]
 
 
 ===== =Distribution-Aware Client Topology Change Header
@@ -877,7 +877,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 *  _Number key owners_ : Globally configured number of copies for each Infinispan distributed key. If the cache is not configured with distribution, this field will return 0 . 
 
 
-*  _Hash function version_ : Hash function version, pointing to a specific hash function in use. See <<sid-65274059,Hot Rod hash functions>> for details. If cache is not configured with distribution, this field will contain 0 . 
+*  _Hash function version_ : Hash function version, pointing to a specific hash function in use. See <<sid-68355116,Hot Rod hash functions>> for details. If cache is not configured with distribution, this field will contain 0 . 
 
 
 *  _Hash space size_ : Modulus used by Infinispan for for all module arithmetic related to hash code generation. Clients will likely require this information in order to apply the correct hash calculation to the keys. If cache is not configured with distribution, this field will contain 0 . 
@@ -888,7 +888,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  _Number virtual nodes_ : Field added in version 1.1 of the protocol that represents the number of configured virtual nodes. If no virtual nodes are configured or the cache is not configured with distribution, this field will contain 0 . 
 
-[[sid-65274057_HotRodProtocol-Version1.1-Servernodehashcodecalculation]]
+[[sid-68355114_HotRodProtocol-Version1.1-Servernodehashcodecalculation]]
 
 
 ===== ==Server node hash code calculation
@@ -923,12 +923,12 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 }
 ----
 
-[[sid-65274057_HotRodProtocol-Version1.1-Operations]]
+[[sid-68355114_HotRodProtocol-Version1.1-Operations]]
 
 
 ==== Operations
 
-[[sid-65274057_HotRodProtocol-Version1.1-Get%2FRemove%2FContainsKey%2FGetWithVersion]]
+[[sid-68355114_HotRodProtocol-Version1.1-Get%2FRemove%2FContainsKey%2FGetWithVersion]]
 
 
 ===== Get/Remove/ContainsKey/GetWithVersion
@@ -993,7 +993,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  _Entry Version_ : Unique value of an existing entry's modification. The protocol does not mandate that entry_version values are sequential. They just need to be unique per update at the key level. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-BulkGet]]
+[[sid-68355114_HotRodProtocol-Version1.1-BulkGet]]
 
 
 ===== BulkGet
@@ -1024,7 +1024,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  _More_ : One byte representing whether more entries need to be read from the stream. So, when it's set to 1, it means that an entry followes, whereas when it's set to 0, it's the end of stream and no more entries are left to read. For more information on BulkGet look link:$$http://community.jboss.org/docs/DOC-15592$$[here] 
 
-[[sid-65274057_HotRodProtocol-Version1.1-Put%2FPutIfAbsent%2FReplace]]
+[[sid-68355114_HotRodProtocol-Version1.1-Put%2FPutIfAbsent%2FReplace]]
 
 
 ===== Put/PutIfAbsent/Replace
@@ -1072,7 +1072,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  Put/PutIfAbsent/Replace response: If ForceReturnPreviousValue has been passed, these responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-ReplaceIfUnmodified]]
+[[sid-68355114_HotRodProtocol-Version1.1-ReplaceIfUnmodified]]
 
 
 ===== ReplaceIfUnmodified
@@ -1105,7 +1105,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  Response: If ForceReturnPreviousValue has been passed, this responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-RemoveIfUnmodified]]
+[[sid-68355114_HotRodProtocol-Version1.1-RemoveIfUnmodified]]
 
 
 ===== RemoveIfUnmodified
@@ -1135,7 +1135,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  Response: If ForceReturnPreviousValue has been passed, this responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-Clear]]
+[[sid-68355114_HotRodProtocol-Version1.1-Clear]]
 
 
 ===== Clear
@@ -1156,7 +1156,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  0x00 status if infinispan was cleared 
 
-[[sid-65274057_HotRodProtocol-Version1.1-Stats]]
+[[sid-68355114_HotRodProtocol-Version1.1-Stats]]
 
 
 ===== Stats
@@ -1204,7 +1204,7 @@ Returns a summary of all available statistics. For each statistic returned, a na
 
 *  _Value_ : String containing statistic value. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-Ping]]
+[[sid-68355114_HotRodProtocol-Version1.1-Ping]]
 
 
 ===== Ping
@@ -1217,7 +1217,7 @@ Application level request to see if the server is available.
 
 *  0x00 - if no errors 
 
-[[sid-65274057_HotRodProtocol-Version1.1-ErrorHandling]]
+[[sid-68355114_HotRodProtocol-Version1.1-ErrorHandling]]
 
 
 ==== Error Handling
@@ -1237,14 +1237,14 @@ Response header contains error op code response and corresponding error status n
 
 *  _Error message_ : Error message. In the case of 0x84 , this error field contains the latest version supported by the hot rod server. Length is defined by total body length. 
 
-[[sid-65274057_HotRodProtocol-Version1.1-MultiGetOperations]]
+[[sid-68355114_HotRodProtocol-Version1.1-MultiGetOperations]]
 
 
 ==== Multi-Get Operations
 
 A multi-get operation is a form of get operation that instead of requesting a single key, requests a set of keys. The Hot Rod protocol does not include such operation but remote Hot Rod clients could easily implement this type of operations by either parallelizing/pipelining individual get requests. Another possibility would be for remote clients to use async or non-blocking get requests. For example, if a client wants N keys, it could send send N async get requests and then wait for all the replies. Finally, multi-get is not to be confused with bulk-get operations. In bulk-gets, either all or a number of keys are retrieved, but the client does not know which keys to retrieve, whereas in multi-get, the client defines which keys to retrieve.
 
-[[sid-65274057_HotRodProtocol-Version1.1-ExamplePutrequest]]
+[[sid-68355114_HotRodProtocol-Version1.1-ExamplePutrequest]]
 
 
 ==== Example - Put request
@@ -1306,12 +1306,12 @@ A multi-get operation is a form of get operation that instead of requesting a si
 |===============
 
 
-[[sid-65274058]]
+[[sid-68355115]]
 
 
 === Hot Rod Protocol - Version 1.2
 
-[[sid-65274058_HotRodProtocol-Version1.2-Introduction]]
+[[sid-68355115_HotRodProtocol-Version1.2-Introduction]]
 
 
 ==== Introduction
@@ -1322,7 +1322,7 @@ This article provides detailed information about the first version of the custom
 [TIP]
 .Infinispan versions
 ==== 
-This version of the protocol is implemented since Infinispan 5.2.0.FINAL
+This version of the protocol is implemented since Infinispan 5.2.0.Final. Since Infinispan 5.3.0, HotRod supports encryption via SSL. However, since this only affects the transport, the version number of the protocol has not been incremented.
 
 
 ==== 
@@ -1346,7 +1346,7 @@ All key and values are sent and stored as byte arrays. Hot Rod makes no assumpti
 ==== 
 
 
-[[sid-65274058_HotRodProtocol-Version1.2-RequestHeader]]
+[[sid-68355115_HotRodProtocol-Version1.2-RequestHeader]]
 
 
 ==== Request Header
@@ -1456,7 +1456,7 @@ The header for a request is composed of:
 
 *  _Transaction Id_ : The byte array uniquely identifying the transaction associated to this call. It's length is determined by the transaction type. If transaction type is 0, no transaction id will be present. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-ResponseHeader]]
+[[sid-68355115_HotRodProtocol-Version1.2-ResponseHeader]]
 
 
 ==== Response Header
@@ -1488,14 +1488,14 @@ The header for a request is composed of:
 
 *  _Topology Change Marker_ : This is a marker byte that indicates whether the response is prepended with topology change information. When no topology change follows, the content of this byte is 0. If a topology change follows, its contents are 1. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-TopologyChangeHeaders]]
+[[sid-68355115_HotRodProtocol-Version1.2-TopologyChangeHeaders]]
 
 
 ===== Topology Change Headers
 
 The following section discusses how the response headers look for topology-aware or hash-distribution-aware clients when there's been a cluster or view formation change. Note that it's the server that makes the decision on whether it sends back the new topology based on the current topology id and the one the client sent. If they're different, it will send back the new topology.
 
-[[sid-65274058_HotRodProtocol-Version1.2-TopologyAwareClientTopologyChangeHeader]]
+[[sid-68355115_HotRodProtocol-Version1.2-TopologyAwareClientTopologyChangeHeader]]
 
 
 ===== =Topology-Aware Client Topology Change Header
@@ -1524,7 +1524,7 @@ This is what topology-aware clients receive as response header when a topology c
 
 *  _Port_ : Port that Hot Rod clients can use to communicat with this cluster member. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-HashDistributionAwareClientTopologyChangeHeader]]
+[[sid-68355115_HotRodProtocol-Version1.2-HashDistributionAwareClientTopologyChangeHeader]]
 
 
 ===== =Distribution-Aware Client Topology Change Header
@@ -1545,7 +1545,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 *  _Number key owners_ : Globally configured number of copies for each Infinispan distributed key. If the cache is not configured with distribution, this field will return 0 . 
 
 
-*  _Hash function version_ : Hash function version, pointing to a specific hash function in use. See <<sid-65274059,Hot Rod hash functions>> for details. If cache is not configured with distribution, this field will contain 0 . 
+*  _Hash function version_ : Hash function version, pointing to a specific hash function in use. See <<sid-68355116,Hot Rod hash functions>> for details. If cache is not configured with distribution, this field will contain 0 . 
 
 
 *  _Hash space size_ : Modulus used by Infinispan for for all module arithmetic related to hash code generation. Clients will likely require this information in order to apply the correct hash calculation to the keys. If cache is not configured with distribution, this field will contain 0 . 
@@ -1556,7 +1556,7 @@ This is what hash-distribution-aware clients receive as response header when a t
 
 *  _Number virtual nodes_ : Field added in version 1.1 of the protocol that represents the number of configured virtual nodes. If no virtual nodes are configured or the cache is not configured with distribution, this field will contain 0 . 
 
-[[sid-65274058_HotRodProtocol-Version1.2-Servernodehashcodecalculation]]
+[[sid-68355115_HotRodProtocol-Version1.2-Servernodehashcodecalculation]]
 
 
 ===== ==Server node hash code calculation
@@ -1591,12 +1591,12 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 }
 ----
 
-[[sid-65274058_HotRodProtocol-Version1.2-Operations]]
+[[sid-68355115_HotRodProtocol-Version1.2-Operations]]
 
 
 ==== Operations
 
-[[sid-65274058_HotRodProtocol-Version1.2-Get%2FRemove%2FContainsKey%2FGetWithVersion%2FGetWithM...]]
+[[sid-68355115_HotRodProtocol-Version1.2-Get%2FRemove%2FContainsKey%2FGetWithVersion%2FGetWithM...]]
 
 
 ===== Get/Remove/ContainsKey/GetWithVersion/GetWithMetadata
@@ -1689,7 +1689,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  _Entry Version_ : Unique value of an existing entry's  modification. The protocol does not mandate that entry_version values  are sequential. They just need to be unique per update at the key level. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-BulkGet]]
+[[sid-68355115_HotRodProtocol-Version1.2-BulkGet]]
 
 
 ===== BulkGet
@@ -1720,7 +1720,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  _More_ : One byte representing whether more entries need to be read from the stream. So, when it's set to 1, it means that an entry followes, whereas when it's set to 0, it's the end of stream and no more entries are left to read. For more information on BulkGet look link:$$http://community.jboss.org/docs/DOC-15592$$[here] 
 
-[[sid-65274058_HotRodProtocol-Version1.2-BulkKeysGet]]
+[[sid-68355115_HotRodProtocol-Version1.2-BulkKeysGet]]
 
 
 ===== BulkKeysGet
@@ -1751,7 +1751,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  _More_ : One byte representing whether more keys need to be read from the stream. So, when it's set to 1, it means that a key followes, whereas when it's set to 0, it's the end of stream and no more entries are left to read. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-Put%2FPutIfAbsent%2FReplace]]
+[[sid-68355115_HotRodProtocol-Version1.2-Put%2FPutIfAbsent%2FReplace]]
 
 
 ===== Put/PutIfAbsent/Replace
@@ -1799,7 +1799,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  Put/PutIfAbsent/Replace response: If ForceReturnPreviousValue has been passed, these responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-ReplaceIfUnmodified]]
+[[sid-68355115_HotRodProtocol-Version1.2-ReplaceIfUnmodified]]
 
 
 ===== ReplaceIfUnmodified
@@ -1832,7 +1832,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  Response: If ForceReturnPreviousValue has been passed, this responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-RemoveIfUnmodified]]
+[[sid-68355115_HotRodProtocol-Version1.2-RemoveIfUnmodified]]
 
 
 ===== RemoveIfUnmodified
@@ -1862,7 +1862,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  Response: If ForceReturnPreviousValue has been passed, this responses will contain previous value (and corresponding value length) for that key. If the key does not exist or previous was null, value length would be 0. Otherwise, if no ForceReturnPreviousValue was sent, the response would be empty. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-Clear]]
+[[sid-68355115_HotRodProtocol-Version1.2-Clear]]
 
 
 ===== Clear
@@ -1883,7 +1883,7 @@ public static int virtualNodeHashCode(int nodeBaseHashCode, int id, Hash hashFct
 
 *  0x00 status if infinispan was cleared 
 
-[[sid-65274058_HotRodProtocol-Version1.2-Stats]]
+[[sid-68355115_HotRodProtocol-Version1.2-Stats]]
 
 
 ===== Stats
@@ -1931,7 +1931,7 @@ Returns a summary of all available statistics. For each statistic returned, a na
 
 *  _Value_ : String containing statistic value. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-Ping]]
+[[sid-68355115_HotRodProtocol-Version1.2-Ping]]
 
 
 ===== Ping
@@ -1944,7 +1944,7 @@ Application level request to see if the server is available.
 
 *  0x00 - if no errors 
 
-[[sid-65274058_HotRodProtocol-Version1.2-ErrorHandling]]
+[[sid-68355115_HotRodProtocol-Version1.2-ErrorHandling]]
 
 
 ==== Error Handling
@@ -1964,14 +1964,14 @@ Response header contains error op code response and corresponding error status n
 
 *  _Error message_ : Error message. In the case of 0x84 , this error field contains the latest version supported by the hot rod server. Length is defined by total body length. 
 
-[[sid-65274058_HotRodProtocol-Version1.2-MultiGetOperations]]
+[[sid-68355115_HotRodProtocol-Version1.2-MultiGetOperations]]
 
 
 ==== Multi-Get Operations
 
 A multi-get operation is a form of get operation that instead of requesting a single key, requests a set of keys. The Hot Rod protocol does not include such operation but remote Hot Rod clients could easily implement this type of operations by either parallelizing/pipelining individual get requests. Another possibility would be for remote clients to use async or non-blocking get requests. For example, if a client wants N keys, it could send send N async get requests and then wait for all the replies. Finally, multi-get is not to be confused with bulk-get operations. In bulk-gets, either all or a number of keys are retrieved, but the client does not know which keys to retrieve, whereas in multi-get, the client defines which keys to retrieve.
 
-[[sid-65274058_HotRodProtocol-Version1.2-ExamplePutrequest]]
+[[sid-68355115_HotRodProtocol-Version1.2-ExamplePutrequest]]
 
 
 ==== Example - Put request
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-65-Cross_site_replication.adoc b/documentation/src/main/asciidoc/user_guide/chapter-65-Cross_site_replication.adoc
index d582589..fc3478c 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-65-Cross_site_replication.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-65-Cross_site_replication.adoc
@@ -1,10 +1,10 @@
-[[sid-65274061]]
+[[sid-68355118]]
 
 ==  Cross site replication
 
  Cross site (x-site) replication allows backing up the data from one cluster to other clusters, potentially situated in different geographical location. The cross-site replication is built on top of JGroups' link:$$http://www.jgroups.org/manual-3.x/html/user-advanced.html#Relay2Advanced$$[RELAY2 protocol] . link:$$https://community.jboss.org/wiki/DesignForCrossSiteReplication$$[This document] describes the technical design of cross site replication in more detail. 
 
-[[sid-65274061_Crosssitereplication-Sampledeployment]]
+[[sid-68355118_Crosssitereplication-Sampledeployment]]
 
 
 === Sample deployment
@@ -39,16 +39,16 @@ image::[]
 The cross-site replication configuration spreads over the following files:
 
 
-.  the backup policy for each individual cache is defined in infinispan's .xml configuration file ( link:$$https://docs.jboss.org/author/download/attachments/65274061/infinispan.xml?version=1&amp;modificationDate=1362652288000$$[infinispan.xml] in attachment) 
+.  the backup policy for each individual cache is defined in infinispan's .xml configuration file ( link:$$https://docs.jboss.org/author/download/attachments/68355118/infinispan.xml?version=1&amp;modificationDate=1362652288000$$[infinispan.xml] in attachment) 
 
 
-.  cluster's jgroups xml configuration file: link:$$http://www.jgroups.org/manual-3.x/html/user-advanced.html#Relay2Advanced$$[RELAY2] protocol needs to be added to the JGroups protocol stack ( link:$$https://docs.jboss.org/author/download/attachments/65274061/jgroups.xml?version=1&amp;modificationDate=1348082252000$$[jgroups.xml] ) 
+.  cluster's jgroups xml configuration file: link:$$http://www.jgroups.org/manual-3.x/html/user-advanced.html#Relay2Advanced$$[RELAY2] protocol needs to be added to the JGroups protocol stack ( link:$$https://docs.jboss.org/author/download/attachments/68355118/jgroups.xml?version=1&amp;modificationDate=1348082252000$$[jgroups.xml] ) 
 
 
-.  RELAY2 configuration file: RELAY2 has an own configuration file ( link:$$https://docs.jboss.org/author/download/attachments/65274061/relay2.xml?version=1&amp;modificationDate=1348082291000$$[relay2.xml] ) 
+.  RELAY2 configuration file: RELAY2 has an own configuration file ( link:$$https://docs.jboss.org/author/download/attachments/68355118/relay2.xml?version=1&amp;modificationDate=1348082291000$$[relay2.xml] ) 
 
 
-.  the jgroups channel that is used by RELAY2 has its own configuration file ( link:$$https://docs.jboss.org/author/download/attachments/65274061/jgroups-relay2.xml?version=1&amp;modificationDate=1348082201000$$[jgroups-relay2.xml] ) Infinispan XML configuration file 
+.  the jgroups channel that is used by RELAY2 has its own configuration file ( link:$$https://docs.jboss.org/author/download/attachments/68355118/jgroups-relay2.xml?version=1&amp;modificationDate=1348082201000$$[jgroups-relay2.xml] ) Infinispan XML configuration file 
 
 The local site is defined in the the global configuration section. The local is the site where the node using this configuration file resides (in the example above local site is "LON").
 
@@ -161,7 +161,7 @@ cb.sites().backupFor().remoteCache("users").remoteSite("LON");
 
 ----
 
-[[sid-65274061_Crosssitereplication-Localcluster%27sjgroups.xmlconfiguration]]
+[[sid-68355118_Crosssitereplication-Localcluster%27sjgroups.xmlconfiguration]]
 
 
 ==== Local cluster's jgroups .xml configuration
@@ -185,44 +185,44 @@ This is the configuration file for the local (intra-site) infinispan cluster. It
 
 ----
 
- In order to allow inter-site calls, the RELAY2 protocol needs to be added to the protocol stack defined in the jgroups configuration (see attached link:$$https://docs.jboss.org/author/download/attachments/65274061/jgroups.xml?version=1&amp;modificationDate=1348082252000$$[jgroups.xml] for an example). 
+ In order to allow inter-site calls, the RELAY2 protocol needs to be added to the protocol stack defined in the jgroups configuration (see attached link:$$https://docs.jboss.org/author/download/attachments/68355118/jgroups.xml?version=1&amp;modificationDate=1348082252000$$[jgroups.xml] for an example). 
 
-[[sid-65274061_Crosssitereplication-RELAY2configurationfile]]
+[[sid-68355118_Crosssitereplication-RELAY2configurationfile]]
 
 
 ==== RELAY2 configuration file
 
- The RELAY2 configuration file is linked from the jgroups.xml (see attached link:$$https://docs.jboss.org/author/download/attachments/65274061/relay2.xml?version=1&amp;modificationDate=1348082291000$$[relay2.xml] ). It defines the sites seen by this cluster and also the jgroups configuration file that is used by RELAY2 in order to communicate with the remote sites. 
+ The RELAY2 configuration file is linked from the jgroups.xml (see attached link:$$https://docs.jboss.org/author/download/attachments/68355118/relay2.xml?version=1&amp;modificationDate=1348082291000$$[relay2.xml] ). It defines the sites seen by this cluster and also the jgroups configuration file that is used by RELAY2 in order to communicate with the remote sites. 
 
-[[sid-65274061_Crosssitereplication-Datareplication]]
+[[sid-68355118_Crosssitereplication-Datareplication]]
 
 
 === Data replication
 
 For both transactional and non-transactional caches, the backup calls are performed in parallel with local cluster calls, e.g. if we write data to node N1 in LON then replication to the local nodes N2 and N3 and remote backup sites SFO and NYC happen in parallel.
 
-[[sid-65274061_Crosssitereplication-Nontransactionalcaches]]
+[[sid-68355118_Crosssitereplication-Nontransactionalcaches]]
 
 
 ==== Non transactional caches
 
 In the case of non-transactional caches the replication happens during each operation. Given that data is sent in parallel to backups and local caches, it is possible for the operations to succeed locally and fail remotely, or the other way, causing inconsistencies
 
-[[sid-65274061_Crosssitereplication-Transactionalcaches]]
+[[sid-68355118_Crosssitereplication-Transactionalcaches]]
 
 
 ==== Transactional caches
 
  For synchronous transactional caches, Infinispan internally uses a two phase commit protocol: lock acquisition during the 1st phase (prepare) and apply changes during the 2nd phase (commit). For asynchronous caches the two phases are merged, the "apply changes" message being sent asynchronously to the owners of data. This 2PC protocol maps to 2PC received from the JTA transaction manager. For transactional caches, both optimistic and pessimistic, the backup to remote sites happens during the prepare and commit phase only. 
 
-[[sid-65274061_Crosssitereplication-Synchronouslocalclusterwithasyncbackup]]
+[[sid-68355118_Crosssitereplication-Synchronouslocalclusterwithasyncbackup]]
 
 
 ===== Synchronous local cluster with async backup
 
 In this scenario the backup call happens during local commit phase(2nd phase). That means that if the local prepare fails, no remote data is being sent to the remote backup.
 
-[[sid-65274061_Crosssitereplication-Synchronouslocalclusterwithsyncbackup]]
+[[sid-68355118_Crosssitereplication-Synchronouslocalclusterwithsyncbackup]]
 
 
 ===== Synchronous local cluster with sync backup
@@ -249,7 +249,7 @@ In this case there are two backup calls:
 
 Both the local and the backup call(if the "backupFailurePolicy" is set to "FAIL") can veto transaction's prepare outcome
 
-[[sid-65274061_Crosssitereplication-Asynchronouslocalcluster]]
+[[sid-68355118_Crosssitereplication-Asynchronouslocalcluster]]
 
 
 ===== Asynchronous local cluster
@@ -257,14 +257,14 @@ Both the local and the backup call(if the "backupFailurePolicy" is set to "FAIL"
 
 * In the case of asynchronous local clusters, the backup data is sent during the commit phase. If the backup call fails and the "backupFailurePolicy" is set to "FAIL" then the user is notified through an exception.
 
-[[sid-65274061_Crosssitereplication-Takingasiteoffline]]
+[[sid-68355118_Crosssitereplication-Takingasiteoffline]]
 
 
 === Taking a site offline
 
 If backing up to a site fails for a certain number of times during an time interval, then it is possible to automatically mark that site as offline. When a site is marked as offline the local site won't try to backup data to it anymore. In order to be taken online a system administrator intervention being required.
 
-[[sid-65274061_Crosssitereplication-Configuration]]
+[[sid-68355118_Crosssitereplication-Configuration]]
 
 
 ==== Configuration
@@ -305,14 +305,14 @@ lon.sites().addBackup()
 
 ----
 
-[[sid-65274061_Crosssitereplication-Takingasitebackonline]]
+[[sid-68355118_Crosssitereplication-Takingasitebackonline]]
 
 
 ==== Taking a site back online
 
  In order to bring a site back online after being taken offline, one can use the JMX console and invoke the "bringSiteOnline(siteName)" operation on the _XSiteAdmin_ managed bean. At the moment this method would need to be invoked on all the nodes within the site(further releases will overcome this limitation). 
 
-[[sid-65274061_Crosssitereplication-Reference]]
+[[sid-68355118_Crosssitereplication-Reference]]
 
 
 === Reference
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-66-Map_Reduce_framework.adoc b/documentation/src/main/asciidoc/user_guide/chapter-66-Map_Reduce_framework.adoc
index bb2b294..a5b66ec 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-66-Map_Reduce_framework.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-66-Map_Reduce_framework.adoc
@@ -1,15 +1,15 @@
-[[sid-65274063]]
+[[sid-68355120]]
 
 ==  Map Reduce framework
 
-[[sid-65274063_MapReduceframework-Introduction]]
+[[sid-68355120_MapReduceframework-Introduction]]
 
 
 === Introduction
 
  _MapReduce is a programming model allowing transparent distributed processing of very large data sets over data grids. The name MapReduce comes from an idea of using two distinct computational phases of map and reduce. In the map phase,_ _master node that initiates a task takes the task input, divides it and sends tasks for map phase execution on the grid. Each node in turns executes a map function on its input returning intermediate results back to master node._ _Master node_ _task collects all intermediate results from map phase combines them by intermediate result keys and sends intermediate keys/values for reduction on the grid. Finally master tasks node receives all results from reduction phases and returns the final result to invoker of the MapReduce task._ 
 
-[[sid-65274063_MapReduceframework-MapReduceAPI]]
+[[sid-68355120_MapReduceframework-MapReduceAPI]]
 
 
 === MapReduce API
@@ -65,7 +65,38 @@ public interface Reducer<KOut, VOut> extends Serializable {
 
  Finally, link:$$https://github.com/infinispan/infinispan/blob/master/core/src/main/java/org/infinispan/distexec/mapreduce/MapReduceTask.java$$[MapReduceTask] is a distributed task unifying Mapper, Reducer and Collator into a cohesive large scale computation to be transparently parallelized across Infinispan cluster nodes. Users of MapReduceTask need to provide a cache whose data is used as input for this task. Infinispan execution environment will instantiate and migrate instances of provided mappers and reducers seamlessly across Infinispan nodes. Unless otherwise specified using onKeys method input keys filter all available key value pairs of a specified cache will be used as input data for this task. 
 
-[[sid-65274063_MapReduceframework-MapperandCDI]]
+[[sid-68355120_MapReduceframework-MapReducetasktimeout]]
+
+
+==== Map Reduce task timeout
+
+
+[NOTE]
+==== 
+The timeout per Map/Reduce task is only available for Infinispan 5.3.0.CR2 and higher.
+
+
+==== 
+
+
+ It is possible to set a timeout value for each Map/Reduce tasks. However, if no timeout is specified, it uses the replication timeout as a default timeout (the same behavior as the previous Infinispan versions). You can set the timeout in your task by doing the following: 
+
+
+----
+MapReduceTask task = new MapReduceTask(cache);
+task.timeout(1, TimeUnit.MINUTES);
+----
+
+Also, it is possible to know which is the current timeout value for the task:
+
+
+----
+System.out.println("Map/Reduce task timeout is " + task.timeout(TimeUnit.MILLISECONDS) + " millseconds"); 
+----
+
+ For more information about this, please check the java doc in link:$$http://docs.jboss.org/infinispan/5.3/apidocs/org/infinispan/distexec/mapreduce/MapReduceTask.html$$[Map Reduce Task API Documentation] 
+
+[[sid-68355120_MapReduceframework-MapperandCDI]]
 
 
 === Mapper and CDI
@@ -93,7 +124,7 @@ public class WordCountCacheInjectedMapper implements Mapper<String, String, Stri
 }
 ----
 
-[[sid-65274063_MapReduceframework-MapReduceTaskdistributedexecution]]
+[[sid-68355120_MapReduceframework-MapReduceTaskdistributedexecution]]
 
 
 === MapReduceTask distributed execution
@@ -142,7 +173,7 @@ image::[]
 
  _Distributed reduce phase is turned on by using a MapReduceTask_ link:$$http://docs.jboss.org/infinispan/5.2/apidocs/org/infinispan/distexec/mapreduce/MapReduceTask.html#MapReduceTask(org.infinispan.Cache, boolean)$$[constructor] _specifying cache to use as input data for the task and boolean parameter distributeReducePhase set to true. Map/Reduce API_ link:$$http://docs.jboss.org/infinispan/5.2/apidocs/org/infinispan/distexec/mapreduce/package-summary.html$$[javadoc] _and demos are included in distribution._ 
 
-[[sid-65274063_MapReduceframework-Examples]]
+[[sid-68355120_MapReduceframework-Examples]]
 
 
 === Examples
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-67-Rolling_upgrades.adoc b/documentation/src/main/asciidoc/user_guide/chapter-67-Rolling_upgrades.adoc
index 6a5c504..2b17dfc 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-67-Rolling_upgrades.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-67-Rolling_upgrades.adoc
@@ -1,4 +1,4 @@
-[[sid-65274064]]
+[[sid-68355121]]
 
 ==  Rolling upgrades
 
@@ -6,7 +6,7 @@
 
 In  the following description we will refer to the Source and Target  clusters, where the Source cluster is the old cluster which is currently  in use and the Target cluster is the new cluster to which the data will  be migrated to.
 
-[[sid-65274064_Rollingupgrades-Steps]]
+[[sid-68355121_Rollingupgrades-Steps]]
 
 
 === Steps
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-68-Command_Line_Interface_CLI_.adoc b/documentation/src/main/asciidoc/user_guide/chapter-68-Command_Line_Interface_CLI_.adoc
index 782568d..cea1d51 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-68-Command_Line_Interface_CLI_.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-68-Command_Line_Interface_CLI_.adoc
@@ -1,4 +1,4 @@
-[[sid-65274065]]
+[[sid-68355122]]
 
 ==  Command-Line Interface (CLI)
 
@@ -56,12 +56,12 @@ begin       commit      disconnect  evict       info     
 
  The CLI is based on link:$$https://github.com/aeshell/aesh$$[Æsh] and therefore offers many keyboard shortcuts to navigate and search the history of commands, to manipulate the cursor at the prompt, including both Emacs and VI modes of operation. 
 
-[[sid-65274065_Command-LineInterface%28CLI%29-Commands]]
+[[sid-68355122_Command-LineInterface%28CLI%29-Commands]]
 
 
 === Commands
 
-[[sid-65274065_Command-LineInterface%28CLI%29-]]
+[[sid-68355122_Command-LineInterface%28CLI%29-]]
 
 
 ==== 
@@ -71,7 +71,7 @@ begin       commit      disconnect  evict       info     
 
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-abort]]
+[[sid-68355122_Command-LineInterface%28CLI%29-abort]]
 
 
 ==== abort
@@ -87,7 +87,7 @@ begin       commit      disconnect  evict       info     
 null
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-begin]]
+[[sid-68355122_Command-LineInterface%28CLI%29-begin]]
 
 
 ==== begin
@@ -102,7 +102,7 @@ null
 [jmx://localhost:12000/MyCacheManager/namedCache]> commit
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-cache]]
+[[sid-68355122_Command-LineInterface%28CLI%29-cache]]
 
 
 ==== cache
@@ -117,7 +117,7 @@ ___defaultcache
 [jmx://localhost:12000/MyCacheManager/___defaultcache]>
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-clear]]
+[[sid-68355122_Command-LineInterface%28CLI%29-clear]]
 
 
 ==== clear
@@ -132,7 +132,7 @@ ___defaultcache
 null
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-commit]]
+[[sid-68355122_Command-LineInterface%28CLI%29-commit]]
 
 
 ==== commit
@@ -147,7 +147,7 @@ null
 [jmx://localhost:12000/MyCacheManager/namedCache]> commit
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-container]]
+[[sid-68355122_Command-LineInterface%28CLI%29-container]]
 
 
 ==== container
@@ -162,7 +162,7 @@ MyCacheManager OtherCacheManager
 [jmx://localhost:12000/OtherCacheManager/]>
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-create]]
+[[sid-68355122_Command-LineInterface%28CLI%29-create]]
 
 
 ==== create
@@ -176,7 +176,7 @@ MyCacheManager OtherCacheManager
 [jmx://localhost:12000/MyCacheManager/newCache]>
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-disconnect]]
+[[sid-68355122_Command-LineInterface%28CLI%29-disconnect]]
 
 
 ==== disconnect
@@ -189,7 +189,7 @@ MyCacheManager OtherCacheManager
 [disconnected//]
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-encoding]]
+[[sid-68355122_Command-LineInterface%28CLI%29-encoding]]
 
 
 ==== encoding
@@ -208,7 +208,7 @@ rest
 [jmx://localhost:12000/MyCacheManager/namedCache]> encoding hotrod
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-end]]
+[[sid-68355122_Command-LineInterface%28CLI%29-end]]
 
 
 ==== end
@@ -224,7 +224,7 @@ rest
 a
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-evict]]
+[[sid-68355122_Command-LineInterface%28CLI%29-evict]]
 
 
 ==== evict
@@ -237,7 +237,7 @@ a
 [jmx://localhost:12000/MyCacheManager/namedCache]> evict a
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-get]]
+[[sid-68355122_Command-LineInterface%28CLI%29-get]]
 
 
 ==== get
@@ -251,7 +251,7 @@ a
 a
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-info]]
+[[sid-68355122_Command-LineInterface%28CLI%29-info]]
 
 
 ==== info
@@ -264,7 +264,7 @@ a
 GlobalConfiguration{asyncListenerExecutor=ExecutorFactoryConfiguration{factory=org.infinispan.executors.DefaultExecutorFactory@98add58}, asyncTransportExecutor=ExecutorFactoryConfiguration{factory=org.infinispan.executors.DefaultExecutorFactory@7bc9c14c}, evictionScheduledExecutor=ScheduledExecutorFactoryConfiguration{factory=org.infinispan.executors.DefaultScheduledExecutorFactory@7ab1a411}, replicationQueueScheduledExecutor=ScheduledExecutorFactoryConfiguration{factory=org.infinispan.executors.DefaultScheduledExecutorFactory@248a9705}, globalJmxStatistics=GlobalJmxStatisticsConfiguration{allowDuplicateDomains=true, enabled=true, jmxDomain='jboss.infinispan', mBeanServerLookup=org.jboss.as.clustering.infinispan.MBeanServerProvider@6c0dc01, cacheManagerName='local', properties={}}, transport=TransportConfiguration{clusterName='ISPN', machineId='null', rackId='null', siteId='null', strictPeerToPeer=false, distributedSyncTimeout=240000, transport=null, nodeName='null', properties={}}, serialization=SerializationConfiguration{advancedExternalizers={1100=org.infinispan.server.core.CacheValue$Externalizer@5fabc91d, 1101=org.infinispan.server.memcached.MemcachedValue$Externalizer@720bffd, 1104=org.infinispan.server.hotrod.ServerAddress$Externalizer@771c7eb2}, marshaller=org.infinispan.marshall.VersionAwareMarshaller@6fc21535, version=52, classResolver=org.jboss.marshalling.ModularClassResolver@2efe83e5}, shutdown=ShutdownConfiguration{hookBehavior=DONT_REGISTER}, modules={}, site=SiteConfiguration{localSite='null'}}
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-locate]]
+[[sid-68355122_Command-LineInterface%28CLI%29-locate]]
 
 
 ==== locate
@@ -277,7 +277,7 @@ GlobalConfiguration{asyncListenerExecutor=ExecutorFactoryConfiguration{factory=o
 [host/node1,host/node2]
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-put]]
+[[sid-68355122_Command-LineInterface%28CLI%29-put]]
 
 
 ==== put
@@ -301,7 +301,7 @@ The put command can optionally specify a lifespan and a maximum idle time.
 [jmx://localhost:12000/MyCacheManager/namedCache]> put a a expires 10m maxidle 1m
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-replace]]
+[[sid-68355122_Command-LineInterface%28CLI%29-replace]]
 
 
 ==== replace
@@ -322,7 +322,7 @@ c
 c
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-rollback]]
+[[sid-68355122_Command-LineInterface%28CLI%29-rollback]]
 
 
 ==== rollback
@@ -337,7 +337,7 @@ c
 [jmx://localhost:12000/MyCacheManager/namedCache]> rollback
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-site]]
+[[sid-68355122_Command-LineInterface%28CLI%29-site]]
 
 
 ==== site
@@ -355,7 +355,7 @@ offline
 [jmx://localhost:12000/MyCacheManager/namedCache]> site --online NYC
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-start]]
+[[sid-68355122_Command-LineInterface%28CLI%29-start]]
 
 
 ==== start
@@ -370,7 +370,7 @@ offline
 [jmx://localhost:12000/MyCacheManager/namedCache]> end
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-stats]]
+[[sid-68355122_Command-LineInterface%28CLI%29-stats]]
 
 
 ==== stats
@@ -403,7 +403,7 @@ LockManager: {
 }
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-upgrade]]
+[[sid-68355122_Command-LineInterface%28CLI%29-upgrade]]
 
 
 ==== upgrade
@@ -416,7 +416,7 @@ LockManager: {
 [jmx://localhost:12000/MyCacheManager/namedCache]> upgrade --disconnectsource=hotrod --all
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-version]]
+[[sid-68355122_Command-LineInterface%28CLI%29-version]]
 
 
 ==== version
@@ -430,12 +430,12 @@ Client Version 5.2.1.Final
 Server Version 5.2.1.Final
 ----
 
-[[sid-65274065_Command-LineInterface%28CLI%29-DataTypes]]
+[[sid-68355122_Command-LineInterface%28CLI%29-DataTypes]]
 
 
 === Data Types
 
-[[sid-65274065_Command-LineInterface%28CLI%29-DataTypesx]]
+[[sid-68355122_Command-LineInterface%28CLI%29-DataTypesx]]
 
 
 The CLI understands the following types:
@@ -470,12 +470,12 @@ The CLI understands the following types:
 
 *  JSON serialized Java classes can be represented using JSON notation, e.g. {"package.MyClass":{"i":5,"x":null,"b":true}}. Please note that the specified class must be available to the CacheManager's class loader. 
 
-[[sid-65274065_Command-LineInterface%28CLI%29-TimeValues]]
+[[sid-68355122_Command-LineInterface%28CLI%29-TimeValues]]
 
 
 === Time Values
 
-[[sid-65274065_Command-LineInterface%28CLI%29-TimeValuesx]]
+[[sid-68355122_Command-LineInterface%28CLI%29-TimeValuesx]]
 
 
 A time value is an integer number followed by time unit suffix: days (d), hours (h), minutes (m), seconds (s), milliseconds (ms).
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-69-Total_Order_based_commit_protocol.adoc b/documentation/src/main/asciidoc/user_guide/chapter-69-Total_Order_based_commit_protocol.adoc
new file mode 100644
index 0000000..754266d
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-69-Total_Order_based_commit_protocol.adoc
@@ -0,0 +1,311 @@
+[[sid-68355123]]
+
+==  Total Order based commit protocol
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-Introduction]]
+
+
+=== Introduction
+
+ _The Total Order based protocol is a multi-master scheme (in this context, multi-master scheme means that all nodes can update all the data) as the (optimistic/pessimist) locking model implemented in Infinispan. This commit protocol relies on the concept of totally ordered delivery of messages which, informally, implies that each node which delivers a set of messages, delivers them in the same order._ 
+
+This protocol comes with this advantages.
+
+
+. transactions can be committed in one phase, as they are delivered in the same order by the nodes that receive them.
+
+
+. it mitigates distributed deadlocks.
+
+The weaknesses of this approach are the fact that its implementation relies on a single thread per node which delivers the transaction and its modification, and the slightly higher number of messages exchanged by JGroups.
+
+ Thus, this protocol delivers best performance in scenarios of _high contention_ , in which it can benefit from the single-phase commit and the deliver thread is not the bottleneck. 
+
+ Currently, the Total Order based protocol is available only in _transactional_ caches for _replicated_ and _distributed_ modes. 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-Overview]]
+
+
+=== Overview
+
+ The Total Order based commit protocol only affects how transactions are committed and it depends of the isolation level configured, more precisely the _write skew check_ . Note that it only provides the _same isolation levels_ as the locking model, i.e. _read-committed_ and _repeatable-read_ . If the write skew check is not enabled, then all the transaction are committed in one phase (independently if Infinispan is enlisted as _Synchronization_ or _XaResource_ ). In this case, the isolation level is not violated because it is ensured during the transaction execution. Also the transactions always commit successfully because they do not need to perform any validation in prepare phase. 
+
+ On other hand, when write skew check is enabled, the protocol adapts using one phase commit when it is safe. However, if Infinispan is enlisted as _Synchronization_ , it always commit in two phases, because the _Transaction Manager_ does not provide any information if Infinispan is the only resource enlisted or not. In _XaResource_ enlistment, we can use one phase if the _Transaction Manager_ request a commit in one phase (i.e. one-phase optimization, usually used when the transaction has a single _XaResource_ registered, see link:$$http://docs.jboss.org/jbossas/javadoc/4.0.5/j2ee/javax/transaction/xa/XAResource.html#commit(javax.transaction.xa.Xid, boolean)$$[XaResource.commit()] ) and the Infinispan cache is configured in replicated mode or in distributed mode (the last one, when the _writeSkew==false_ ). This optimization is not safe in distributed mode when _writeSkew==true_ because each node performs the validation in different keys subset. 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-Commitinonephase]]
+
+
+==== Commit in one phase
+
+ When the transaction ends, Infinispan sends the transaction (and its modification) in total order. This ensures all the transactions are deliver in the same order in all the involved Infinispan nodes. As a result, when a transaction is delivered, it performs a deterministic validation over the same state, leading to the same outcome (transaction commit or rollback). Also, if the transactional mode is configured with _syncCommitPhase==false_ , the node that sent the transaction still needs to wait for the self-deliver of the transaction because it needs to know the transaction outcome. In other hand, it does not need to wait for the replies from other nodes because they will reply with the same outcome. Although, if _syncCommitPhase==true_ , it needs to wait for the replies in order to respect the semantic of the flag. 
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ The figure above demonstrates a high level example with 3 nodes. _Node1_ and _Node3_ are running one transaction each and lets assume that both transaction writes on the same key. To make it more interesting, lets assume that both nodes tries to commit at the same time, represented by the first colored circle in the figure. The _blue_ circle represents the transaction _tx1_ and the _green_ the transaction _tx2_ . Both nodes do a remote invocation in total order ( _to-send_ ) with the transaction's modifications. At this moment, all the nodes will agree in the same deliver order, for example, _tx1_ followed by _tx2_ . Then, each node delivers _tx1_ , perform the validation and commits the modifications. The same steps are performed for _tx2_ but, in this case, the validation will fail and the transaction is rollback in all the involved nodes. 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-Commitintwophases]]
+
+
+==== Commit in two phases
+
+ The first phase is the same as described above except that the nodes will not apply the modifications after the validation, including the modifications sent in total order and the same scheme to wait for the replies. As soon as it has the confirmation that all keys are successfully validated, it give a positive response to the _Transaction Manager_ (remember that the _Transaction Manager_ is responsive to invoke the _prepare()_ of the transaction). On other hand, if it receives a negative reply, it returns a negative response to the _Transaction Manager_ . Finally, the transaction is committed or aborted in the second phase depending of the _Transaction Manager_ . 
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ The figure above shows the scenario described in the first figure but now committing the transactions using two phases. When _tx1_ is deliver, it performs the validation and it replies to the _Transaction Manager_ . Next, lets assume that _tx2_ is deliver before the _Transaction Manager_ request the second phase for _tx1_ . In this case, _tx2_ will be enqueued and it will be validated only when _tx1_ is completed. Eventually, the _Transaction Manager_ for _tx1_ will request the second phase (the commit) and all the nodes are free to perform the validation of _tx2_ . 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-TransactionRecovery]]
+
+
+==== Transaction Recovery
+
+ link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737124$$[Transaction Recovery] is currently not available for Total Order based commit protocol 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-Totalorderexecutorservice]]
+
+
+==== Total order executor service
+
+ As previous said, only one thread is delivering the transactions, which makes this thread a possible bottleneck of the system. Although, only conflicting transactions (i.e. which the write set intercepts) needs to be validated in order. For example, if a node delivers _tx1(write(A))_ , _tx2(write(A))_ and _tx3(write(B))_ , _tx2_ must wait until the _tx1_ is completed, but _tx3_ can be validated concurrently with _tx1_ and _tx2_ . After analyzing the transaction dependencies, is possible to enqueue the transactions that conflicts to non-completed transactions and move to a executor service the transaction that can be concurrently validated. 
+
+
+[WARNING]
+.Warning
+==== 
+ The total order executor service needs an _ExecutorService_ (see the Configuration section). Please make sure that the _ExecutorService_ _does not reject tasks_ otherwise your data becomes _inconsistent_ . 
+
+
+==== 
+
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-StateTransfer]]
+
+
+==== State Transfer
+
+For simplicity reasons, the total order based commit protocol uses a blocking version of the current state transfer. The main differences are:
+
+
+. enqueue the transaction deliver while the state transfer is in progress;
+
+
+.  the state transfer control messages ( _CacheTopologyControlCommand_ ) are sent in total order. 
+
+This way, it provides a synchronization between the state transfer and the transactions deliver that is the same all the nodes. Although, the transactions caught in the middle of state transfer (i.e. sent before the state transfer start and deliver after it) needs to be re-sent to find a new total order involving the new joiners.
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ The figure above describes a node joining. In the scenario, the _tx2_ is sent in _topologyId=1_ but when it is received, it is in _topologyId=2_ . So, the transaction is re-sent involving the new nodes. 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-Configuration]]
+
+
+=== Configuration
+
+To use Total Order based commit protocol in your Infinispan cache, you need to configure a couple of thing:
+
+
+* add the total order protocols in JGroups configuration file:
+
+
+----
+
+<SEQUENCER />
+<tom.TOA />
+
+----
+
+ Check the JGroups manual for more detail in here: link:$$http://jgroups.org/manual-3.x/html/index.html$$[JGroups Manual] 
+
+
+* configure the Infinispan cache as a transactional cache and set the transaction protocol to total order:
+
+
+----
+
+<namedCache >
+  <transaction
+    transactionMode="TRANSACTIONAL"
+    transactionProtocol="TOTAL_ORDER" />
+</namedCache>
+
+----
+
+You can build the same configuration programmatically in the following way:
+
+
+----
+
+ConfigurationBuilder cb = new ConfigurationBuilder();
+cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL).transactionProtocol(TransactionProtocol.TOTAL_ORDER);
+
+----
+
+ Optionally, you can configure the total order executor to use your own executor services. By default, it creates an executor service with _coreThreads=1_ and _maxThreads=32_ . It can be configured in the following way: 
+
+
+----
+
+<global>
+  <totalOrderExecutor factory="org.infinispan.executor.DefaultExecutorFactory>
+    <property name="coreThreads" value="1" />
+    <property name="maxThreads" value="32" />
+  </totalOrderExecutor>
+</global>
+
+----
+
+or programmaticaly:
+
+
+----
+
+GlobalConfigurationBuilder gcb = new GlobalConfigurationBuilder();
+gcb.totalOrderExectutor().factory(new DefaultExecutorFactory()).addProperty("coreThread", "1").addProperty("maxThreads", "32");
+
+----
+
+ Beside the _coreThreads_ and the _maxThreads_ , the _DefaultExecutorFactory_ also accepts as properties as the _queueSize_ , _keepAliveTime_ (in milliseconds), _threadPriority_ , _threadNamePrefix_ and _threadNameSuffix_ . Note that, this parameters are used by the _ExecutorService_ . The total order executor uses an unbouded queue. Also, when you provide an _ExecutorService_ , make sure that _it will no reject tasks_ , otherwise your data can became _inconsistent_ . 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-TotalOrderprotocolsinJGroups.]]
+
+
+=== Total Order protocols in JGroups.
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-SEQUENCER]]
+
+
+==== SEQUENCER
+
+ The _SEQUENCER_ protocol ensures total order involving all the members in the cluster. It is a sequencer-based implementation in which the sender forwards the messages to a sequencer (the current cluster coordinator), and the sequencer sends it back to the cluster on behalf of the original sender. Because it is always the same sender (whose messages are delivered in FIFO order), a global (or total) order is established. 
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ 
+
+ The figure above shows the the communication steps to total order broadcast two messages _M1_ and _M2_ from different senders. Below, the figure shows the communication steps needed to commit a single transaction, when two phase are used. The dotted line represents the communications steps performed by the _SEQUENCER_ . As it is possible to see, ensure total order is not a cheap operation and it has a cost of an extra communication step comparing with the lock based implementation. 
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ 
+
+ More information about the _SEQUENCER_ in JGroups manual: link:$$http://jgroups.org/manual-3.x/html/protlist.html#SEQUENCER$$[SEQUENCER - JGroups Manual page] 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-TOATotalOrderAnycast]]
+
+
+==== TOA - Total Order Anycast
+
+ The _TOA_ protocol is implemented based on the Skeen Algorithm. Each node has an ordered (by the message logical clock) queue with the messages and a local logical clock and it works in a centralized way. The sender sends _N_ unicast messages with the data to all destination nodes. When the message is received, each replica increments it logical clock and it sends back the value to the sender. Meanwhile, the message is put on the queue with the value of logical clock and marked as _temporary_ . The sender collects all values and calculates the maximum value of them. Finally it sends other _N_ unicast message with the final value of the message. This number indicates the final order number of deliver for the message. Each replica updates it logical clock, if the value is lower than the final value received, and updates the message in the queue, re-ordered if necessary. Then the message is marked as _final_ . The messages are delivered when it is on the top of the queue and is _final_ . The figure below explains in a graphical way how it is done. 
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ 
+
+ The next figure show one transaction to be committed in detail, including all the communication steps. The dotted line represents the messages exchanged by _TOA_ and the solid lines a single unicast message. This figure shows that the total order protocol has 2 more communications steps than the lock based implementation. 
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ 
+
+ More information about the Total Order Anycast in JGroups manual: link:$$http://jgroups.org/manual-3.x/html/protlist.html#TOA$$[TOA - JGroups Manual page] 
+
+[[sid-68355123_TotalOrderbasedcommitprotocol-Benchmarkresults]]
+
+
+=== Benchmark results
+
+ In order to compare the performance of total order with the locking model, link:$$https://github.com/radargun/radargun/wiki$$[RadarGun] was used to perform a benchmark evaluation in two different scenarios: a _no contention_ scenario and a _contention_ scenario. 
+
+The Infinispan configuration used is:
+
+
+----
+
+<?xml version="1.0" encoding="UTF-8"?>
+<infinispan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:infinispan:config:5.3">
+    <global>
+        <transport clusterName="x">
+            <properties>
+                <property name="configurationFile" value="jgroups/jgroups.xml"/>
+            </properties>
+        </transport>
+    </global>
+    <default>
+        <transaction
+                transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
+                transactionMode="TRANSACTIONAL"
+                transactionProtocol="TOTAL_ORDER"> <!-- transactionProtocol="DEFAULT" for the locking model -->
+            <recovery enabled="false"/>
+        </transaction>
+
+        <locking concurrencyLevel="1000" useLockStriping="false" isolationLevel="REPEATABLE_READ" writeSkewCheck="true"/> <!-- writeSkewCheck="false" for the no write skew experiments -->
+        <clustering mode="r"> <!-- mode="d" for distributed mode -->
+            <sync replTimeout="10000"/>
+            <stateTransfer fetchInMemoryState="false"/>
+            <hash numOwners="2" /> <!-- for distributed mode only -->
+        </clustering>
+    </default>
+    <namedCache name="testCache"/>
+</infinispan>
+
+----
+
+and the benchmark configuration is:
+
+
+----
+
+...
+    <benchmark initSize="2" maxSize="${10:slaves}" increment="2">
+        <DestroyWrapper runOnAllSlaves="true"/>
+        <StartCluster staggerSlaveStartup="true" delayAfterFirstSlaveStarts="5000" delayBetweenStartingSlaves="500"/>
+        <ClusterValidation partialReplication="false"/>
+        <StressTestWarmup duration="1m" opsCountStatusLog="5000" numThreads="8" transactionSize="10"
+                          useTransactions="true" writePercentage="50" numEntries="1000" sharedKeys="false"/>
+        <StressTest duration="5m" opsCountStatusLog="5000" numThreads="8" transactionSize="10"
+                    useTransactions="true" writePercentage="50" numEntries="1000" sharedKeys="false"/>
+        <CsvReportGeneration targetDir="no_contention"/>
+        <ClearCluster/>
+        <StressTestWarmup duration="1m" opsCountStatusLog="5000" numThreads="8" transactionSize="10"
+                          useTransactions="true" writePercentage="50" numEntries="1000" sharedKeys="true"/>
+        <StressTest duration="5m" opsCountStatusLog="5000" numThreads="8" transactionSize="10"
+                    useTransactions="true" writePercentage="50" numEntries="1000" sharedKeys="true"/>
+        <CsvReportGeneration targetDir="contention"/>
+    </benchmark>
+...
+
+----
+
+The difference between the contention and no contention is the pool of key. In the first case the pool of keys are shared among all the threads (and nodes) and in the last case each threads has it own private pool of keys.
+
+ The first group of plots shows the performance in the _contented_ scenario: 
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ 
+
+ and the next group of plots the _no contended_ scenario: 
+
+ 
+.TODO InformalFigure image title empty
+image::[]
+
+ 
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-7-Configuring_cache_programmatically.adoc b/documentation/src/main/asciidoc/user_guide/chapter-7-Configuring_cache_programmatically.adoc
index d77e0a0..dfc875d 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-7-Configuring_cache_programmatically.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-7-Configuring_cache_programmatically.adoc
@@ -1,8 +1,8 @@
-[[sid-65273979]]
+[[sid-68355030]]
 
 ==  Configuring cache programmatically
 
-[[sid-65273979_Configuringcacheprogrammatically-ProgrammaticConfiguration]]
+[[sid-68355030_Configuringcacheprogrammatically-ProgrammaticConfiguration]]
 
 
 === Programmatic Configuration
@@ -61,7 +61,7 @@ Cache<String, String> cache = manager.getCache(newCacheName);
 
  Refer to link:$$http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/manager/CacheManager.html$$[CacheManager] , link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/configuration/cache/ConfigurationBuilder.html$$[ConfigurationBuilder] , link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/configuration/cache/Configuration.html$$[Configuration] , and link:$$http://docs.jboss.org/infinispan/5.1/apidocs/org/infinispan/configuration/global/GlobalConfiguration.html$$[GlobalConfiguration] javadocs for more details. 
 
-[[sid-65273979_Configuringcacheprogrammatically-ConfigurationBuilderProgrammaticConfigurationAPI]]
+[[sid-68355030_Configuringcacheprogrammatically-ConfigurationBuilderProgrammaticConfigurationAPI]]
 
 
 === ConfigurationBuilder Programmatic Configuration API
@@ -157,7 +157,7 @@ Configuration config = new ConfigurationBuilder()
 
 ----
 
- Configuring Infinispan with <<sid-65274001,one or several chained persistent stores>> is simple too: 
+ Configuring Infinispan with <<sid-68355053,one or several chained persistent stores>> is simple too: 
 
 
 ----
@@ -167,7 +167,7 @@ Configuration config = new ConfigurationBuilder()
         .addFileCacheStore().location("/tmp").streamBufferSize(1800).async().enable().threadPoolSize(20).build();
 ----
 
-[[sid-65273979_Configuringcacheprogrammatically-Advancedprogrammaticconfiguration]]
+[[sid-68355030_Configuringcacheprogrammatically-Advancedprogrammaticconfiguration]]
 
 
 ==== Advanced programmatic configuration
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-70-Using_Infinispan_as_a_JCache_provider.adoc b/documentation/src/main/asciidoc/user_guide/chapter-70-Using_Infinispan_as_a_JCache_provider.adoc
new file mode 100644
index 0000000..399dd82
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-70-Using_Infinispan_as_a_JCache_provider.adoc
@@ -0,0 +1,247 @@
+[[sid-68355124]]
+
+==  Using Infinispan as a JCache provider
+
+ Starting with version 5.3, Infinispan provides an implementation of JCache API ( link:$$http://www.jcp.org/en/jsr/detail?id=107$$[JSR-107] ). JCache specifies a standard Java API for caching temporary Java objects in memory. Caching java objects can help get around bottlenecks arising from using data that is expensive to retrieve (i.e. DB or web service), or data that is hard to calculate. Caching these type of objects in memory can help speed up application performance by retrieving the data directly from memory instead of doing an expensive roundtrip or recalculation. This document specifies how to use JCache with Infinispan's implementation of the specification, and explains key aspects of the API. 
+
+
+[IMPORTANT]
+==== 
+At the time of writing, Infinispan 5.3.0.Alpha1 implements version 0.6 of the JCache specification.
+
+
+==== 
+
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Dependencies]]
+
+
+=== Dependencies
+
+In order to start using Infinispan JCache implementation, a single dependency needs to be added to the Maven pom.xml file:
+
+
+----
+<dependency>
+   <groupId>org.infinispan</groupId>
+   <artifactId>infinispan-jcache</artifactId>
+   <version>...</version> <!-- i.e. 5.3.0.Alpha1 -->
+   <scope>test</scope>
+</dependency>
+----
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Createalocalcache]]
+
+
+=== Create a local cache
+
+Creating a local cache, using default configuration options as defined by the JCache API specification, is as simple as doing the following:
+
+
+----
+import javax.cache.Cache;
+import javax.cache.CacheManager;
+import javax.cache.Caching;
+import javax.cache.SimpleConfiguration;
+
+// Retrieve the system wide cache manager
+CacheManager cacheManager = Caching.getCacheManager();
+// Define a named cache with default JCache configuration
+Cache<String, String> cache = cacheManager.configureCache("namedCache", new SimpleConfiguration<String, String>());
+----
+
+
+[WARNING]
+==== 
+ By default, the JCache API specifies that data should be stored as storeByValue , so that object state mutations outside of operations to the cache, won't have an impact in the objects stored in the cache. Infinispan has so far implemented this using serialization/marshalling to make copies to store in the cache, and that way adhere to the spec. Hence, if using default JCache configuration with Infinispan, data stored must be marshallable. Instructions on how to make data stored in Infinispan marshallable can be found link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737151$$[here] . 
+
+
+==== 
+
+
+Alternatively, JCache can be configured to store data by reference (just like Infinispan or JDK Collections work). To do that, simply call:
+
+
+----
+Cache<String, String> cache = cacheManager.configureCache("namedCache", new SimpleConfiguration<String, String>().setStoreByValue(false));
+----
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Storeandretrievedata]]
+
+
+=== Store and retrieve data
+
+ Even though JCache API does not extend neither java.util.Map not java.util.concurrent.ConcurrentMap , it providers a key/value API to store and retrieve data: 
+
+
+----
+import javax.cache.Cache;
+import javax.cache.CacheManager;
+import javax.cache.Caching;
+import javax.cache.SimpleConfiguration;
+
+CacheManager cacheManager = Caching.getCacheManager();
+Cache<String, String> cache = cacheManager.configureCache("namedCache", new SimpleConfiguration<String, String>());
+cache.put("hello", "world"); // Notice that javax.cache.Cache.put(K) returns void!
+String value = cache.get("hello"); // Returns "world"
+----
+
+ Contrary to standard java.util.Map , javax.cache.Cache comes with two basic put methods called put and getAndPut . The former returns void whereas the latter returns the previous value associated with the key. So, the equivalent of java.util.Map.put(K) in JCache is javax.cache.Cache.getAndPut(K) . 
+
+
+[TIP]
+==== 
+ Even though JCache API only convers standalone caching, it can be plugged with a persistence store, and has been designed with clustering or distribution in mind. The reason why javax.cache.Cache offers two put methods is because standard java.util.Map put call forces implementors to calculate the previous value. When a persistent store is in use, or the cache is distributed, returning the previous value could be an expensive operation, and often users call standard java.util.Map.put(K) without using the return value. Hence, JCache users need to think about whether the return value is relevant to them, in which case they need to call javax.cache.Cache.getAndPut(K) , otherwise they can call javax.cache.Cache.put(K) which avoids returning the potentially expensive operation of returning the previous value. 
+
+
+==== 
+
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Comparing%7B%7Bjava.util.concurrent.ConcurrentMap%7D%7Dand%7B%7Bjavax.cache.Cache%7D%7DAPIs]]
+
+
+=== Comparing java.util.concurrent.ConcurrentMap and javax.cache.Cache APIs
+
+ Here's a brief comparison of the data manipulation APIs provided by java.util.concurrent.ConcurrentMap and javax.cache.Cache APIs. 
+
+[options="header"]
+|===============
+|Operation| java.util.concurrent.ConcurrentMap&lt;K, V&gt; | javax.cache.Cache&lt;K, V&gt; 
+|store and no return| | void put(K key) 
+|store and return previous value| V put(K key) | V getAndPut(K key) 
+|store if not present| V putIfAbsent(K key, V value) | boolean putIfAbsent(K key, V value) 
+|retrieve| V get(Object key) | V get(K key) 
+|delete if present| V remove(Object key) | boolean remove(K key) 
+|delete and return previous value| V remove(Object key) | V getAndRemove(K key) 
+|delete conditional| boolean remove(Object key, Object value) | boolean remove(K key, V oldValue) 
+|replace if present| V replace(K key, V value) | boolean replace(K key, V value) 
+|replace and return previous value| V replace(K key, V value) | V getAndReplace(K key, V value) 
+|replace conditional| boolean replace(K key, V oldValue, V newValue) | boolean replace(K key, V oldValue, V newValue) 
+
+|===============
+
+
+ Comparing the two APIs, it's obvious to see that where possible JCache avoids returning the previous value to avoid operations doing expensive network or IO operations. This is an overriding principle in the design of JCache API. In fact, there's a set of operations that are present in java.util.concurrent.ConcurrentMap , but are not present in the javax.cache.Cache because they could be expensive to compute in a distributed cache. The only exception is iterating over the contents of the cache: 
+
+[options="header"]
+|===============
+|Operation| java.util.concurrent.ConcurrentMap&lt;K, V&gt; | javax.cache.Cache&lt;K, V&gt; 
+|calculate size of cache| int size() | 
+|return all keys in the cache| Set&lt;K&gt; keySet() | 
+|return all values in the cache| Collection&lt;V&gt; values() | 
+|return all entries in the cache| Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet() | 
+|iterate over the cache| use iterator() method on keySet, values or entrySet | Iterator&lt;Cache.Entry&lt;K, V&gt;&gt; iterator() 
+
+|===============
+
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-ClusteringJCacheinstances]]
+
+
+=== Clustering JCache instances
+
+Infinispan JCache implementation goes beyond the specification in order to provide the possibility to cluster caches using the standard API. Given a Infinispan configuration file configured to replicate caches like this:
+
+
+----
+<?xml version="1.0" encoding="UTF-8"?>
+<infinispan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+            xmlns="urn:infinispan:config:5.3"
+            xsi:schemaLocation="urn:infinispan:config:5.3 http://www.infinispan.org/schemas/infinispan-config-5.3.xsd">
+   <global>
+      <transport
+         transportClass="org.infinispan.remoting.transport.jgroups.JGroupsTransport"
+         clusterName="jcache-cluster">
+      </transport>
+   </global>
+
+   <default />
+
+   <namedCache name="namedCache">
+      <clustering mode="replication" />
+   </namedCache>
+
+</infinispan>
+----
+
+You can create a cluster of caches using this code:
+
+
+----
+import javax.cache.Cache;
+import javax.cache.CacheManager;
+import javax.cache.Caching;
+
+// For multiple cache managers to be constructed with the standard JCache API and live in the same JVM, either their names, or their classloaders, must be different. 
+// This example shows how to force their classloaders to be different. An alternative method would have been to duplicate the XML file and give it a different name, 
+// but this results in unnecessary file duplication.
+ClassLoader tccl = Thread.currentThread().getContextClassLoader();
+CacheManager cacheManager1 = Caching.getCacheManager(new TestClassLoader(tccl), "infinispan-jcache-cluster.xml");
+CacheManager cacheManager2 = Caching.getCacheManager(new TestClassLoader(tccl), "infinispan-jcache-cluster.xml");
+
+Cache<String, String> cache1 = cacheManager1.getCache("namedCache");
+Cache<String, String> cache2 = cacheManager2.getCache("namedCache");
+
+cache1.put("hello", "world");
+String value = cache2.get("hello"); // Returns "world" if clustering is working
+
+// --
+
+public static class TestClassLoader extends ClassLoader {
+  public TestClassLoader(ClassLoader parent) {
+     super(parent);
+  }
+}
+----
+
+
+[IMPORTANT]
+==== 
+ If using custom objects, make sure they are serializable/marshallable as per the instructions link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737151$$[here] . 
+
+
+==== 
+
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Expirecacheddata]]
+
+
+=== Expire cached data
+
+ TODO 
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Annotations]]
+
+
+=== Annotations
+
+ TODO 
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Transactions]]
+
+
+=== Transactions
+
+ TODO 
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Atomiccompoundoperationsoncacheentrywithouttransactions]]
+
+
+=== Atomic compound operations on cache entry without transactions
+
+ TODO - invokeEntryProcessor 
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Usingcachelisteners]]
+
+
+=== Using cache listeners
+
+ TODO 
+
+[[sid-68355124_UsingInfinispanasaJCacheprovider-Quickstarts]]
+
+
+=== Quickstarts
+
+ TODO 
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-71-Infinispan_Server.adoc b/documentation/src/main/asciidoc/user_guide/chapter-71-Infinispan_Server.adoc
new file mode 100644
index 0000000..9088e16
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-71-Infinispan_Server.adoc
@@ -0,0 +1,485 @@
+[[sid-68355126]]
+
+==  Infinispan Server
+
+[[sid-68355126_InfinispanServer-Introduction]]
+
+
+=== Introduction
+
+Infinispan Server is a standalone server which exposes any number of caches to clients over a variety of protocols, including HotRod, Memcached and REST. The server itself is built on top of the robust foundation provided by JBoss AS 7.2, therefore delegating services such as configuration, datasources, transactions, logging and security to the respective subsystems. Because Infinispan Server is closely tied to the latest releases of Infinispan and JGroups, the subsystems which control these components are slightly different, in that they introduce new features and change some existing ones (e.g. cross-site replication, etc). For this reason, the configuration of these subsystems should use the Infinispan Server-specific schema. See the Configuration section for more information.
+
+[[sid-68355126_InfinispanServer-Protocols]]
+
+
+=== Protocols
+
+[[sid-68355126_InfinispanServer-HotRod]]
+
+
+==== Hot Rod
+
+ Hot Rod is Infinispan's own topology-aware high-performance remote protocol. See link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=5931020$$[Hot Rod] 
+
+[[sid-68355126_InfinispanServer-Memcached]]
+
+
+==== Memcached
+
+ Memcached is a very popular caching server with its own protocol. See link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=5439735$$[Memcached] 
+
+[[sid-68355126_InfinispanServer-Rest]]
+
+
+==== Rest
+
+ Rest uses HTTP methods to perform operations on a cache. See link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737132$$[Accessing data in Infinispan via RESTful interface] 
+
+[[sid-68355126_InfinispanServer-WebSocket]]
+
+
+==== WebSocket
+
+ The WebSocket protocol is a technology used to provide persistent bidirectional communication between (but not limited to) a web browser and a server. See link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737036$$[WebSocket Server] 
+
+[[sid-68355126_InfinispanServer-GettingStarted]]
+
+
+=== Getting Started
+
+ To get started using the server, download the Infinispan Server distribution, unpack it to a local directory and launch it using the bin/standalone.sh or bin/standalone.bat scripts depending on your platform. This will start a single-node server using the standalone/configuration/standalone.xml configuration file, with four endpoints, one for each of the supported protocols. These endpoints allow access to all of the caches configured in the Infinispan subsystem (apart from the Memcached endpoint which, because of the protocol's design, only allows access to a single cache). The server also comes with a script ( clustered.sh/clustered.bat ) which provides an easy way to start a clustered server by using the standalone/configuration/clustered.xml configuration file. If you start the server in clustered mode on multiple hosts, they should automatically discover each other using UDP multicast and form a cluster. If you want to start multiple nodes on a single host, start each one by specifying a port offset using the jboss.socket.binding.port-offset property together with a unique jboss.node.name as follows: 
+
+ bin/clustered.sh -Djboss.socket.binding.port-offset=100 -Djboss.node.name=nodeA 
+
+ If, for some reason, you cannot use UDP multicast, you can use TCP discovery. Read the <<sid-68355126_InfinispanServer-JGroupssubsystemconfiguration,JGroups subsystem configuration>> section for details on how to configure TCP discovery. 
+
+ The server distribution also provides a set of example configuration files in the docs/examples/configs which illustrate a variety of possible configurations and use-cases. To use them, just copy them to the standalone/configuration directory and start the server using the following syntax: 
+
+ bin/standalone.sh -c configuration_file_name.xml 
+
+ For more information regarding the parameters supported by the startup scripts, refer to the JBoss AS 7.2 documentation on link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=53117092$$[Command line parameters] , bearing in mind that Infinispan Server does not currently support managed servers, also known as domain mode. 
+
+[[sid-68355126_InfinispanServer-CLI]]
+
+
+=== CLI
+
+ The link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=61505925$$[Infinispan CLI] can be used to connect to the server. You need to use the remoting protocol and connect to port 9999. By default the CLI will use the special silent SASL authenticator, which won't require a username/password: 
+
+
+----
+
+bin/ispn-cli.sh
+[disconnected//]> connect localhost
+[remoting://localhost:9999/local/]> cache default
+[remoting://localhost:9999/local/default]> encoding hotrod
+[remoting://localhost:9999/local/default]> put a a
+[remoting://localhost:9999/local/default]> get a
+a
+
+----
+
+[[sid-68355126_InfinispanServer-Configuration]]
+
+
+=== Configuration
+
+Since the server is based on the JBoss AS 7.2 codebase, it must configured be using the AS configuration schema, apart from the JGroups, Infinispan and Endpoint subsytems.
+
+[[sid-68355126_InfinispanServer-JGroupssubsystemconfiguration]]
+
+
+==== JGroups subsystem configuration
+
+The JGroups subsystem configures the network transport and is only required when clustering multiple Infinispan Server nodes together.
+
+The subsystem declaration is enclosed in the following XML element:
+
+
+----
+
+<subsystem xmlns="urn:jboss:domain:jgroups:1.2" default-stack="${jboss.default.jgroups.stack:udp}">
+  ...
+</subsystem>
+
+----
+
+ Within the subsystem, you need to declare the stacks that you wish to use and name them. The default-stack attribute in the subsystem declaration must point to one of the declared stacks. You can switch stacks from the command-line using the jboss.default.jgroups.stack property: 
+
+ bin/clustered.sh -Djboss.default.jgroups.stack=tcp 
+
+ A stack declaration is composed of a transport (UDP or TCP) followed by a list of protocols. For each of these elements you can tune specific properties adding child &lt;property name="prop_name"&gt;prop_value&lt;/property&gt; elements. Since the amount of protocols and their configuration options in JGroups is huge, please refer to the appropriate link:$$http://www.jgroups.org/manual/html/protlist.html$$[JGroups Protocol documentation] . The following are the default stacks: 
+
+
+----
+
+ <stack name="udp">
+    <transport type="UDP" socket-binding="jgroups-udp"/>
+    <protocol type="PING"/>
+    <protocol type="MERGE2"/>
+    <protocol type="FD_SOCK" socket-binding="jgroups-udp-fd"/>
+    <protocol type="FD_ALL"/>
+    <protocol type="pbcast.NAKACK"/>
+    <protocol type="UNICAST2"/>
+    <protocol type="pbcast.STABLE"/>
+    <protocol type="pbcast.GMS"/>
+    <protocol type="UFC"/>
+    <protocol type="MFC"/>
+    <protocol type="FRAG2"/>
+    <protocol type="RSVP"/>
+</stack>
+<stack name="tcp">
+    <transport type="TCP" socket-binding="jgroups-tcp"/>
+    <protocol type="MPING" socket-binding="jgroups-mping"/>
+    <protocol type="MERGE2"/>
+    <protocol type="FD_SOCK" socket-binding="jgroups-tcp-fd"/>
+    <protocol type="FD"/>
+    <protocol type="VERIFY_SUSPECT"/>
+    <protocol type="pbcast.NAKACK">
+        <property name="use_mcast_xmit">false</property>
+    </protocol>
+    <protocol type="UNICAST2"/>
+    <protocol type="pbcast.STABLE"/>
+    <protocol type="pbcast.GMS"/>
+    <protocol type="UFC"/>
+    <protocol type="MFC"/>
+    <protocol type="FRAG2"/>
+    <protocol type="RSVP"/>
+</stack>
+
+----
+
+ The default TCP stack uses the MPING protocol for discovery, which uses UDP multicast. If you need to use a different protocol, look at the link:$$http://www.jgroups.org/manual/html/protlist.html#DiscoveryProtocols$$[JGroups Discovery Protocols] . The following example stack configures the TCPPING discovery protocol with two initial hosts: 
+
+
+----
+
+<stack name="tcp">
+    <transport type="TCP" socket-binding="jgroups-tcp"/>
+    <protocol type="TCPPING">
+        <property name="initial_hosts">HostA[7800],HostB[7800]</property>
+    </protocol>
+    <protocol type="MERGE2"/>
+    <protocol type="FD_SOCK" socket-binding="jgroups-tcp-fd"/>
+    <protocol type="FD"/>
+    <protocol type="VERIFY_SUSPECT"/>
+    <protocol type="pbcast.NAKACK">
+        <property name="use_mcast_xmit">false</property>
+    </protocol>
+    <protocol type="UNICAST2"/>
+    <protocol type="pbcast.STABLE"/>
+    <protocol type="pbcast.GMS"/>
+    <protocol type="UFC"/>
+    <protocol type="MFC"/>
+    <protocol type="FRAG2"/>
+    <protocol type="RSVP"/>
+</stack>
+
+----
+
+[[sid-68355126_InfinispanServer-Infinispansubsystemconfiguration]]
+
+
+==== Infinispan subsystem configuration
+
+The Infinispan subsystem configures the cache containers and caches. Its schema differs from the default Infinispan library declarative because it needs to adhere to the application server standards, but the underlying concepts are the same.
+
+The subsystem declaration is enclosed in the following XML element:
+
+
+----
+
+<subsystem xmlns="urn:infinispan:server:core:5.2" default-cache-container="clustered">
+  ...
+</subsystem>
+
+----
+
+[[sid-68355126_InfinispanServer-Containers]]
+
+
+===== Containers
+
+One major difference between the Infinispan library schema and the server schema is that in the latter multiple containers can be declared. A container is declared as follows:
+
+
+----
+
+<cache-container name="clustered" default-cache="default">
+  ...
+</cache-container>
+
+----
+
+Another difference is the lack of an implicit default cache, but the ability to specify a named cache as the default.
+
+ If you need to declare clustered caches (distributed, replicated, invalidation), you also need to specify the &lt;transport/&gt; element which references an existing JGroups transport. This is not needed if you only intend to have local caches only. 
+
+
+----
+
+<transport executor="infinispan-transport" lock-timeout="60000" stack="udp" cluster="my-cluster-name"/>
+
+----
+
+[[sid-68355126_InfinispanServer-Caches]]
+
+
+===== Caches
+
+Now you can declare your caches. Please be aware that only the caches declared in the configuration will be available to the endpoints and that attempting to access an undefined cache is an illegal operation. Contrast this with the default Infinispan library behaviour where obtaining an undefined cache will implicitly create one using the default settings. The following are example declarations for all four available types of caches:
+
+
+----
+
+<local-cache name="default" start="EAGER">
+  ...
+</local-cache>
+
+<replicated-cache name="replcache" mode="SYNC" remote-timeout="30000" start="EAGER">
+  ...
+</replicated-cache>
+
+<invalidation-cache name="invcache" mode="SYNC" remote-timeout="30000" start="EAGER">
+  ...
+</invalidation-cache>
+<distributed-cache name="distcache" mode="SYNC" segments="20" owners="2" remote-timeout="30000" start="EAGER">
+  ...
+</distributed-cache>
+
+----
+
+[[sid-68355126_InfinispanServer-Expiration]]
+
+
+===== Expiration
+
+ To define a default expiration for entries in a cache, add the &lt;expiration/&gt; element as follows: 
+
+
+----
+
+<expiration lifespan="2000" max-idle="1000"/>
+
+----
+
+The possible attributes for the expiration element are:
+
+
+*  _lifespan_ maximum lifespan of a cache entry, after which the entry is expired cluster-wide, in milliseconds. -1 means the entries never expire. 
+
+
+*  _max-idle_ maximum idle time a cache entry will be maintained in the cache, in milliseconds. If the idle time is exceeded, the entry will be expired cluster-wide. -1 means the entries never expire. 
+
+
+*  _interval_ interval (in milliseconds) between subsequent runs to purge expired entries from memory and any cache stores. If you wish to disable the periodic eviction process altogether, set interval to -1. 
+
+[[sid-68355126_InfinispanServer-Eviction]]
+
+
+===== Eviction
+
+ To define an eviction strategy for a cache, add the &lt;eviction/&gt; element as follows: 
+
+
+----
+
+<eviction strategy="LIRS" max-entries="1000"/>
+
+----
+
+The possible attributes for the eviction element are:
+
+
+*  _strategy_ sets the cache eviction strategy. Available options are 'UNORDERED', 'FIFO', 'LRU', 'LIRS' and 'NONE' (to disable eviction). 
+
+
+*  _max-entries_ maximum number of entries in a cache instance. If selected value is not a power of two the actual value will default to the least power of two larger than selected value. -1 means no limit. 
+
+[[sid-68355126_InfinispanServer-Locking]]
+
+
+===== Locking
+
+ To define the locking configuration for a cache, add the &lt;locking/&gt; element as follows: 
+
+
+----
+
+<locking isolation="REPEATABLE_READ" acquire-timeout="30000" concurrency-level="1000" striping="false"/>
+
+----
+
+The possible attributes for the locking element are:
+
+
+*  _isolation_ sets the cache locking isolation level. Can be NONE, READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE. Defaults to REPEATABLE_READ 
+
+
+*  _striping_ if true, a pool of shared locks is maintained for all entries that need to be locked. Otherwise, a lock is created per entry in the cache. Lock striping helps control memory footprint but may reduce concurrency in the system. 
+
+
+*  _acquire-timeout_ maximum time to attempt a particular lock acquisition. 
+
+
+*  _concurrency-level_ concurrency level for lock containers. Adjust this value according to the number of concurrent threads interacting with Infinispan. 
+
+
+*  _concurrent-updates_ for non-transactional caches only: if set to true(default value) the cache keeps data consistent in the case of concurrent updates. For clustered caches this comes at the cost of an additional RPC, so if you don't expect your application to write data concurrently, disabling this flag increases performance. 
+
+[[sid-68355126_InfinispanServer-Transactions]]
+
+
+===== Transactions
+
+While it is possible to configure server caches to be transactional, none of the available protocols offer transaction capabilities.
+
+[[sid-68355126_InfinispanServer-LoadersandStores]]
+
+
+===== Loaders and Stores
+
+TODO
+
+[[sid-68355126_InfinispanServer-Endpointsubsystemconfiguration]]
+
+
+==== Endpoint subsystem configuration
+
+The endpoint subsystem exposes a whole container (or in the case of Memcached, a single cache) over a specific connector protocol. You can define as many connector as you need, provided they bind on different interfaces/ports.
+
+The subsystem declaration is enclosed in the following XML element:
+
+
+----
+
+ <subsystem xmlns="urn:infinispan:server:endpoint:5.3">
+  ...
+ </subsystem>
+
+----
+
+[[sid-68355126_InfinispanServer-HotRodx]]
+
+
+===== HotRod
+
+ The following connector declaration enables a HotRod server using the _hotrod_ socket binding (declared within a &lt;socket-binding-group /&gt; element) and exposing the caches declared in the _local_ container, using defaults for all other settings. 
+
+
+----
+
+<hotrod-connector socket-binding="hotrod" cache-container="local" />
+
+----
+
+The connector will create a supporting topology cache with default settings. If you wish to tune these settings add the &lt;topology-state-transfer /&gt; child element to the connector as follows:
+
+
+----
+
+<hotrod-connector socket-binding="hotrod" cache-container="local">
+   <topology-state-transfer lazy-retrieval="false" lock-timeout="1000" replication-timeout="5000" />
+</hotrod-connector>
+
+----
+
+The HotRod connector can be further tuned with additional settings such as concurrency and buffering. See the protocol connector settings paragraph for additional details
+
+ Furthermore the HotRod connector can be secured using SSL. First you need to declare an SSL server identity within a security realm in the management section of the configuration file. The SSL server identity should specify the path to a keystore and its secret. Refer to the AS7.2 link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=53117128$$[documentation] on this. Next add the &lt;security /&gt; element to the HotRod connector as follows: 
+
+
+----
+
+<hotrod-connector socket-binding="hotrod" cache-container="local">
+    <security ssl="true" security-realm="ApplicationRealm" require-ssl-client-auth="false" />
+</hotrod-connector>
+
+----
+
+[[sid-68355126_InfinispanServer-Memcachedx]]
+
+
+===== Memcached
+
+ The following connector declaration enables a Memcached server using the _memcached_ socket binding (declared within a &lt;socket-binding-group /&gt; element) and exposing the _memcachedCache_ cache declared in the _local_ container, using defaults for all other settings. Because of limitations in the Memcached protocol, only one cache can be exposed by a connector. If you wish to expose more than one cache, declare additional memcached-connectors on different socket-bindings. 
+
+
+----
+
+<memcached-connector socket-binding="memcached" cache-container="local"/>
+
+----
+
+[[sid-68355126_InfinispanServer-WebSocketx]]
+
+
+===== WebSocket
+
+
+----
+
+<websocket-connector socket-binding="websocket" cache-container="local"/>
+
+----
+
+[[sid-68355126_InfinispanServer-REST]]
+
+
+===== REST
+
+ The REST connector differs from the above connectors because it piggybacks on the web subsystem. Therefore configurations such as socket binding, worker threads, timeouts, etc must be performed on the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=53117098$$[web subsystem] . 
+
+
+----
+
+<rest-connector virtual-server="default-host" cache-container="local" security-domain="other" auth-method="BASIC"/>
+
+----
+
+[[sid-68355126_InfinispanServer-]]
+
+
+===== 
+
+[[sid-68355126_InfinispanServer-CommonProtocolConnectorSettings]]
+
+
+===== Common Protocol Connector Settings
+
+The HotRod, Memcached and WebSocket protocol connectors support a number of tuning attributes in their declaration:
+
+
+*  _worker-threads_ Sets the number of worker threads. Defaults to twice the number of available cores. 
+
+
+*  _idle-timeout_ Specifies the maximum time in seconds that connections from client will be kept open without activity. Defaults to -1 (connections will never timeout) 
+
+
+*  _tcp-nodelay_ Affects TCP NODELAY on the TCP stack. Defaults to enabled. 
+
+
+*  _send-buffer-size_ Sets the size of the send buffer. Defaults to 
+
+
+*  _receive-buffer-size_ Sets the size of the receive buffer. Defaults to 
+
+[[sid-68355126_InfinispanServer-ProtocolInteroperability]]
+
+
+===== Protocol Interoperability
+
+By default each protocol stores data in the cache in the most efficient format for that protocol, so that no transformations are required when retrieving entries. If instead you need to access the same data from multiple protocols, you should enable compatibility mode on the caches that you want to share. This is done by adding the &lt;compatibility /&gt; element to a cache definition, as follows:
+
+
+----
+
+<cache-container name="local" default-cache="default">
+    <local-cache name="default" start="EAGER">
+        <transaction mode="NONE"/>
+        <compatibility enabled="true"/>
+    </local-cache>
+</cache-container>
+
+----
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-72-Storing_objects_e_g_arrays_with_custom_Equivalence_functions.adoc b/documentation/src/main/asciidoc/user_guide/chapter-72-Storing_objects_e_g_arrays_with_custom_Equivalence_functions.adoc
new file mode 100644
index 0000000..32eba82
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-72-Storing_objects_e_g_arrays_with_custom_Equivalence_functions.adoc
@@ -0,0 +1,314 @@
+[[sid-68355127]]
+
+==  Storing objects (e.g. arrays) with custom Equivalence functions
+
+[[sid-68355127_Storingobjects%28e.g.arrays%29withcustomEquivalencefunctions-TheProblemofCachingArrays]]
+
+
+=== The Problem of Caching Arrays
+
+ There are times when users want to store data into Infinispan caches whose default equals() and/or hashCode() implementations produce undesirable results. One of those data types are arrays. When users want to store arrays into Infinispan caches, the big majority of users want equals() function to be calculated based on the contents of the arrays as opposed to comparing the object reference, so if we take byte arrays are example, users would like to call up the static java.util.Arrays.equals(byte[], byte[]) method instead of Object.equals() . The same thing happens with hashCode() . The default implementation of Object.hashCode() for arrays suffers from the same issue, because the result is not produced based on the contents of the array, but rather based on the object reference to the array. 
+
+[[sid-68355127_Storingobjects%28e.g.arrays%29withcustomEquivalencefunctions-Oldworkaround%3AWrapperClasses]]
+
+
+=== Old workaround: Wrapper Classes
+
+ Until Infinispan 5.2, the way to get around these issues was by wrapping arrays, or any other object whose equals()/hashCode() implementations are not best suited for being stored in Infinispan caches, around another object which would override Object.equals() and Object.hashCode() to do the correct calculations. This is where classes such as link:$$https://github.com/infinispan/infinispan/blob/master/core/src/main/java/org/infinispan/util/ByteArrayKey.java$$[ByteArrayKey] originate: 
+
+
+----
+
+public final class ByteArrayKey implements Serializable {
+
+   private final byte[] data;
+   private final int hashCode;
+
+   public ByteArrayKey(byte[] data) {
+      this.data = data;
+      this.hashCode = 41 + Arrays.hashCode(data);
+   }
+
+   public byte[] getData() {
+      return data;
+   }
+
+   @Override
+   public boolean equals(Object obj) {
+      if (this == obj) return true;
+      if (obj == null || ByteArrayKey.class != obj.getClass()) return false;
+      ByteArrayKey key = (ByteArrayKey) obj;
+      return Arrays.equals(key.data, this.data);
+   }
+
+   @Override
+   public int hashCode() {
+      return hashCode;
+   }
+
+   @Override
+   public String toString() {
+      return new StringBuilder().append("ByteArrayKey").append("{")
+         .append("data=").append(Util.printArray(data, true))
+         .append("}").toString();
+   }
+
+}
+
+----
+
+The problem with these classes is that they result in extra memory consumption due to the extra objects required to support data types such as arrays and really, these classes just a workaround for the lack of ability to provide a way to pass in a function that specifies how two byte arrays are are compared, or how to calculate the hash code of a given array.
+
+[[sid-68355127_Storingobjects%28e.g.arrays%29withcustomEquivalencefunctions-Newsolution%3APluggingEquivalencefunctions]]
+
+
+=== New solution: Plugging Equivalence functions
+
+ Starting with Infinispan 5.3, Infinispan users can provide these functions for both keys and values implementing the new 
+            link:$$https://github.com/infinispan/infinispan/blob/master/core/src/main/java/org/infinispan/util/Equivalence.java$$[Equivalence&lt;T&gt; interface]
+           : 
+
+
+----
+
+public interface Equivalence<T> extends Serializable {
+
+   /**
+    * Returns a hash code value for the object passed.
+    *
+    * As an example, implementors can provide an alternative implementation
+    * for the hash code calculation for arrays. So, instead of relying on
+    * {@link Object#hashCode()}, call {@link java.util.Arrays.hashCode()}.
+    *
+    * @param obj instance to calculate hash code for
+    * @return a hash code value for the object passed as parameter
+    */
+   int hashCode(Object obj);
+
+   /**
+    * Indicates whether the objects passed are "equal to" each other.
+    *
+    * As an example, implementors can provide an alternative implementation
+    * for the equals for arrays. So, instead of relying on
+    * {@link Object#equals(Object)}}, call {@link java.util.Arrays.equals())}.
+    *
+    * @param obj to be compared with second parameter
+    * @param otherObj to be compared with first parameter
+    * @return <code>true</code> if both objects are the same;
+    *         <code>false</code> otherwise
+    */
+   boolean equals(T obj, Object otherObj);
+
+   /**
+    * Returns a string representation of the given object.
+    *
+    * @param obj whose string representation is to be returned
+    * @return a string representation of the passed object
+    */
+   String toString(Object obj);
+
+   /**
+    * Returns whether the given object is comparable. In other words, if
+    * given an instance of the object, a sensible comparison can be computed
+    * using {@link #compare(Object, Object)} method.
+    *
+    * @param obj instance to check if it's comparable
+    * @return <code>true</code> if the object is comparable;
+    *         <code>false</code> otherwise
+    */
+   boolean isComparable(Object obj); // For future support for objects that are not comparable, i.e. arrays
+
+   /**
+    * Compares the two given objects for order. Returns a negative integer,
+    * zero, or a positive integer as the first object is less than, equal to,
+    * or greater than the second object.
+    *
+    * @param obj first object to be compared
+    * @param otherObj second object to be compared
+    * @return a negative integer, zero, or a positive integer as the
+    *         first object is less than, equal to, or greater than the
+    *         second object
+    */
+   int compare(Object obj, Object otherObj); // For future support for objects that are not comparable, i.e. arrays
+
+}
+
+----
+
+ Implementations of these function can be pretty flexible. On one side, they could focus on a single, particular type, such as ByteArrayEquivalence below which expects nothing else other than byte arrays, such as in the case of Hot Rod based Infinispan remote caches: 
+
+
+----
+
+package com.acme;
+
+public class ByteArrayEquivalence implements Equivalence<byte[]> {
+
+   public static final Equivalence<byte[]> INSTANCE = new ByteArrayEquivalence();
+
+   @Override
+   public int hashCode(Object obj) {
+      return 41 + Arrays.hashCode((byte[]) obj);
+   }
+
+   @Override
+   public boolean equals(byte[] obj, Object otherObj) {
+      if (obj == otherObj) return true;
+      if (obj == null) return false;
+      if (otherObj == null || byte[].class != otherObj.getClass()) return false;
+      byte[] otherByteArray = (byte[]) otherObj;
+      return Arrays.equals(obj, otherByteArray);
+   }
+
+   @Override
+   public String toString(Object obj) {
+      return Arrays.toString((byte[]) obj);
+   }
+
+   @Override
+   public boolean isComparable(Object obj) {
+      return false;
+   }
+
+   @Override
+   public int compare(Object obj, Object otherObj) {
+      return 0; // irrelevant
+   }
+
+}
+
+----
+
+ Or you could have implementations that support multiple different types, in case you store varied information, for example link:$$https://github.com/infinispan/infinispan-server/blob/master/infinispan/src/main/java/org/jboss/as/clustering/infinispan/equivalence/AnyServerEquivalence.java$$[AnyServerEquivalence] which supports both arrays and normal objects: 
+
+
+----
+
+public class AnyServerEquivalence implements Equivalence<Object> {
+
+    private static boolean isByteArray(Object obj) {
+        return byte[].class == obj.getClass();
+    }
+
+    @Override
+    public int hashCode(Object obj) {
+        if (isByteArray(obj)) {
+            return 41 + Arrays.hashCode((byte[]) obj);
+        } else {
+            return obj.hashCode();
+        }
+    }
+
+    @Override
+    public boolean equals(Object obj, Object otherObj) {
+        if (obj == otherObj)
+            return true;
+        if (obj == null || otherObj == null)
+            return false;
+        if (isByteArray(obj) && isByteArray(otherObj))
+            return Arrays.equals((byte[]) obj, (byte[]) otherObj);
+        return obj.equals(otherObj);
+    }
+
+    @Override
+    public String toString(Object obj) {
+        if (isByteArray(obj))
+            return Arrays.toString((byte[]) obj);
+        else
+            return obj.toString();
+    }
+
+    @Override
+    public boolean isComparable(Object obj) {
+        return obj instanceof Comparable;
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public int compare(Object obj, Object otherObj) {
+       return ((Comparable<Object>) obj).compareTo(otherObj);
+    }
+
+}
+
+----
+
+[[sid-68355127_Storingobjects%28e.g.arrays%29withcustomEquivalencefunctions-ConfiguringEquivalencefunctions]]
+
+
+==== Configuring Equivalence functions
+
+[[sid-68355127_Storingobjects%28e.g.arrays%29withcustomEquivalencefunctions-UsingXML]]
+
+
+===== Using XML
+
+ The way to configure Infinispan with these Equivalence implementations is by adding them to the &lt;dataContainer&gt; XML element. For example, if we wanted to have byte array based keys, but the values would be normal objects, we'd define: 
+
+
+----
+
+<dataContainer keyEquivalence="com.acme.ByteArrayEquivalence" />
+
+----
+
+ If you were trying to store both byte arrays as keys and values, you'd configure valueEquivalence attribute in &lt;dataContainer&gt; XML element: 
+
+
+----
+
+<dataContainer keyEquivalence="com.acme.ByteArrayEquivalence" valueEquivalence="com.acme.ByteArrayEquivalence" />
+
+----
+
+ If no key or value equivalence is configured, they default to 
+                link:$$https://github.com/infinispan/infinispan/blob/master/core/src/main/java/org/infinispan/util/AnyEquivalence.java$$[org.infinispan.util.AnyEquivalence]
+               , which behaves like any standard java object, delegating the equals/hashCode() calls to the objects themselves. 
+
+[[sid-68355127_Storingobjects%28e.g.arrays%29withcustomEquivalencefunctions-UsingProgrammaticConfiguration]]
+
+
+===== Using Programmatic Configuration
+
+Key and/or value equivalence could also have been configured programmatically, for example:
+
+
+----
+
+EmbeddedCacheManager cacheManager = ...;
+ConfigurationBuilder builder = new ConfigurationBuilder();
+builder.dataContainer()
+   .keyEquivalence(com.acme.ByteArrayEquivalence.INSTANCE)
+   .valueEquivalence(com.acme.ByteArrayEquivalence.INSTANCE);
+cacheManager.defineConfiguration("myCache", builder.build());
+
+----
+
+[[sid-68355127_Storingobjects%28e.g.arrays%29withcustomEquivalencefunctions-Bytearraystorageexample]]
+
+
+==== Byte array storage example
+
+ Assuming you've configured both keyEquivalence (via XML, or programmatically) to be com.acme.ByteArrayEquivalence , you should now be able to write code like this and get the assertion to succeed. If keyEquivalence has not been configured correctly, this test will fail: 
+
+
+----
+
+Cache<byte[], byte[]> cache = ...
+byte[] key = {1, 2, 3};
+byte[] value = {4, 5, 6};
+cache.put(key, value);
+
+byte[] expectedValue = {4, 5, 6};
+byte[] lookupKey = {1, 2, 3};
+assert Arrays.equals(expectedValue, cache.get(lookupKey));
+
+----
+
+[[sid-68355127_Storingobjects%28e.g.arrays%29withcustomEquivalencefunctions-OthermethodsinEquivalenceinterface]]
+
+
+==== Other methods in Equivalence interface
+
+ Finally, Equivalence defines some extra methods, such as toString(Object obj) , isComparable(Object obj) and compare(Object obj, Object otherObj) , which again can be used to provide different implementations to the ones provided for the JDK. For example, the toString() method can be used to provide a different String representation of the object, which is again useful for arrays since the default JDK implementation does not print the array contents. The comparable functions are not yet used by Infinispan but they've been defined in order to help with potential future support of tree-based storage in inner data structures. 
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-73-Interoperability_between_Embedded_and_Remote_Server_Endpoints.adoc b/documentation/src/main/asciidoc/user_guide/chapter-73-Interoperability_between_Embedded_and_Remote_Server_Endpoints.adoc
new file mode 100644
index 0000000..795c7ce
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-73-Interoperability_between_Embedded_and_Remote_Server_Endpoints.adoc
@@ -0,0 +1,73 @@
+[[sid-68355128]]
+
+==  Interoperability between Embedded and Remote Server Endpoints
+
+ Infinispan offers the possibility to store and retrieve data in a link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=5931885$$[local, embedded way] , and also link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737048$$[remotely thanks to the multiple endpoints offered] , but until now if you choose one way to access the data, you were stuck with it. For example, you could not store data using the embedded interface and retrieve it via REST. 
+
+Starting with Infinispan 5.3, it is now possible to configure Infinispan caches to work in a special, compatibility mode for those users interested in accessing Infinispan in multiple ways. Achieving such compatibility requires extra work from Infinispan in order to make sure that contents are converted back and forth between the different formats of each endpoint and this is the reason why compatibility mode is disabled by default.
+
+[[sid-68355128_InteroperabilitybetweenEmbeddedandRemoteServerEndpoints-EnableCompatibilityMode]]
+
+
+=== Enable Compatibility Mode
+
+ For compatibility mode to work as expected, all endpoints need to be configured with the same cache manager, and need to talk to the same cache. If you're using the brand new link:$$http://www.jboss.org/infinispan/downloads$$[Infinispan Server distribution] , this is all done for you. If you're in the mood to experiment with this in a standalone unit test, link:$$https://github.com/infinispan/infinispan/blob/master/integrationtests/compatibility-mode-it/src/test/java/org/infinispan/it/compatibility/CompatibilityCacheFactory.java$$[this class] shows you how you can start multiple endpoints from a single class. 
+
+So, to get started using Infinispan's compatibility mode, it needs to be enabled, either via XML:
+
+
+----
+
+<namedCache...>
+   <compatibility enabled="true"/>
+</namedCache>
+
+----
+
+Or programmatically:
+
+
+----
+
+ConfigurationBuilder builder = ...
+builder.compatibility().enable();
+
+----
+
+The key thing to remember about Infinispan's compatibility mode is that where possible, it tries to store data unmarshalling or deserializing it. It does so because the most common use case is for it to store Java objects and having Java objects stored in deserialized form means that they're very easy to use from an embedded cache. With this in mind, it makes some assumptions. For example, if something it's stored via Hot Rod, it's most likely coming from the reference Hot Rod client, which is written in Java, and which uses a marshaller that keeps binary payloads very compact. So, when the Hot Rod operation reaches the compatibility layer, it will try to unmarshall it, by default using the same default marshaller used by the Java Hot Rod client, hence providing good out-of-the-box support for the majority of cases.
+
+[[sid-68355128_InteroperabilitybetweenEmbeddedandRemoteServerEndpoints-Optional%3AConfiguringCompatibilityMarshaller]]
+
+
+==== Optional: Configuring Compatibility Marshaller
+
+ It could happen though the client might be using a Hot Rod client written for another language other than Java, say link:$$https://github.com/infinispan/ruby-client$$[Ruby] or link:$$https://github.com/infinispan/python-client$$[Python] . In this case, some some kind of custom marshaller needs to be configured that either translates that serialized payload into a Java object to be stored in the cache, or keeps it in serialized form. Both options are valid, but of course it will have an impact on what kind of objects are retrieved from Infinispan if using the embedded cache. The marshaller is expected to implement link:$$http://docs.jboss.org/infinispan/5.3/apidocs/org/infinispan/marshall/Marshaller.html$$[this interface] . Configuring the compatibility marshaller is optional and can be done via XML: 
+
+
+----
+
+<namedCache...>
+   <compatibility enabled="true" marshallerClass="com.acme.CustomMarshaller"/>
+</namedCache>
+
+----
+
+Or programmatically:
+
+
+----
+
+ConfigurationBuilder builder = ...
+builder.compatibility().enable().marshaller(new com.acme.CustomMarshaller());
+
+----
+
+ One concrete example of this marshaller logic can be found in the link:$$https://github.com/infinispan/infinispan/blob/master/integrationtests/compatibility-mode-it/src/test/java/org/infinispan/it/compatibility/EmbeddedRestMemcachedHotRodTest.java#L161$$[SpyMemcachedCompatibleMarshaller] . link:$$https://code.google.com/p/spymemcached/$$[Spy Memcached] uses their own transcoders in order to marshall objects, so the compatibility marshaller created is in charge of marshalling/unmarshalling data stored via Spy Memcached client. If you want to retrieve data stored via Spy Memcached via say Hot Rod, you can link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737142$$[configure the Java Hot Rod client to use this same marshaller] , and this is precisely what the test where the Spy Memcached marshaller is located is demonstrating. 
+
+[[sid-68355128_InteroperabilitybetweenEmbeddedandRemoteServerEndpoints-Codeexamples]]
+
+
+=== Code examples
+
+ The best code examples available showing compatibility in action can be found in the link:$$https://github.com/infinispan/infinispan/tree/master/integrationtests/compatibility-mode-it/src/test/java/org/infinispan/it/compatibility$$[Infinispan Compatibility Mode testsuite] , but more will be developed in the near future. 
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-74-Infinispan_for_HTTP_session_clustering_and_caching.adoc b/documentation/src/main/asciidoc/user_guide/chapter-74-Infinispan_for_HTTP_session_clustering_and_caching.adoc
new file mode 100644
index 0000000..a009624
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-74-Infinispan_for_HTTP_session_clustering_and_caching.adoc
@@ -0,0 +1,45 @@
+[[sid-68355129]]
+
+==  Infinispan for HTTP session clustering and caching
+
+One popular use case for data grids is to cache and cluster HTTP sessions in servlet containers.  This provides servlet containers and Java EE application servers with the following features:
+
+
+* Fast access to HTTP sessions, as they're cached in memory
+
+
+* Distribution of HTTP sessions across a cluster.  Allows for failover and high availability between servlet container or app server nodes.
+
+[[sid-68355129_InfinispanforHTTPsessionclusteringandcaching-JBossASandWildFly]]
+
+
+=== JBoss AS and WildFly
+
+ link:$$http://www.jboss.org/jbossas$$[JBoss AS] and link:$$http://www.wildfly.org$$[WildFly] already use Infinispan for HTTP session caching and clustering. 
+
+[[sid-68355129_InfinispanforHTTPsessionclusteringandcaching-Jetty]]
+
+
+=== Jetty
+
+ link:$$http://www.eclipse.org/jetty$$[Jetty] can be set up to use Infinispan for HTTP session management, using link:$$https://code.google.com/p/infinispan-http-session-manager/wiki/Home$$[this adapter] . 
+
+[[sid-68355129_InfinispanforHTTPsessionclusteringandcaching-Otherapplicationserversandservletcontainers]]
+
+
+=== Other application servers and servlet containers
+
+Creating plugins for other servlet containers and app servers should be easy enough, following the pattern used by JBossAS/WildFly/Jetty above.  Please see the open tasks below, contributions accepted!
+
+
+*  link:$$https://issues.jboss.org/browse/ISPN-462$$[ISPN-462 HTTP and EJB session management for WebSphere] 
+
+
+*  link:$$https://issues.jboss.org/browse/ISPN-463$$[ISPN-463 HTTP and EJB session management for WebLogic] 
+
+
+*  link:$$https://issues.jboss.org/browse/ISPN-464$$[ISPN-464 HTTP and EJB session management for Glassfish] 
+
+
+*  link:$$https://issues.jboss.org/browse/ISPN-465$$[ISPN-465 HTTP session management for Tomcat] 
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-75-Infinispan_with_Groovy.adoc b/documentation/src/main/asciidoc/user_guide/chapter-75-Infinispan_with_Groovy.adoc
new file mode 100644
index 0000000..dcb59b7
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-75-Infinispan_with_Groovy.adoc
@@ -0,0 +1,546 @@
+[[sid-68355110]]
+
+==  Infinispan with Groovy
+
+[[sid-68355110_InfinispanwithGroovy-Introduction]]
+
+
+=== Introduction
+
+ The idea by this tutorial is to give an introduction in the use of the link:$$http://infinispan.sourceforge.net/4.0/apidocs/$$[Infinispan API] and its configuration file. As trying to do it in a more interactive fashion, the tutorial makes use of the link:$$http://groovy.codehaus.org/$$[Groovy] dynamic language that will allow to interact with the API by using a console. So your first task should be to create the necessary environment to execute this tutorial, you can find the instructions link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737125$$[here] . 
+
+ The tutorial will start by showing the basic usage of the link:$$http://infinispan.sourceforge.net/4.0/apidocs/$$[Infinispan API] and a use of a simple cache configuration, then it will walk through different configuration scenarios and use cases. By the end of the tutorial you should have a clear understanding of the use the Infinispan API and some of the various configuration options. 
+
+The scenarios and use cases shown are:
+
+
+* Basic cache configuration
+
+
+* Cache with transaction management configuration
+
+
+* Cache with a cache store configuration
+
+
+* Cache with eviction configuration
+
+
+* Cache with eviction and cache store configuration
+
+
+* Cache with REPL_SYNC &amp; transaction management configuration.
+
+ All the sample configurations are in the sample-configurations.xml file attached to this tutorial, check the link:$$http://infinispan.sourceforge.net/4.0/apidocs/$$[environment configuration] to know how to make use of this configuration file. Lets get started: 
+
+ _NOTE:_ This document is part of the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3736106$$[Infinispan Interactive Tutorial] 
+
+[[sid-68355110_InfinispanwithGroovy-Introductionx]]
+
+
+==== Introduction
+
+The Infinispan tutorial makes use of Groovy to get a more interactive experience when starting to learn about how to use the Infinispan API. So you will need to install a few prerequisites before getting started:
+
+
+*  The Groovy Platform, link:$$http://dist.groovy.codehaus.org/distributions/groovy-binary-1.6.3.zip$$[I used Groovy 1.6.3] 
+
+
+* Java and Infinispan
+
+ Download those and extract/install where you feel appropriate, depending on your operating system and personal preferences you will either have installers or compressed distributions. You can read more about read installing Java and Infinispan in link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737054$$[Installing Infinispan for the tutorials] . 
+
+[[sid-68355110_InfinispanwithGroovy-InstallingGroovy]]
+
+
+==== Installing Groovy
+
+You can use the installer or compressed file to install the Groovy Platform, I used the compressed file and decompressed at C:\Program Files\groovy\groovy-1.6.3. Once you have installed the Groovy Platform you should set some environment variables:
+
+
+
+
+----
+GROOVY_HOME=C:\Program Files\groovy\groovy-1.6.3
+----
+
+ and add to the PATH environment variable: 
+
+
+----
+PATH=%PATH%;%GROOVY_HOME%\bin
+----
+
+ test that everything is correct by executing in a Command Shell/Terminal the commands shown: 
+
+
+----
+$> groovy -v
+Groovy Version: 1.6.3 JVM: 1.6.0_14
+----
+
+If you get a similar result as shown, everything went well.
+
+[[sid-68355110_InfinispanwithGroovy-InstallingInfinispan]]
+
+
+==== Installing Infinispan
+
+Now you should add the Infinispan libraries to the Groovy Platform so you will able to access the API from the Groovy console. Add the infinispan-core.jar and its dependencies to the $USER_HOME/.groovy/lib directory, the jar is located in $INFINISPAN_HOME/modules/core and the dependencies at $INIFINISPAN_HOME/modules/core/lib.
+
+ For example, on Windows, you need to copy it to: 
+
+
+----
+C:\Documents and Settings\Alejandro Montenegro\.groovy\lib
+
+----
+
+ or on Linux: 
+
+
+----
+/home/amontenegro/.groovy/lib
+
+----
+
+and $INFINISPAN_HOME is where you decompressed the Infinispan distribution.
+
+To test the installation, download the attached file infinispantest.groovy and in a Command Shell/Terminal execute
+
+
+----
+$> groovy infinispantest
+4.0.0.ALPHA5
+----
+
+[[sid-68355110_InfinispanwithGroovy-Settingtheclasspath]]
+
+
+==== Setting the classpath
+
+The last thing to do is to add to the CLASSPATH environment variable the sample configuration file, this file contains definitions of cache's that will be used in the tutorial. I created the directory $USER_HOME/.groovy/cp and added it to the classpath
+
+ For example, on Windows: 
+
+
+----
+CLASSPATH=%CLASSPATH%;C:\Documents and Settings\Alejandro Montenegro\.groovy\cp
+
+----
+
+ or, on Linux: 
+
+
+----
+CLASSPATH=$CLASSPATH:/home/amontenegro/.groovy/cp
+
+----
+
+finally add the sample-configurations.xml and infinispan-config-4.0.xsd files(attached) to the directory.
+
+[[sid-68355110_InfinispanwithGroovy-Loadingtheconfigurationfile]]
+
+
+=== Loading the configuration file
+
+ The link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/manager/CacheManager.html$$[cache manager] is the responsible to manage all the link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/Cache.html$$[cache's] , so you have to start by indicating where to get the cache definitions to the link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/manager/CacheManager.html$$[cache manager] , remember that the cache definitions are in the sample-configurations.xml file. If no cache definitions are indicated, the link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/manager/CacheManager.html$$[cache manager] will use a default cache. 
+
+ Start by open a groovy console by typing groovy.sh in a command shell or terminal. You should now have something similar to: 
+
+
+[listing]
+....
+Groovy Shell (1.6.3, JVM: 1.6.0_14)
+Type 'help' or '\h' for help.
+-------------------------------------------------------
+groovy:000>
+
+....
+
+ It's time to start typing some commands, first start by importing the necessary libraries 
+
+
+----
+groovy:000> import org.infinispan.*
+=== > [import org.infinispan.*]
+groovy:000> import org.infinispan.manager.*
+=== > [import org.infinispan.*, import org.infinispan.manager.*]
+
+----
+
+And now, create a cache manager indicating the file with the cache definitions.
+
+
+
+
+----
+groovy:000> manager = new DefaultCacheManager("sample-configurations.xml")
+=== > org.infinispan.manager.DefaultCacheManager@19cc1b@Address:null
+----
+
+the cache manager has now the knowledge of all the named caches defined in the configuration file and also has a no named cache that's used by default. You can now access any of the cache's by interacting with the cache manager as shown.
+
+
+----
+groovy:000> defaultCache = manager.getCache()
+=== > Cache 'org.infinispan.manager.DefaultCacheManager.DEFAULT_CACHE_NAME'@7359733
+//TO GET A NAMED CACHE
+groovy:000> cache = manager.getCache("NameOfCache")
+
+----
+
+[[sid-68355110_InfinispanwithGroovy-Basiccacheconfiguration]]
+
+
+=== Basic cache configuration
+
+ The basic configuration, is the simplest configuration that you can have, its make use of default settings for the properties of the cache configuration, the only thing you have to set is the name of the cache. 
+
+
+----
+<namedCache name="Local"/>
+
+----
+
+ That's all you have to add to the configuration file to have a simple named cache, now its time to interact with the cache by using the Infinispan API. Lets start by getting the named cache and put some objects inside it. 
+
+
+----
+//START BY GETTING A REFERENCE TO THE NAMED CACHE
+groovy:000> localCache = manager.getCache("Local")
+=== > Cache 'Local'@19521418
+//THE INITIAL SIZE IS 0
+groovy:000> localCache.size()
+=== > 0
+//NOW PUT AN OBJECT INSIDE THE CACHE
+groovy:000> localCache.put("aKey", "aValue")
+=== > null
+//NOW THE SIZE IS 1
+groovy:000> localCache.size()
+=== > 1
+//CHECK IF IT HAS OUR OBJECT
+groovy:000> localCache.containsKey("aKey")
+=== > true
+//BY OBTAINING AN OBJECT DOESN'T MEAN TO REMOVE
+groovy:000> localCache.get("aKey")
+=== > aValue
+groovy:000> localCache.size()
+=== > 1
+//TO REMOVE ASK IT EXPLICITLY
+groovy:000> localCache.remove("aKey")
+=== > aValue
+groovy:000> localCache.isEmpty()
+=== > true
+
+----
+
+So you have seen the basic of the Infinispan API, adding, getting and removing from the cache, there is more, but don't forget that you are working with a cache that are an extension of java.util.ConcurrentHasMap and the rest of the API is as simple as the one shown above, many of the cool things in Infinispan are totally transparent (that's actually the coolest thing about Infinispan) and depends only on the configuration of your cache.
+
+ If you check the Infinispan JavaDoc you will see that the Cache#put() method has been overridden several times. 
+
+
+----
+//YOU WILL NEED TO IMPORT ANOTHER LIBRARY
+groovy:000> import java.util.concurrent.TimeUnit
+=== > [import org.infinispan.*, import org.infinispan.manager.*, import java.util.concurrent.TimeUnit]
+//NOTHING NEW HERE JUST PUTTING A NEW OBJECT
+groovy:000> localCache.put("bKey", "bValue")
+=== > null
+//WOW! WHATS HAPPEN HERE? PUTTED A NEW OBJECT BUT IT WILL TIMEOUT AFTER A SECOND
+groovy:000> localCache.put("timedKey", "timedValue", 1000, TimeUnit.MILLISECONDS)
+=== > null
+//LETS CHECK THE SIZE
+groovy:000> localCache.size()
+=== > 2
+//NOW TRY TO GET THE OBJECT, OOPS ITS GONE! (IF NOT, IT'S BECAUSE YOU ARE A SUPERTYPER, CALL GUINNESS!))
+groovy:000> localCache.get("timedKey")
+=== > null
+//LETS CHECK THE SIZE AGAIN, AS EXPECTED THE SIZE DECREASED BY 1
+groovy:000> localCache.size()
+=== > 1
+
+----
+
+ The Infinispan API also allows you to manage the life cycle of the cache, you can stop and start a cache but by default you will loose the content of the cache except if you configure a cache store, more about that later in the tutorial. lets check what happens when you restart the cache 
+
+
+----
+groovy:000> localCache.size()
+=== > 1
+//RESTARTING CACHE
+groovy:000> localCache.stop()
+=== > null
+groovy:000> localCache.start()
+=== > null
+//DAMN! LOST THE CONTENT OF THE CACHE
+groovy:000> localCache.size()
+=== > 0
+----
+
+Thats all related to the use of the Infinispan API, now lets check some different behaviors depending on the configuration of the cache.
+
+[[sid-68355110_InfinispanwithGroovy-Cachewithtransactionmanagement]]
+
+
+=== Cache with transaction management
+
+You are able to specify the cache to use a transaction manager, and even explicitly control the transactions. Start by configuring the cache to use a specific TransactionManagerLookup class. Infinispan implements a couple TransactionManagerLookup classes.
+
+
+*  link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/transaction/lookup/DummyTransactionManagerLookup.html$$[org.infinispan.transaction.lookup.DummyTransactionManagerLookup] 
+
+
+*  link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/transaction/lookup/GenericTransactionManagerLookup.html$$[org.infinispan.transaction.lookup.GenericTransactionManagerLookup] 
+
+
+*  link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/transaction/lookup/JBossStandaloneJTAManagerLookup.html$$[org.infinispan.transaction.lookup.JBossStandaloneJTAManagerLookup] 
+
+
+*  link:$$http://infinispan.sourceforge.net/4.0/apidocs/org/infinispan/transaction/lookup/JBossTransactionManagerLookup.html$$[org.infinispan.transaction.lookup.JBossTransactionManagerLookup] 
+
+Each use different methods to lookup the transaction manager, depending on the environment you are running Infinispan you should figure out which one to use. Check the JavaDoc for more details.
+
+ For the tutorial its enough to use: 
+
+
+----
+<namedCache name="LocalTX">
+    <transaction transactionManagerLookupClass="org.infinispan.transaction.lookup.DummyTransactionManagerLookup"/>
+</namedCache>
+
+----
+
+ Lets check how to interact with the Transaction Manager and to have the control over a transaction 
+
+
+----
+groovy:000> import javax.transaction.TransactionManager
+=== > [import org.infinispan.*, import org.infinispan.manager.*, import java.util.concurrent.TimeUnit, import javax.transaction.TransactionManager]
+//GET A REFERENCE TO THE CACHE WITH TRANSACTION MANAGER
+groovy:000> localTxCache = manager.getCache("LocalTX")
+=== > Cache 'LocalTX'@16075230
+groovy:000> cr = localTxCache.getComponentRegistry()
+=== > org.infinispan.factories.ComponentRegistry@87e9bf
+//GET A REFERENCE TO THE TRANSACTION MANAGER
+groovy:000> tm = cr.getComponent(TransactionManager.class)
+=== > org.infinispan.transaction.tm.DummyTransactionManager@b5d05b
+//STARTING A NEW TRANSACTION
+groovy:000> tm.begin()
+=== > null
+//PUTTING SOME OBJECTS INSIDE THE CACHE
+groovy:000> localTxCache.put("key1", "value1")
+=== > null
+//MMM SIZE DOESN'T INCREMENT
+groovy:000> localTxCache.size()
+=== > 1
+//LETS TRY AGAIN
+groovy:000> localTxCache.put("key2", "value2")
+=== > null
+//MMM NOTHING..
+groovy:000> localTxCache.size()
+=== > 2
+//OH! HAS TO DO THE COMMIT
+groovy:000> tm.commit()
+=== > null
+//AND THE SIZE IS AS EXPECTED.. HAPPY!
+groovy:000> localTxCache.size()
+=== > 2
+
+----
+
+As shown in the example, the transaction is controlled explicitly and the changes in the cache wont be reflected until you make the commit.
+
+[[sid-68355110_InfinispanwithGroovy-Cachewithacachestore]]
+
+
+=== Cache with a cache store
+
+Infinispan allows you to configure a persistent store that can be used to persist the content of the cache, so if the cache is restarted the cache will be able to keep the content. It can also be used if you want to limit the size of the cache, then the cache will start putting the objects in the store to keep the size limit, more on that when looking at the eviction configuration.
+
+Infinispan provides several cache store implementations:
+
+
+* FileCacheStore
+
+
+* JdbcBinaryCacheStore
+
+
+* JdbcMixedCacheStore
+
+
+* JdbcStringBasedCacheStore
+
+
+* JdbmCacheStore
+
+
+* S3CacheStore
+
+
+* BdbjeCacheStore
+
+ The tutorial uses the FileCacheStore, that saves the objects in files in a configured directory, in this case the /tmp directory. If the directory is not set it defaults to Infinispan-FileCacheStore in the current working directory. 
+
+
+----
+<namedCache name="CacheStore">
+     <loaders passivation="false" shared="false" preload="true">
+          <loader class="org.infinispan.loaders.file.FileCacheStore" fetchPersistentState="true"
+               ignoreModifications="false" purgeOnStartup="false">
+            <properties>
+                 <property name="location" value="/tmp"/>
+               </properties>
+          </loader>
+     </loaders>
+</namedCache>
+----
+
+Now you have a cache with persistent store, lets try it to see how it works
+
+
+----
+//GETTING THE NEW CACHE
+groovy:000> cacheCS = manager.getCache("CacheStore")
+=== > Cache 'CacheStore'@23240342
+//LETS PUT AN OBJECT INSIDE THE CACHE
+groovy:000> cacheCS.put("storedKey", "storedValue")
+=== > null
+//LETS PUT THE SAME OBJECT IN OUR BASIC CACHE
+groovy:000> localCache.put("storedKey", "storedValue")
+=== > storedValue
+//RESTART BOTH CACHES
+groovy:000> cacheCS.stop()
+=== > null
+groovy:000> localCache.stop()
+=== > null
+groovy:000> cacheCS.start()
+=== > null
+groovy:000> localCache.start()
+=== > null
+//LETS TRY GET THE OBJECT FROM THE RESTARTED BASIC CACHE.. NO LUCK
+groovy:000> localCache.get("storedKey")
+=== > null
+//INTERESTING CACHE SIZE IS NOT CERO
+groovy:000> cacheCS.size()
+=== > 1
+//WOW! JUST RESTARTED THE CACHE AND THE OBKECT KEEPS STAYING THERE!
+groovy:000> cacheCS.get("storedKey")
+=== > storedValue
+
+----
+
+[[sid-68355110_InfinispanwithGroovy-Cachewitheviction]]
+
+
+=== Cache with eviction
+
+The eviction allow to define policy for removing objects from the cache when it reach its limit, as the true is that the caches doesn't has unlimited size because of many reasons.  So the fact is that you normally will set a maximum number of objects in the cache and when that number is reached then the cache has to decide what to do when a new object is added. That's the whole story about eviction, to define the policy of removing object when the cache is full and want to keep putting objects. You have three eviction strategies:
+
+
+* NONE
+
+
+* FIFO
+
+
+* LRU
+
+ Let check the configuration of the cache: 
+
+
+----
+<namedCache name="Eviction">
+   <eviction wakeUpInterval="500" maxEntries="2" strategy="FIFO"/>
+</namedCache>
+----
+
+ The strategy has been set to FIFO, so the oldest objects will be removed first and the maximum number of objects are only 2, so it will be easy to show how it works 
+
+
+----
+//GETTING THE NEW CACHE
+groovy:000> evictionCache = manager.getCache("Eviction")
+=== > Cache 'Eviction'@5132526
+//PUT SOME OBJECTS
+groovy:000> evictionCache.put("key1", "value1")
+=== > null
+groovy:000> evictionCache.put("key2", "value2")
+=== > null
+groovy:000> evictionCache.put("key3", "value3")
+=== > null
+//HEY! JUST LOST AN OBJECT IN MY CACHE.. RIGHT, THE SIZE IS ONLY TWO
+groovy:000> evictionCache.size()
+=== > 2
+//LETS CHECK WHAT OBJECT WAS REMOVED
+groovy:000> evictionCache.get("key3")
+=== > value3
+groovy:000> evictionCache.get("key2")
+=== > value2
+//COOL! THE OLDEST WAS REMOVED
+groovy:000> evictionCache.get("key1")
+=== > null
+
+----
+
+Now you are sure that your cache wont consume all your memory and hang your system, but its an expensive price you have to pay for it, you are loosing objects in your cache. The good news is that you can mix cache store with the eviction policy and avoid loosing objects.
+
+[[sid-68355110_InfinispanwithGroovy-Cachewithevictionandcachestore]]
+
+
+=== Cache with eviction and cache store
+
+Ok, the cache has a limited size but you don't want to loose your objects in the cache. Infinispan is aware of these issues, so it makes it very simple for you combing the cache store with the eviction policy. When the cache is full it will persist an object and remove it from the cache, but if you want to recover an object that has been persisted the the cache transparently will bring it to you from the cache store.
+
+ The configuration is simple, just combine eviction and cache store configuration 
+
+
+----
+<namedCache name="CacheStoreEviction">
+     <loaders passivation="false" shared="false" preload="true">
+          <loader class="org.infinispan.loaders.file.FileCacheStore" fetchPersistentState="true"
+            ignoreModifications="false" purgeOnStartup="false">
+               <properties>
+                    <property name="location" value="/tmp"/>
+               </properties>
+          </loader>
+     </loaders>
+     <eviction wakeUpInterval="500" maxEntries="2" strategy="FIFO"/>
+</namedCache>
+----
+
+Nothing new in the configuration, lets check how it works
+
+
+----
+//GETTING THE CACHE
+groovy:000> cacheStoreEvictionCache = manager.getCache("CacheStoreEviction")
+=== > Cache 'CacheStoreEviction'@6208201
+//PUTTING SOME OBJECTS
+groovy:000> cacheStoreEvictionCache.put("cs1", "value1")
+=== > value1
+groovy:000> cacheStoreEvictionCache.put("cs2", "value2")
+=== > value2
+groovy:000> cacheStoreEvictionCache.put("cs3", "value3")
+=== > value3
+///MMM SIZE IS ONLY TWO, LETS CHECK WHAT HAPPENED
+groovy:000> cacheStoreEvictionCache.size()
+=== > 2
+groovy:000> cacheStoreEvictionCache.get("cs3")
+=== > value3
+groovy:000> cacheStoreEvictionCache.get("cs2")
+=== > value2
+//WOW! EVEN IF THE CACHE SIZE IS 2, I RECOVERED THE THREE OBJECTS.. COOL!!
+groovy:000> cacheStoreEvictionCache.get("cs1")
+=== > value1
+
+----
+
+[[sid-68355110_InfinispanwithGroovy-CachewithREPLSYNC%26transactionmanagement]]
+
+
+==== Cache with REPL_SYNC &amp; transaction management
+
+TODO
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-76-Infinispan_with_Scala.adoc b/documentation/src/main/asciidoc/user_guide/chapter-76-Infinispan_with_Scala.adoc
new file mode 100644
index 0000000..d7dfe05
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-76-Infinispan_with_Scala.adoc
@@ -0,0 +1,335 @@
+[[sid-68355111]]
+
+==  Infinispan with Scala
+
+[[sid-68355111_InfinispanwithScala-Introduction]]
+
+
+=== Introduction
+
+ This article shows how to use Infinispan with link:$$http://www.scala-lang.org/$$[Scala language] . It uses the same commands and configurations used in the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3736106$$[Groovy edition of interactive tutorial] . For more details about the scenarios and steps please visit about page since here will will only focus on Scala compatibility. 
+
+[[sid-68355111_InfinispanwithScala-Environment]]
+
+
+=== Environment
+
+ Preparing the environment is almost similar to one described here, but with a minor difference that unlike Groovy which uses _$$~/.groovy/lib$$_ folder to extend initial classpath, we will use classic _CLASSPATH_ environment variable with Scala. Another issue is that with the recent edition of Infinispan core jar file is in the root folder of $INIFINISPAN_HOME, hence here a sample bash script to prepare CLASSPATH for our demo: 
+
+
+----
+export INFINISPAN_HOME=~/build/infinispan/infinispan-4.2.1.CR1
+for j in $INFINISPAN_HOME/lib/*.jar; do CLASSPATH=$CLASSPATH:$j; done
+export CLASSPATH=$CLASSPATH:$INFINISPAN_HOME/infinispan-core.jar
+export CLASSPATH=$CLASSPATH:[Path to folder containing sample-configurations.xml file]
+----
+
+ Download*sample-configurations.xml*  file from link:$$https://docs.jboss.org/author/download/attachments/3737125/sample-configurations.xml?version=1&amp;modificationDate=1308852872000$$[here] . 
+
+[[sid-68355111_InfinispanwithScala-TestingSetup]]
+
+
+=== Testing Setup
+
+The following code shows how to start an Scala console that will allow commands to be entered interactively. To verify that the Infinispan classes have been imported correctly, an import for all Infinispan classes will be attempted and then a request will be made to print the version of Infinispan:
+
+
+----
+[z@dnb:~/Go/demos/interactive-infinispan-scala]% ./scala
+Welcome to Scala version 2.8.1.final (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_22).
+Type in expressions to have them evaluated.
+Type :help for more information.
+
+scala> import org.infinispan._
+import org.infinispan._
+
+scala> println(Version.version)
+4.2.1.CR1
+
+
+----
+
+[[sid-68355111_InfinispanwithScala-LoadingtheConfigurationfile]]
+
+
+=== Loading the Configuration file
+
+In this next example, a new cache manager will be created using the configuration file downloaded earlier:
+
+
+----
+scala> import org.infinispan.manager._                                   
+import org.infinispan.manager._
+
+scala> val manager = new DefaultCacheManager("sample-configurations.xml")
+manager: org.infinispan.manager.DefaultCacheManager = org.infinispan.manager.DefaultCacheManager@38b58e73@Address:null
+
+----
+
+Retrieving cache instances from cache manager
+
+In this example, the default cache is retrieved expecting keys and values to be of String type:
+
+
+----
+scala> val defaultCache = manager.getCache[String, String]()
+defaultCache: org.infinispan.Cache[String,String] = Cache '___defaultcache'@1326840752
+
+----
+
+In this next example, a named cache is retrieved, again with keys and values expected to be String:
+
+
+----
+scala> val namedCache = manager.getCache[String, String]("NameOfCache")
+namedCache: org.infinispan.Cache[String,String] = Cache 'NameOfCache'@394890130
+----
+
+[[sid-68355111_InfinispanwithScala-Basiccacheoperations]]
+
+
+=== Basic cache operations
+
+In this section, several basic operations will be executed against the cache that show how it can be populated with data, how data can be retrieved and size can be checked, and finally how after removing the data entered, the cache is empty:
+
+
+----
+scala> val localCache = manager.getCache[String, String]("Local")
+localCache: org.infinispan.Cache[String,String] = Cache 'Local'@420875876
+
+scala> localCache.size()
+res0: Int = 0
+
+scala> localCache.put("aKey", "aValue")
+res1: String = null
+// This null was returned by put() indicating that 
+// the key was not associated with any previous value.
+
+scala> localCache.size()
+res2: Int = 1
+
+scala> localCache.containsKey("aKey")
+res3: Boolean = true
+
+scala> localCache.get("aKey")
+res4: String = aValue
+
+scala> localCache.size()
+res5: Int = 1
+
+scala> localCache.remove("aKey")
+res6: String = aValue
+
+scala> localCache.isEmpty()
+res7: Boolean = true
+----
+
+[[sid-68355111_InfinispanwithScala-BasiccacheoperationswithTTL]]
+
+
+=== Basic cache operations with TTL
+
+When a cache entry is stored, a maximum lifespan for the entry can be provided. So, when that time is exceeded, the entry will dissapear from the cache:
+
+
+----
+scala> localCache.put("bKey", "bValue")
+res8: String = null
+
+scala> import java.util.concurrent.TimeUnit
+import java.util.concurrent.TimeUnit
+
+scala> localCache.put("timedKey", "timedValue", 1000, TimeUnit.MILLISECONDS)
+res9: String = null
+
+scala> localCache.size()
+res10: Int = 2
+
+scala> localCache.get("timedKey")
+res11: String = null
+
+scala> localCache.size()
+res12: Int = 1
+----
+
+[[sid-68355111_InfinispanwithScala-Cacherestarts]]
+
+
+=== Cache restarts
+
+When caches are local and not configured with a persistent store, restarting them means that the data is gone. To avoid this issue you can either configure caches to be clustered so that if one cache dissapears, the data is not completely gone, or configure the cache with a persistent cache store. The latter option will be explained later on.
+
+
+----
+scala> localCache.size()
+res13: Int = 1
+
+scala> localCache.stop()
+
+scala> localCache.start()
+
+scala> localCache.size()
+res16: Int = 0
+----
+
+[[sid-68355111_InfinispanwithScala-Transactionalcacheoperations]]
+
+
+=== Transactional cache operations
+
+Infinispan caches can be operated within a transaction, in such way that operations can be grouped in order to be executed atomically. The key thing to understand about transactions is that within the transactions changes are visible, but to other non-transactional operations, or other transactions, these are not visible until the transaction is committed. The following example shows how within a transaction an entry can be stored but outside the transaction, this modification is not yet visible, and that once the transaction is committed, the modification is visible to all:
+
+
+----
+scala> import javax.transaction.TransactionManager
+import javax.transaction.TransactionManager
+
+scala> val localTxCache = manager.getCache[String, String]("LocalTX")
+localTxCache: org.infinispan.Cache[String,String] = Cache 'LocalTX'@955386212
+
+scala> val tm = localTxCache.getAdvancedCache().getTransactionManager()
+tm: javax.transaction.TransactionManager = org.infinispan.transaction.tm.DummyTransactionManager@81ee8c1
+
+scala> tm.begin()
+
+scala> localTxCache.put("key1", "value1")
+res1: String = null
+
+scala> localTxCache.size()
+res2: Int = 1
+
+scala> tm.suspend()
+res3: javax.transaction.Transaction = DummyTransaction{xid=DummyXid{id=1}, status=0}
+
+scala> localTxCache.size()
+res4: Int = 0
+
+scala> localTxCache.get("key1")
+res5: String = null
+
+scala> tm.resume(res3)
+
+scala> localTxCache.size()
+res7: Int = 1
+
+scala> localTxCache.get("key1")
+res8: String = value1
+
+scala> tm.commit()
+
+scala> localTxCache.size()
+res10: Int = 1
+
+scala> localTxCache.get("key1")
+res11: String = value1
+
+----
+
+Note how this example shows a very interesting characteristic of the Scala console. Every operation's return value is stored in a temporary variable which can be referenced at a later stage, even if the user forgets to assign the result of a operation when the code was executed.
+
+[[sid-68355111_InfinispanwithScala-PersistentstoredbackedCacheoperations]]
+
+
+=== Persistent stored backed Cache operations
+
+When a cache is backed by a persistent store, restarting the cache does not lead to data being lost. Upon restart, the cache can retrieve in lazy or prefetched fashion cache entries stored in the backend persistent store:
+
+
+----
+scala> val cacheWithStore = manager.getCache[String, String]("CacheStore")
+cacheWithStore: org.infinispan.Cache[String,String] = Cache 'CacheStore'@2054925789
+
+scala> cacheWithStore.put("storedKey", "storedValue")
+res21: String = null
+
+scala> localCache.put("storedKey", "storedValue")
+res22: String = null
+
+scala> cacheWithStore.stop()
+
+scala> localCache.stop()
+
+scala> cacheWithStore.start()
+
+scala> localCache.start()
+
+scala> localCache.get("storedKey")
+res27: String = null
+
+scala> cacheWithStore.size()
+res28: Int = 1
+
+scala> cacheWithStore.get("storedKey")
+res29: String = storedValue
+
+----
+
+[[sid-68355111_InfinispanwithScala-Operatingagainstasizeboundedcache]]
+
+
+=== Operating against a size bounded cache
+
+Infinispan caches can be configured with a max number of entries, so if this is exceeded certain cache entries are evicted from in-memory cache. Which cache entries get evicted is dependant on the eviction algorithm chosen. In this particular example, FIFO algorithm has been configured, so when a cache entry needs to be evicted, those stored first will go first:
+
+
+----
+scala> val evictionCache = manager.getCache[String, String]("Eviction")
+evictionCache: org.infinispan.Cache[String,String] = Cache 'Eviction'@882725548
+
+scala> evictionCache.put("key1", "value1")
+res30: String = null
+
+scala> evictionCache.put("key2", "value2")
+res31: String = null
+
+scala> evictionCache.put("key3", "value3")
+res32: String = null
+
+scala> evictionCache.size()
+res33: Int = 2
+
+scala> evictionCache.get("key3")
+res34: String = value3
+
+scala> evictionCache.get("key2")
+res35: String = value2
+
+scala> evictionCache.get("key1")
+res36: String = null
+----
+
+[[sid-68355111_InfinispanwithScala-Sizeboundedcacheswithpersistentstore]]
+
+
+=== Size bounded caches with persistent store
+
+When caches configured with eviction are configured with a persistent store as well, when the cache exceeds certain size, apart from removing the corresponding cache entries from memory, these entries are stored in the persistent store. So, if they're requested by cache operations, these are retrieved from the cache store:
+
+
+----
+scala> val cacheStoreEvictionCache = manager.getCache[String, String]("CacheStoreEviction")
+cacheStoreEvictionCache: org.infinispan.Cache[String,String] = Cache 'CacheStoreEviction'@367917752
+
+scala> cacheStoreEvictionCache.put("cs1", "value1")
+res37: String = null
+
+scala> cacheStoreEvictionCache.put("cs2", "value2")
+res38: String = null
+
+scala> cacheStoreEvictionCache.put("cs3", "value3")
+res39: String = null
+
+scala> cacheStoreEvictionCache.size()
+res40: Int = 2
+
+scala> cacheStoreEvictionCache.get("cs3")
+res41: String = value3
+
+scala> cacheStoreEvictionCache.get("cs2")
+res42: String = value2
+
+scala> cacheStoreEvictionCache.get("cs1")
+res43: String = value1
+
+----
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-77-Data_Versioning.adoc b/documentation/src/main/asciidoc/user_guide/chapter-77-Data_Versioning.adoc
new file mode 100644
index 0000000..ba87ac9
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-77-Data_Versioning.adoc
@@ -0,0 +1,81 @@
+[[sid-68355117]]
+
+==  Data Versioning
+
+[[sid-68355117_DataVersioning-Overview]]
+
+
+=== Overview
+
+Infinispan will offer three forms of data versioning, including simple, partition aware and external.  Each case is described in detail below.
+
+[[sid-68355117_DataVersioning-Simpleversioning]]
+
+
+==== Simple versioning
+
+The purpose of simple versioning is to provide a reliable mechanism of write skew checks when using optimistic transactions, REPEATABLE_READ and a clustered cache.  Write skew checks are performed at prepare-time to ensure a concurrent transaction hasn't modified an entry while it was read and potentially updated based on the value read.
+
+When operating in LOCAL mode, write skew checks rely on Java object references to compare differences and this is adequate to provide a reliable write-skew check, however this technique is useless in a cluster and a more reliable form of versioning is necessary to provide reliable write skew checks.
+
+ Simple versioning is an implementation of the proposed EntryVersion interface, backed by a long that is incremented each time the entry is updated. 
+
+[[sid-68355117_DataVersioning-Partitionawareversioning]]
+
+
+==== Partition-aware versioning
+
+ This versioning scheme makes use of link:$$http://en.wikipedia.org/wiki/Vector_clock$$[vector clocks] to provide a network partition resilient form of versioning. 
+
+Unlike simple versioning, which is maintained per entry, a vector clock's node counter is maintained per-node.
+
+[[sid-68355117_DataVersioning-Externalversioning]]
+
+
+==== External versioning
+
+This scheme is used to encapsulate an external source of data versioning within Infinispan, such as when using Infinispan with Hibernate which in turn gets it's data version information directly from a database.
+
+ In this scheme, a mechanism to pass in the version becomes necessary, and overloaded versions of put() and putForExternalRead() will be provided in AdvancedCache to take in an external data version.  This is then stored on the InvocationContext and applied to the entry at commit time. 
+
+Write skew checks cannot and will not be performed in the case of external data versioning.
+
+[[sid-68355117_DataVersioning-Tombstones]]
+
+
+==== Tombstones
+
+ To deal with deletions of entries, tombstones will be maintained as null entries that have been deleted, so that version information of the deleted entry can be maintained and write skews can still be detected.  However this is an expensive thing to do, and as such, is a configuration option, disabled by default. Further, tombstones will follow a strict lifespan and will be cleared from the system after a specific amount of time. 
+
+[[sid-68355117_DataVersioning-Configuration]]
+
+
+=== Configuration
+
+ By default versioning will be _disabled_ .  This will mean write skew checks when using transactions and _$$REPEATABLE_READ$$_ as an isolation level will be unreliable when used in a cluster.  Note that this doesn't affect single-node, LOCAL mode usage. 
+
+[[sid-68355117_DataVersioning-ViaXML]]
+
+
+==== Via XML
+
+
+----
+
+<versioning enabled="false" type="SIMPLE|PARTITION_AWARE|EXTERNAL" useTombstones="false" tombstoneLifespan="60000"/>
+
+----
+
+[[sid-68355117_DataVersioning-ViatheprogrammaticAPI]]
+
+
+==== Via the programmatic API
+
+
+----
+
+fluent().versioning().type(SIMPLE).useTombstones(true).tombstoneLifespan(1, TimeUnit.MINUTES);
+
+
+----
+
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-78-Infinispan_modules_for_JBoss_AS_7_x.adoc b/documentation/src/main/asciidoc/user_guide/chapter-78-Infinispan_modules_for_JBoss_AS_7_x.adoc
new file mode 100644
index 0000000..c8047ed
--- /dev/null
+++ b/documentation/src/main/asciidoc/user_guide/chapter-78-Infinispan_modules_for_JBoss_AS_7_x.adoc
@@ -0,0 +1,59 @@
+[[sid-68355119]]
+
+==  Infinispan modules for JBoss AS 7.x
+
+ Since Infinispan 5.2, the distribution includes a set of modules for JBoss AS 7.x. By installing these modules, it is possible to deploy user applications without packaging the Infinispan JARs within the deployments (WARs, EARs, etc), thus minimizing their size. In order not to conflict with the Infinispan modules which are already present within an AS installation, the modules provided by the Infinispan distribution are located within their own slot identified by the _major.minor_ versions (e.g. slot="5.2"). 
+
+In order to tell the AS deployer that we want to use the Infinispan APIs within our application, we need to add explicit dependencies to the deployment's MANIFEST:
+
+.MANIFEST.MF
+
+==== 
+----
+
+Manifest-Version: 1.0
+Dependencies: org.infinispan:5.2 services
+
+----
+
+==== 
+ If you are using Maven to generate your artifacts, mark the Infinispan dependencies as _provided_ and configure your artifact archiver to generate the appropriate MANIFEST.MF file: 
+
+.pom.xml
+
+==== 
+----
+
+<dependencies>
+  <dependency>
+    <groupId>org.infinispan</groupId>
+    <artifactId>infinispan-core</artifactId>
+    <version>5.2.0.Final</version>
+    <scope>provided</scope>
+  </dependency>
+  <dependency>
+    <groupId>org.infinispan</groupId>
+    <artifactId>infinispan-cachestore-jdbc</artifactId>
+    <version>5.2.0.Final</version>
+    <scope>provided</scope>
+  </dependency>
+</dependencies>
+<build>
+  <plugins>
+     <plugin>
+       <groupId>org.apache.maven.plugins</groupId>
+       <artifactId>maven-war-plugin</artifactId>
+       <configuration>
+         <archive>
+           <manifestEntries>
+             <Dependencies>org.infinispan:5.2 services, org.infinispan.cachestore.jdbc:5.2 services</Dependencies>
+           </manifestEntries>
+         </archive>
+      </configuration>
+    </plugin>
+  </plugins>
+</build>
+
+----
+
+==== 
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-8-Grid_File_System.adoc b/documentation/src/main/asciidoc/user_guide/chapter-8-Grid_File_System.adoc
index 9efd5b8..f03b58e 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-8-Grid_File_System.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-8-Grid_File_System.adoc
@@ -1,4 +1,4 @@
-[[sid-65273982]]
+[[sid-68355033]]
 
 ==  Grid File System
 
@@ -59,7 +59,7 @@ out.close();
 
 ----
 
-[[sid-65273982_GridFileSystem-WebDAVdemo]]
+[[sid-68355033_GridFileSystem-WebDAVdemo]]
 
 
 === WebDAV demo
diff --git a/documentation/src/main/asciidoc/user_guide/chapter-9-Infinispan_WebSocket_Server.adoc b/documentation/src/main/asciidoc/user_guide/chapter-9-Infinispan_WebSocket_Server.adoc
index 613acce..1b687a1 100644
--- a/documentation/src/main/asciidoc/user_guide/chapter-9-Infinispan_WebSocket_Server.adoc
+++ b/documentation/src/main/asciidoc/user_guide/chapter-9-Infinispan_WebSocket_Server.adoc
@@ -1,10 +1,10 @@
-[[sid-65273983]]
+[[sid-68355034]]
 
 ==  Infinispan WebSocket Server
 
  The Infinispan WebSocket Server can be used to expose an Infinispan Cache instance over a link:$$http://dev.w3.org/html5/websockets/$$[WebSocket Interface] via a very simple Javascript "Cache" API.  The WebSocket Interface was introduced as part of the HTML 5 specification.  It defines a full-duplex communication channel to the browser, operating over a single socket (unlike Comet or Ajax) and is exposed to the browser via a Javascript interface. 
 
-[[sid-65273983_InfinispanWebSocketServer-StartingTheServer]]
+[[sid-68355034_InfinispanWebSocketServer-StartingTheServer]]
 
 
 === Starting The Server
@@ -18,7 +18,7 @@ $ bin/startServer.sh -r websocket
 
  For more help on available switches, check out the link:$$https://docs.jboss.org/author/pages/viewpage.action?pageId=3737161$$[server command line options article] . 
 
-[[sid-65273983_InfinispanWebSocketServer-JavascriptAPI]]
+[[sid-68355034_InfinispanWebSocketServer-JavascriptAPI]]
 
 
 === Javascript API
@@ -32,7 +32,7 @@ $ bin/startServer.sh -r websocket
 <script type="text/javascript" src="<a href="http://www.acme.com:61999/infinispan-ws.js" target="_blank">http://www.acme.com:8181/infinispan-ws.js</a>" />
 ----
 
-[[sid-65273983_InfinispanWebSocketServer-CreatingaClientSideCacheObjectInstance]]
+[[sid-68355034_InfinispanWebSocketServer-CreatingaClientSideCacheObjectInstance]]
 
 
 ==== Creating a Client-Side Cache Object Instance
@@ -58,7 +58,7 @@ var cache = new Cache("omCache", "ws://ws.acmews.com:8181");
 // etc...
 ----
 
-[[sid-65273983_InfinispanWebSocketServer-CacheOperations]]
+[[sid-68355034_InfinispanWebSocketServer-CacheOperations]]
 
 
 ==== Cache Operations
@@ -106,35 +106,35 @@ function cacheCallback(key, value) {
 
 ----
 
-[[sid-65273983_InfinispanWebSocketServer-Samplecode]]
+[[sid-68355034_InfinispanWebSocketServer-Samplecode]]
 
 
 === Sample code
 
  Infinispan's source tree contains a sample HTML document that makes use of the WebSocket server.  Browse through the source of this HTML document link:$$http://fisheye.jboss.org/browse/Infinispan/trunk/server/websocket/src/main/distribution/sample-websocket-client.html$$[here] . 
 
-[[sid-65273983_InfinispanWebSocketServer-BrowserSupport]]
+[[sid-68355034_InfinispanWebSocketServer-BrowserSupport]]
 
 
 === Browser Support
 
  At the time of writing, Google Chrome was the only browser with native WebSocket support.  However, the link:$$http://jwebsocket.org/$$[jWebSocket] project provides a client side Javascript library that adds WebSocket support to any Flash enabled browser. 
 
-[[sid-65273983_InfinispanWebSocketServer-Screencast]]
+[[sid-68355034_InfinispanWebSocketServer-Screencast]]
 
 
 === Screencast
 
  See the following link:$$http://www.screencast.com/t/ZGEzNDJlY$$[demo of the Infinispan WebSocket Server] in action. 
 
-[[sid-65273983_InfinispanWebSocketServer-Status]]
+[[sid-68355034_InfinispanWebSocketServer-Status]]
 
 
 === Status
 
 Prototype/Alpha.
 
-[[sid-65273983_InfinispanWebSocketServer-Source]]
+[[sid-68355034_InfinispanWebSocketServer-Source]]
 
 
 === Source
